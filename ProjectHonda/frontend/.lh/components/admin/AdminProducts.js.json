{
    "sourceFile": "components/admin/AdminProducts.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 37,
            "patches": [
                {
                    "date": 1741337544329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741339895374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n   const [maxPrice, setMaxPrice] = useState('');\r\n   const [products, setProducts] = useState([]);\r\n   const [brands, setBrands] = useState([]);\r\n   const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n   const [brandMap, setBrandMap] = useState({});\r\n   const [searchTerm, setSearchTerm] = useState(\"\");\r\n   const [filterBrand, setFilterBrand] = useState(\"\");\r\n   const [formData, setFormData] = useState({\r\n"
                },
                {
                    "date": 1741582820543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,9 @@\n       console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n       toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n     }\r\n   };\r\n+\r\n   const handleDelete = async (id) => {\r\n     if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n \r\n     try {\r\n@@ -200,9 +201,9 @@\n   return (\r\n     <div className={`grid`}>\r\n       <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n         <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">\r\n+        <div className=\"flex justify-between mb-4\">z\r\n           <input\r\n             type=\"text\"\r\n             placeholder=\"Tìm kiếm sản phẩm...\"\r\n             className=\"border p-2 rounded w-1/3\"\r\n"
                },
                {
                    "date": 1741583195330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { ToastContainer, toast } from \"react-toastify\";\r\n import \"react-toastify/dist/ReactToastify.css\";\r\n import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import ClipLoader from \"react-spinners/ClipLoader\"; // Thêm thư viện spinner\r\n \r\n const AdminProducts = () => {\r\n   const [minPrice, setMinPrice] = useState('');\r\n   const [maxPrice, setMaxPrice] = useState('');\r\n@@ -63,17 +64,14 @@\n     fetchData();\r\n   }, []);\r\n   const handleSubmit = async (e) => {\r\n     e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n \r\n     const formDataWithImage = new FormData();\r\n-    console.log(formData);\r\n-\r\n     Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image && formData.image.length > 0) {\r\n-        formData.image.forEach((img) => {\r\n-          formDataWithImage.append(\"image\", img); // Không JSON.stringify ảnh\r\n-        });\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n       } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n         formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n       } else {\r\n         formDataWithImage.append(key, formData[key]);\r\n@@ -86,24 +84,22 @@\n           `http://localhost:5000/api/products/${editingProduct._id}`,\r\n           formDataWithImage,\r\n           { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n         );\r\n-\r\n         toast.success(\"Cập nhật sản phẩm thành công!\");\r\n       } else {\r\n         await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n           headers: { \"Content-Type\": \"multipart/form-data\" },\r\n         });\r\n-\r\n         toast.success(\"Thêm sản phẩm thành công!\");\r\n       }\r\n-\r\n       fetchData();\r\n     } catch (error) {\r\n       console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n       toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n     }\r\n-  };\r\n \r\n   const handleDelete = async (id) => {\r\n     if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n \r\n"
                },
                {
                    "date": 1741583232860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import ClipLoader from \"react-spinners/ClipLoader\"; // Thêm thư viện spinner\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+\r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages, // Cập nhật ảnh đã lọc\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+    setImagePreview(filteredImages);\r\n+  };\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        {loading && (\r\n+        <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n+          <ClipLoader size={35} color=\"#36d7b7\" />\r\n+        </div>\r\n+      )}\r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741583307743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,339 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import ClipLoader from \"react-spinners/ClipLoader\"; // Thêm thư viện spinner\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  \r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+\r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages, // Cập nhật ảnh đã lọc\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+    setImagePreview(filteredImages);\r\n+  };\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        {loading && (\r\n+        <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n+          <ClipLoader size={35} color=\"#36d7b7\" />\r\n+        </div>\r\n+      )}\r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741583492673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,340 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import ClipLoader from \"react-spinners/ClipLoader\"; // Thêm thư viện spinner\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+\r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages, // Cập nhật ảnh đã lọc\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+    setImagePreview(filteredImages);\r\n+  };\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      {loading && (\r\n+        <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n+          <ClipLoader size={35} color=\"#36d7b7\" />\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741583532248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import ClipLoader from \"react-spinners/ClipLoader\"; // Thêm thư viện spinner\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+\r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages, // Cập nhật ảnh đã lọc\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+    setImagePreview(filteredImages);\r\n+  };\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+        <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n+          <ClipLoader size={35} color=\"#36d7b7\" />\r\n+        </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741583595363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,11 +327,13 @@\n         handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n         editingProduct={editingProduct}\r\n       />\r\n       <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      {loading && (\r\n         <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n           <ClipLoader size={35} color=\"#36d7b7\" />\r\n         </div>\r\n+      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1741583791136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,346 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+\r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages, // Cập nhật ảnh đã lọc\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+    setImagePreview(filteredImages);\r\n+  };\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <div>\r\n+      {/* Màn hình loading */}\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+      <form onSubmit={handleSubmit}>\r\n+        {/* Các input form */}\r\n+        <button type=\"submit\" disabled={loading}>\r\n+          Gửi\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741583824425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+\r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages, // Cập nhật ảnh đã lọc\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+    setImagePreview(filteredImages);\r\n+  };\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741584023690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+\r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages, // Cập nhật ảnh đã lọc\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+    setImagePreview(filteredImages);\r\n+  };\r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741584160635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,339 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+\r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages, // Cập nhật ảnh đã lọc\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+    setImagePreview(filteredImages);\r\n+  };\r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741584648795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,372 +125,42 @@\n   };\r\n \r\n   const handleEdit = (product) => {\r\n     toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-\r\n+  \r\n     const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-\r\n+  \r\n     // Nếu ảnh là default thì loại bỏ\r\n     const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-\r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages, // Cập nhật ảnh đã lọc\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-    setImagePreview(filteredImages);\r\n-  };\r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+  \r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n     }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-\r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-\r\n+  \r\n     setFormData({\r\n       code: product.code || \"\",\r\n       name: product.name || \"\",\r\n       brand: product.brand?._id || \"\",\r\n       categories: product.categories?.map((cat) => cat._id) || [],\r\n       price: product.price || 0,\r\n       quantity: product.quantity || 0,\r\n       description: product.description || \"\",\r\n-      image: filteredImages, // Cập nhật ảnh đã lọc\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n       additionalInfo: {\r\n         weight: product.additionalInfo?.weight || 0,\r\n         length: product.additionalInfo?.length || 0,\r\n         width: product.additionalInfo?.width || 0,\r\n         height: product.additionalInfo?.height || 0,\r\n       },\r\n     });\r\n+    \r\n     setIsSidebarOpen(true);\r\n     setEditingProduct(product);\r\n-    setImagePreview(filteredImages);\r\n   };\r\n+  \r\n \r\n   const formatPrice = (price) => {\r\n     return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n   };\r\n@@ -674,2376 +344,4 @@\n   );\r\n };\r\n \r\n export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-\r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-\r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages, // Cập nhật ảnh đã lọc\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-    setImagePreview(filteredImages);\r\n-  };\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-\r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-\r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages, // Cập nhật ảnh đã lọc\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-    setImagePreview(filteredImages);\r\n-  };\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <div>\r\n-      {/* Màn hình loading */}\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-      <form onSubmit={handleSubmit}>\r\n-        {/* Các input form */}\r\n-        <button type=\"submit\" disabled={loading}>\r\n-          Gửi\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import ClipLoader from \"react-spinners/ClipLoader\"; // Thêm thư viện spinner\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-\r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-\r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages, // Cập nhật ảnh đã lọc\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-    setImagePreview(filteredImages);\r\n-  };\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      {loading && (\r\n-        <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n-          <ClipLoader size={35} color=\"#36d7b7\" />\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import ClipLoader from \"react-spinners/ClipLoader\"; // Thêm thư viện spinner\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-\r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-\r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages, // Cập nhật ảnh đã lọc\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-    setImagePreview(filteredImages);\r\n-  };\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      {loading && (\r\n-        <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n-          <ClipLoader size={35} color=\"#36d7b7\" />\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import ClipLoader from \"react-spinners/ClipLoader\"; // Thêm thư viện spinner\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  \r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-\r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-\r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages, // Cập nhật ảnh đã lọc\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-    setImagePreview(filteredImages);\r\n-  };\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        {loading && (\r\n-        <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n-          <ClipLoader size={35} color=\"#36d7b7\" />\r\n-        </div>\r\n-      )}\r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import ClipLoader from \"react-spinners/ClipLoader\"; // Thêm thư viện spinner\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-\r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-\r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages, // Cập nhật ảnh đã lọc\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-    setImagePreview(filteredImages);\r\n-  };\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        {loading && (\r\n-        <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n-          <ClipLoader size={35} color=\"#36d7b7\" />\r\n-        </div>\r\n-      )}\r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import ClipLoader from \"react-spinners/ClipLoader\"; // Thêm thư viện spinner\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-\r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-\r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages, // Cập nhật ảnh đã lọc\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-    setImagePreview(filteredImages);\r\n-  };\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n"
                },
                {
                    "date": 1741584737656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,14 +116,21 @@\n     }\r\n   };\r\n \r\n   const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    const files = Array.from(e.target.files); // Chuyển đổi danh sách file từ input thành mảng\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file)); // Tạo URL cho ảnh\r\n+  \r\n+    // Cập nhật state 'image' trong formData với đối tượng file\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: [...prev.image, ...files], // Lưu file vào formData\r\n+    }));\r\n+  \r\n+    // Cập nhật state 'imagePreview' với các URL ảnh đã tạo\r\n     setImagePreview((prev) => [...prev, ...imageUrls]);\r\n   };\r\n+  \r\n \r\n   const handleEdit = (product) => {\r\n     toast.success(\"Sửa sản phẩm: \" + product.name);\r\n   \r\n"
                },
                {
                    "date": 1741584931452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,347 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files); // Chuyển đổi danh sách file từ input thành mảng\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file)); // Tạo URL cho ảnh\r\n+  \r\n+    // Cập nhật image vào formData\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: [...prev.image, ...files], // Lưu file vào formData\r\n+    }));\r\n+  \r\n+    // Cập nhật preview ảnh\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };  \r\n+  \r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+  \r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+  \r\n+    setImagePreview(filteredImages.length > 0 ? filteredImages : [defaultImageUrl]);\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length > 0 ? filteredImages : [defaultImageUrl],\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+  \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741585039352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,11 +133,18 @@\n   const handleEdit = (product) => {\r\n     toast.success(\"Sửa sản phẩm: \" + product.name);\r\n   \r\n     const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n     const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n   \r\n-    setImagePreview(filteredImages.length > 0 ? filteredImages : [defaultImageUrl]);\r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n   \r\n     setFormData({\r\n       code: product.code || \"\",\r\n       name: product.name || \"\",\r\n@@ -145,22 +152,21 @@\n       categories: product.categories?.map((cat) => cat._id) || [],\r\n       price: product.price || 0,\r\n       quantity: product.quantity || 0,\r\n       description: product.description || \"\",\r\n-      image: filteredImages.length > 0 ? filteredImages : [defaultImageUrl],\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n       additionalInfo: {\r\n         weight: product.additionalInfo?.weight || 0,\r\n         length: product.additionalInfo?.length || 0,\r\n         width: product.additionalInfo?.width || 0,\r\n         height: product.additionalInfo?.height || 0,\r\n       },\r\n     });\r\n-  \r\n+    \r\n     setIsSidebarOpen(true);\r\n     setEditingProduct(product);\r\n   };\r\n   \r\n-  \r\n \r\n   const formatPrice = (price) => {\r\n     return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n   };\r\n"
                },
                {
                    "date": 1741593412600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,347 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+    console.log(formData)\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+  \r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+  \r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741593463986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,348 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+    console.log(formData)\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(editingProduct)\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+  \r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+  \r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741593644705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,348 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+    console.log(formData)\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(formDataWithImage)\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  }\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+  \r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+  \r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741593967973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,358 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+  e.preventDefault();\r\n+  setLoading(true); // Bắt đầu hiển thị spinner\r\n+\r\n+  console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n+  console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n+  console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n+\r\n+  const formDataWithImage = new FormData();\r\n+  Object.keys(formData).forEach((key) => {\r\n+    if (key === \"image\" && formData.image?.length > 0) {\r\n+      formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+    } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+      formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+    } else {\r\n+      formDataWithImage.append(key, formData[key]);\r\n+    }\r\n+  });\r\n+\r\n+  console.log(\"🔹 formDataWithImage (FormData):\");\r\n+  for (let [key, value] of formDataWithImage.entries()) {\r\n+    console.log(`${key}:`, value);\r\n+  }\r\n+\r\n+  try {\r\n+    if (editingProduct) {\r\n+      console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n+      await axios.put(\r\n+        `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+        formDataWithImage,\r\n+        { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+      );\r\n+      toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+    } else {\r\n+      console.log(\"➕ Thêm sản phẩm mới\");\r\n+      await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+      });\r\n+      toast.success(\"Thêm sản phẩm thành công!\");\r\n+    }\r\n+    fetchData();\r\n+  } catch (error) {\r\n+    console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+    toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+  } finally {\r\n+    setLoadi\r\n+\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+  \r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+  \r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741593990227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,360 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  \r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+  \r\n+    console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n+    console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n+    console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n+  \r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+  \r\n+    console.log(\"🔹 formDataWithImage (FormData):\");\r\n+    for (let [key, value] of formDataWithImage.entries()) {\r\n+      console.log(`${key}:`, value);\r\n+    }\r\n+  \r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        console.log(\"➕ Thêm sản phẩm mới\");\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  };\r\n+  \r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+\r\n+    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+  \r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+  \r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741594309986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,366 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  \r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+  \r\n+    console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n+    console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n+    console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n+  \r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+  \r\n+    console.log(\"🔹 formDataWithImage (FormData):\");\r\n+    for (let [key, value] of formDataWithImage.entries()) {\r\n+      console.log(`${key}:`, value);\r\n+    }\r\n+  \r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        console.log(\"➕ Thêm sản phẩm mới\");\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  };\r\n+  \r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n+  \r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+  \r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image ? [...prev.image, ...files] : [...files],\r\n+    }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+  \r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+  \r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+  \r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741594465931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,367 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  \r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+  \r\n+    console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n+    console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n+    console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n+  \r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+  \r\n+    console.log(\"🔹 formDataWithImage (FormData):\");\r\n+    for (let [key, value] of formDataWithImage.entries()) {\r\n+      console.log(`${key}:`, value);\r\n+    }\r\n+  \r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        console.log(\"➕ Thêm sản phẩm mới\");\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  };\r\n+  \r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+    console.log(files)\r\n+    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n+  \r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+  \r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image ? [...prev.image, ...files] : [...files],\r\n+    }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+  \r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+  \r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+  \r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741594526999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,367 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  \r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+  \r\n+    console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n+    console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n+    console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n+  \r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+  \r\n+    console.log(\"🔹 formDataWithImage (FormData):\");\r\n+    for (let [key, value] of formDataWithImage.entries()) {\r\n+      console.log(`${key}:`, value);\r\n+    }\r\n+  \r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        console.log(\"➕ Thêm sản phẩm mới\");\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  };\r\n+  \r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+\r\n+    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n+  \r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+    console.log(files)\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image ? [...prev.image, ...files] : [...files],\r\n+    }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+  \r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+  \r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+  \r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741594563169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,366 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  \r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true); // Bắt đầu hiển thị spinner\r\n+  \r\n+    console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n+    console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n+    console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n+  \r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n+      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+  \r\n+    console.log(\"🔹 formDataWithImage (FormData):\");\r\n+    for (let [key, value] of formDataWithImage.entries()) {\r\n+      console.log(`${key}:`, value);\r\n+    }\r\n+  \r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        console.log(\"➕ Thêm sản phẩm mới\");\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+    }\r\n+  };\r\n+  \r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+\r\n+  \r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+    console.log(files)\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image ? [...prev.image, ...files] : [...files],\r\n+    }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+  \r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+  \r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+  \r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">z\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741594882792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,374 +131,8 @@\n \r\n   const handleImageChange = (e) => {\r\n     const files = Array.from(e.target.files);\r\n \r\n-  \r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-    console.log(files)\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image ? [...prev.image, ...files] : [...files],\r\n-    }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-  \r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  \r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-  \r\n-    console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n-    console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n-    console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n-  \r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-  \r\n-    console.log(\"🔹 formDataWithImage (FormData):\");\r\n-    for (let [key, value] of formDataWithImage.entries()) {\r\n-      console.log(`${key}:`, value);\r\n-    }\r\n-  \r\n-    try {\r\n-      if (editingProduct) {\r\n-        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        console.log(\"➕ Thêm sản phẩm mới\");\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  };\r\n-  \r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-\r\n     if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n   \r\n     const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n     console.log(files)\r\n@@ -730,3205 +364,4 @@\n   );\r\n };\r\n \r\n export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  \r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-  \r\n-    console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n-    console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n-    console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n-  \r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-  \r\n-    console.log(\"🔹 formDataWithImage (FormData):\");\r\n-    for (let [key, value] of formDataWithImage.entries()) {\r\n-      console.log(`${key}:`, value);\r\n-    }\r\n-  \r\n-    try {\r\n-      if (editingProduct) {\r\n-        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        console.log(\"➕ Thêm sản phẩm mới\");\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  };\r\n-  \r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    console.log(files)\r\n-    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n-  \r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-  \r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image ? [...prev.image, ...files] : [...files],\r\n-    }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-  \r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  \r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-  \r\n-    console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n-    console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n-    console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n-  \r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-  \r\n-    console.log(\"🔹 formDataWithImage (FormData):\");\r\n-    for (let [key, value] of formDataWithImage.entries()) {\r\n-      console.log(`${key}:`, value);\r\n-    }\r\n-  \r\n-    try {\r\n-      if (editingProduct) {\r\n-        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        console.log(\"➕ Thêm sản phẩm mới\");\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  };\r\n-  \r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n-  \r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-  \r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image ? [...prev.image, ...files] : [...files],\r\n-    }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-  \r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  \r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-  \r\n-    console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n-    console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n-    console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n-  \r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-  \r\n-    console.log(\"🔹 formDataWithImage (FormData):\");\r\n-    for (let [key, value] of formDataWithImage.entries()) {\r\n-      console.log(`${key}:`, value);\r\n-    }\r\n-  \r\n-    try {\r\n-      if (editingProduct) {\r\n-        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        console.log(\"➕ Thêm sản phẩm mới\");\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  };\r\n-  \r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-  e.preventDefault();\r\n-  setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-  console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n-  console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n-  console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n-\r\n-  const formDataWithImage = new FormData();\r\n-  Object.keys(formData).forEach((key) => {\r\n-    if (key === \"image\" && formData.image?.length > 0) {\r\n-      formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-    } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-      formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-    } else {\r\n-      formDataWithImage.append(key, formData[key]);\r\n-    }\r\n-  });\r\n-\r\n-  console.log(\"🔹 formDataWithImage (FormData):\");\r\n-  for (let [key, value] of formDataWithImage.entries()) {\r\n-    console.log(`${key}:`, value);\r\n-  }\r\n-\r\n-  try {\r\n-    if (editingProduct) {\r\n-      console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n-      await axios.put(\r\n-        `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-        formDataWithImage,\r\n-        { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-      );\r\n-      toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-    } else {\r\n-      console.log(\"➕ Thêm sản phẩm mới\");\r\n-      await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-      });\r\n-      toast.success(\"Thêm sản phẩm thành công!\");\r\n-    }\r\n-    fetchData();\r\n-  } catch (error) {\r\n-    console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-    toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-  } finally {\r\n-    setLoadi\r\n-\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-    console.log(formData)\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        console.log(formDataWithImage)\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-    console.log(formData)\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        console.log(editingProduct)\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-    console.log(formData)\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-\r\n-    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files); // Chuyển đổi danh sách file từ input thành mảng\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file)); // Tạo URL cho ảnh\r\n-  \r\n-    // Cập nhật image vào formData\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: [...prev.image, ...files], // Lưu file vào formData\r\n-    }));\r\n-  \r\n-    // Cập nhật preview ảnh\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };  \r\n-  \r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n-\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-\r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n-    }\r\n-  }\r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files); // Chuyển đổi danh sách file từ input thành mảng\r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file)); // Tạo URL cho ảnh\r\n-  \r\n-    // Cập nhật state 'image' trong formData với đối tượng file\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: [...prev.image, ...files], // Lưu file vào formData\r\n-    }));\r\n-  \r\n-    // Cập nhật state 'imagePreview' với các URL ảnh đã tạo\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-  \r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n"
                },
                {
                    "date": 1741595621852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,26 +67,30 @@\n   }, []);\r\n   \r\n   const handleSubmit = async (e) => {\r\n     e.preventDefault();\r\n-    setLoading(true); // Bắt đầu hiển thị spinner\r\n+    setLoading(true);\r\n   \r\n-    console.log(\"🚀 Trước khi chỉnh sửa:\");\r\n-    console.log(\"🔹 editingProduct:\", editingProduct); // Log thông tin sản phẩm đang chỉnh sửa (nếu có)\r\n-    console.log(\"🔹 formData:\", formData); // Log dữ liệu nhập từ form\r\n+    console.log(\"🚀 Trước khi gửi API:\");\r\n+    console.log(\"🔹 editingProduct:\", editingProduct);\r\n+    console.log(\"🔹 formData trước khi tạo FormData:\", formData);\r\n   \r\n     const formDataWithImage = new FormData();\r\n     Object.keys(formData).forEach((key) => {\r\n       if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => formDataWithImage.append(\"image\", img));\r\n-      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n+        formData.image.forEach((img) => {\r\n+          if (img instanceof File) {\r\n+            formDataWithImage.append(\"image\", img); // Chỉ thêm ảnh mới\r\n+          } else {\r\n+            formDataWithImage.append(\"existingImages\", img); // Giữ ảnh cũ\r\n+          }\r\n+        });\r\n       } else {\r\n         formDataWithImage.append(key, formData[key]);\r\n       }\r\n     });\r\n   \r\n-    console.log(\"🔹 formDataWithImage (FormData):\");\r\n+    console.log(\"🔹 formDataWithImage gửi đi:\");\r\n     for (let [key, value] of formDataWithImage.entries()) {\r\n       console.log(`${key}:`, value);\r\n     }\r\n   \r\n@@ -110,12 +114,13 @@\n     } catch (error) {\r\n       console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n       toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n     } finally {\r\n-      setLoading(false); // Ẩn spinner sau khi API hoàn thành\r\n+      setLoading(false);\r\n     }\r\n   };\r\n   \r\n+  \r\n \r\n   const handleDelete = async (id) => {\r\n     if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n \r\n"
                },
                {
                    "date": 1741677038122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n   return (\r\n     <div className={`grid`}>\r\n       <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n         <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">z\r\n+        <div className=\"flex justify-between mb-4\">\r\n           <input\r\n             type=\"text\"\r\n             placeholder=\"Tìm kiếm sản phẩm...\"\r\n             className=\"border p-2 rounded w-1/3\"\r\n"
                },
                {
                    "date": 1741677120885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n   \r\n \r\n   const handleEdit = (product) => {\r\n     toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-  \r\n+    console.log(product)\r\n     const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n   \r\n     // Nếu ảnh là default thì loại bỏ\r\n     const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n"
                },
                {
                    "date": 1741677182843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n     const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n   \r\n     // Nếu ảnh là default thì loại bỏ\r\n     const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-  \r\n+    console.log(product)\r\n     // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n     if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n       setImagePreview([defaultImageUrl]);\r\n     } else {\r\n"
                },
                {
                    "date": 1741677189415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n     const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n   \r\n     // Nếu ảnh là default thì loại bỏ\r\n     const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-    console.log(product)\r\n+    console.log(filteredImages)\r\n     // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n     if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n       setImagePreview([defaultImageUrl]);\r\n     } else {\r\n"
                },
                {
                    "date": 1741677438217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,372 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  \r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+  \r\n+    console.log(\"🚀 Trước khi gửi API:\");\r\n+    console.log(\"🔹 editingProduct:\", editingProduct);\r\n+    console.log(\"🔹 formData trước khi tạo FormData:\", formData);\r\n+  \r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => {\r\n+          if (img instanceof File) {\r\n+            formDataWithImage.append(\"image\", img); // Chỉ thêm ảnh mới\r\n+          } else {\r\n+            formDataWithImage.append(\"existingImages\", img); // Giữ ảnh cũ\r\n+          }\r\n+        });\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+  \r\n+    console.log(\"🔹 formDataWithImage gửi đi:\");\r\n+    for (let [key, value] of formDataWithImage.entries()) {\r\n+      console.log(`${key}:`, value);\r\n+    }\r\n+  \r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        console.log(\"➕ Thêm sản phẩm mới\");\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+  \r\n+  \r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+\r\n+    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n+  \r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+    console.log(files)\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image ? [...prev.image, ...files] : [...files],\r\n+    }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+  \r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+    console.log(product)\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+    console.log(filteredImages  )\r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741677524043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,370 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  \r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+  \r\n+    console.log(\"🚀 Trước khi gửi API:\");\r\n+    console.log(\"🔹 editingProduct:\", editingProduct);\r\n+    console.log(\"🔹 formData trước khi tạo FormData:\", formData);\r\n+  \r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => {\r\n+          if (img instanceof File) {\r\n+            formDataWithImage.append(\"image\", img); // Chỉ thêm ảnh mới\r\n+          } else {\r\n+            formDataWithImage.append(\"existingImages\", img); // Giữ ảnh cũ\r\n+          }\r\n+        });\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+  \r\n+    console.log(\"🔹 formDataWithImage gửi đi:\");\r\n+    for (let [key, value] of formDataWithImage.entries()) {\r\n+      console.log(`${key}:`, value);\r\n+    }\r\n+  \r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        console.log(\"➕ Thêm sản phẩm mới\");\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+  \r\n+  \r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+\r\n+    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n+  \r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+    console.log(files)\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image ? [...prev.image, ...files] : [...files],\r\n+    }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+  \r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+    console.log(product)\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+    console.log(filteredImages  )\r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length !== 0 && imagePreview.length !== 0) {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741678043533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,372 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState('');\r\n+  const [maxPrice, setMaxPrice] = useState('');\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",                          // String\r\n+    name: \"\",                          // String\r\n+    brand: \"\",                         // ObjectId (String)\r\n+    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0,                          // Number\r\n+    quantity: 0,                       // Number\r\n+    description: \"\",                    // String\r\n+    image: [],                          // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0,                        // Number\r\n+      length: 0,                        // Number\r\n+      width: 0,                         // Number\r\n+      height: 0,                        // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data)\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {}));\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+  \r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+  \r\n+    console.log(\"🚀 Trước khi gửi API:\");\r\n+    console.log(\"🔹 editingProduct:\", editingProduct);\r\n+    console.log(\"🔹 formData trước khi tạo FormData:\", formData);\r\n+  \r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => {\r\n+          if (img instanceof File) {\r\n+            formDataWithImage.append(\"image\", img); // Chỉ thêm ảnh mới\r\n+          } else {\r\n+            formDataWithImage.append(\"existingImages\", img); // Giữ ảnh cũ\r\n+          }\r\n+        });\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+  \r\n+    console.log(\"🔹 formDataWithImage gửi đi:\");\r\n+    for (let [key, value] of formDataWithImage.entries()) {\r\n+      console.log(`${key}:`, value);\r\n+    }\r\n+  \r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        console.log(\"➕ Thêm sản phẩm mới\");\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+  \r\n+  \r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter(product => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+\r\n+    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n+  \r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+    console.log(files)\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image ? [...prev.image, ...files] : [...files],\r\n+    }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+  \r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+    console.log(product)\r\n+    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+  \r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+    console.log(filteredImages  )\r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+  \r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+    \r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+  \r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\",                          // String\r\n+      name: \"\",                          // String\r\n+      brand: \"\",                         // ObjectId (String)\r\n+      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0,                          // Number\r\n+      quantity: 0,                       // Number\r\n+      description: \"\",                    // String\r\n+      image: [],                          // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0,                        // Number\r\n+        length: 0,                        // Number\r\n+        width: 0,                         // Number\r\n+        height: 0,                        // Number\r\n+      }\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      }\r\n+    }));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n+                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n+                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n+                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n+                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n+                      ) : (\r\n+                        \"Không có thông tin thêm\"\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                        <button\r\n+                          onClick={() => handleEdit(product)}\r\n+                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Sửa\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() => handleDelete(product._id)}\r\n+                          className=\"text-red-500 px-3 py-1 rounded\"\r\n+                        >\r\n+                          Xóa\r\n+                        </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+        \r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741678620249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,10 +228,13 @@\n         [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n       }\r\n     }));\r\n   };\r\n+  const handleCreate=() => {\r\n+    handleClear();\r\n+    handleOpenSidebar();\r\n+  }\r\n \r\n-\r\n   return (\r\n     <div className={`grid`}>\r\n       <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n         <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n@@ -262,9 +265,9 @@\n             placeholder=\"Giá tối đa\"\r\n             className=\"border p-2 rounded w-1/6\"\r\n             onChange={(e) => setMaxPrice(e.target.value)}\r\n           />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n+          <button onClick={handleCreate} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n             Thêm sản phẩm\r\n           </button>\r\n         </div>\r\n         <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n@@ -369,1118 +372,4 @@\n   );\r\n };\r\n \r\n export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  \r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-  \r\n-    console.log(\"🚀 Trước khi gửi API:\");\r\n-    console.log(\"🔹 editingProduct:\", editingProduct);\r\n-    console.log(\"🔹 formData trước khi tạo FormData:\", formData);\r\n-  \r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => {\r\n-          if (img instanceof File) {\r\n-            formDataWithImage.append(\"image\", img); // Chỉ thêm ảnh mới\r\n-          } else {\r\n-            formDataWithImage.append(\"existingImages\", img); // Giữ ảnh cũ\r\n-          }\r\n-        });\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-  \r\n-    console.log(\"🔹 formDataWithImage gửi đi:\");\r\n-    for (let [key, value] of formDataWithImage.entries()) {\r\n-      console.log(`${key}:`, value);\r\n-    }\r\n-  \r\n-    try {\r\n-      if (editingProduct) {\r\n-        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        console.log(\"➕ Thêm sản phẩm mới\");\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-  \r\n-  \r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-\r\n-    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n-  \r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-    console.log(files)\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image ? [...prev.image, ...files] : [...files],\r\n-    }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-  \r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-    console.log(product)\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-    console.log(filteredImages  )\r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length !== 0 && imagePreview.length !== 0) {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  \r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-  \r\n-    console.log(\"🚀 Trước khi gửi API:\");\r\n-    console.log(\"🔹 editingProduct:\", editingProduct);\r\n-    console.log(\"🔹 formData trước khi tạo FormData:\", formData);\r\n-  \r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => {\r\n-          if (img instanceof File) {\r\n-            formDataWithImage.append(\"image\", img); // Chỉ thêm ảnh mới\r\n-          } else {\r\n-            formDataWithImage.append(\"existingImages\", img); // Giữ ảnh cũ\r\n-          }\r\n-        });\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-  \r\n-    console.log(\"🔹 formDataWithImage gửi đi:\");\r\n-    for (let [key, value] of formDataWithImage.entries()) {\r\n-      console.log(`${key}:`, value);\r\n-    }\r\n-  \r\n-    try {\r\n-      if (editingProduct) {\r\n-        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        console.log(\"➕ Thêm sản phẩm mới\");\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-  \r\n-  \r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-\r\n-    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n-  \r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-    console.log(files)\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image ? [...prev.image, ...files] : [...files],\r\n-    }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-  \r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-    console.log(product)\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-    console.log(filteredImages  )\r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n-import { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\n-import ProductFormSidebar from \"../ProductFormSidebar\";\r\n-import LoadingScreen from \"../LoadingScreen\";\r\n-\r\n-const AdminProducts = () => {\r\n-  const [minPrice, setMinPrice] = useState('');\r\n-  const [maxPrice, setMaxPrice] = useState('');\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",                          // String\r\n-    name: \"\",                          // String\r\n-    brand: \"\",                         // ObjectId (String)\r\n-    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-    price: 0,                          // Number\r\n-    quantity: 0,                       // Number\r\n-    description: \"\",                    // String\r\n-    image: [],                          // Mảng String (URLs ảnh)\r\n-    additionalInfo: {\r\n-      weight: 0,                        // Number\r\n-      length: 0,                        // Number\r\n-      width: 0,                         // Number\r\n-      height: 0,                        // Number\r\n-    },\r\n-  });\r\n-  const [loading, setLoading] = useState(false); // State loading\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState([]);\r\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n-\r\n-  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n-  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-\r\n-      setProducts(productRes.data);\r\n-      console.log(productRes.data)\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {}));\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-  \r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-  \r\n-    console.log(\"🚀 Trước khi gửi API:\");\r\n-    console.log(\"🔹 editingProduct:\", editingProduct);\r\n-    console.log(\"🔹 formData trước khi tạo FormData:\", formData);\r\n-  \r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"image\" && formData.image?.length > 0) {\r\n-        formData.image.forEach((img) => {\r\n-          if (img instanceof File) {\r\n-            formDataWithImage.append(\"image\", img); // Chỉ thêm ảnh mới\r\n-          } else {\r\n-            formDataWithImage.append(\"existingImages\", img); // Giữ ảnh cũ\r\n-          }\r\n-        });\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n-  \r\n-    console.log(\"🔹 formDataWithImage gửi đi:\");\r\n-    for (let [key, value] of formDataWithImage.entries()) {\r\n-      console.log(`${key}:`, value);\r\n-    }\r\n-  \r\n-    try {\r\n-      if (editingProduct) {\r\n-        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        console.log(\"➕ Thêm sản phẩm mới\");\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-  \r\n-  \r\n-\r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-    try {\r\n-      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter(product => product._id !== id));\r\n-      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleImageChange = (e) => {\r\n-    const files = Array.from(e.target.files);\r\n-\r\n-    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n-  \r\n-    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n-    console.log(files)\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image ? [...prev.image, ...files] : [...files],\r\n-    }));\r\n-    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n-  };\r\n-  \r\n-\r\n-  const handleEdit = (product) => {\r\n-    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n-    console.log(product)\r\n-    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-  \r\n-    // Nếu ảnh là default thì loại bỏ\r\n-    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n-    console.log(filteredImages)\r\n-    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n-    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n-      setImagePreview([defaultImageUrl]);\r\n-    } else {\r\n-      setImagePreview(filteredImages);\r\n-    }\r\n-  \r\n-    setFormData({\r\n-      code: product.code || \"\",\r\n-      name: product.name || \"\",\r\n-      brand: product.brand?._id || \"\",\r\n-      categories: product.categories?.map((cat) => cat._id) || [],\r\n-      price: product.price || 0,\r\n-      quantity: product.quantity || 0,\r\n-      description: product.description || \"\",\r\n-      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n-      additionalInfo: {\r\n-        weight: product.additionalInfo?.weight || 0,\r\n-        length: product.additionalInfo?.length || 0,\r\n-        width: product.additionalInfo?.width || 0,\r\n-        height: product.additionalInfo?.height || 0,\r\n-      },\r\n-    });\r\n-    \r\n-    setIsSidebarOpen(true);\r\n-    setEditingProduct(product);\r\n-  };\r\n-  \r\n-\r\n-  const formatPrice = (price) => {\r\n-    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n-  };\r\n-  const handlePriceChange = (e) => {\r\n-    const value = e.target.value.replace(/\\D/g, \"\");\r\n-    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n-  };\r\n-  const handleRemoveImage = (index) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      image: prev.image.filter((_, i) => i !== index),\r\n-    }));\r\n-    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n-  };\r\n-  const handleClear = () => {\r\n-    setFormData({\r\n-      code: \"\",                          // String\r\n-      name: \"\",                          // String\r\n-      brand: \"\",                         // ObjectId (String)\r\n-      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n-      price: 0,                          // Number\r\n-      quantity: 0,                       // Number\r\n-      description: \"\",                    // String\r\n-      image: [],                          // Mảng String (URLs ảnh)\r\n-      additionalInfo: {\r\n-        weight: 0,                        // Number\r\n-        length: 0,                        // Number\r\n-        width: 0,                         // Number\r\n-        height: 0,                        // Number\r\n-      }\r\n-    });\r\n-    setEditingProduct(null);\r\n-    setImagePreview([]);\r\n-  };\r\n-  const handleAdditionalInfoChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      additionalInfo: {\r\n-        ...prev.additionalInfo,\r\n-        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n-      }\r\n-    }));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={`grid`}>\r\n-      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n-        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n-        <div className=\"flex justify-between mb-4\">\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Tìm kiếm sản phẩm...\"\r\n-            className=\"border p-2 rounded w-1/3\"\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-          />\r\n-          <select\r\n-            className=\"border p-2 rounded\"\r\n-            onChange={(e) => setFilterBrand(e.target.value)}\r\n-          >\r\n-            <option value=\"\">Tất cả thương hiệu</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối thiểu\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMinPrice(e.target.value)}\r\n-          />\r\n-          <input\r\n-            type=\"number\"\r\n-            placeholder=\"Giá tối đa\"\r\n-            className=\"border p-2 rounded w-1/6\"\r\n-            onChange={(e) => setMaxPrice(e.target.value)}\r\n-          />\r\n-          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n-            Thêm sản phẩm\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-          <table className=\"w-full border-collapse border border-gray-300\">\r\n-            <thead className=\"bg-gray-200 sticky top-0\">\r\n-              <tr>\r\n-                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n-                <th className=\"border p-2\">Mã sản phẩm</th>\r\n-                <th className=\"border p-2\">Tên sản phẩm</th>\r\n-                <th className=\"border p-2\">Giá</th>\r\n-                <th className=\"border p-2\">Trạng thái</th>\r\n-                <th className=\"border p-2\">Hãng</th>\r\n-                <th className=\"border p-2\">Kho hàng</th>\r\n-                <th className=\"border p-2\">Danh mục</th>\r\n-                <th className=\"border p-2\">Thông tin thêm</th>\r\n-                <th className=\"border p-2 w-40\">Mô tả</th>\r\n-                <th className=\"border p-2\">Hành động</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {products\r\n-                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n-                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n-                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n-                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n-                .map((product) => (\r\n-                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n-                    <td className=\"border p-2\">\r\n-                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                        {product.image.map((img, index) => (\r\n-                          <img key={index} src={img|| \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"} alt={product.name} className=\"object-cover\" />\r\n-                        ))}\r\n-                      </div>\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.code}</td>\r\n-                    <td className=\"border p-2\">{product.name}</td>\r\n-                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.quantity > 0 ? (\r\n-                        <span className=\"text-green-500\">Còn hàng</span>\r\n-                      ) : (\r\n-                        <span className=\"text-red-500\">Hết hàng</span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n-                    <td className=\"border p-2\">{product.quantity}</td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n-                    </td>\r\n-                    <td className=\"border p-2\">\r\n-                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n-                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n-                      ) : (\r\n-                        \"Không có thông tin thêm\"\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n-                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n-                        <button\r\n-                          onClick={() => handleEdit(product)}\r\n-                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Sửa\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleDelete(product._id)}\r\n-                          className=\"text-red-500 px-3 py-1 rounded\"\r\n-                        >\r\n-                          Xóa\r\n-                        </button>\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-        \r\n-      </div>\r\n-\r\n-      <ProductFormSidebar\r\n-        isOpen={isSidebarOpen}\r\n-        onClose={handleCloseSidebar}\r\n-        formData={formData}\r\n-        setFormData={setFormData}\r\n-        handleSubmit={handleSubmit}\r\n-        handleClear={handleClear}\r\n-        handlePriceChange={handlePriceChange}\r\n-        renderCategories={renderCategories}\r\n-        categories={categories}\r\n-        handleCategoryChange={handleCategoryChange}\r\n-        brands={brands}\r\n-        imagePreview={imagePreview}\r\n-        handleImageChange={handleImageChange}\r\n-        handleRemoveImage={handleRemoveImage}\r\n-        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n-        editingProduct={editingProduct}\r\n-      />\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-      <LoadingScreen loading={loading} />\r\n-\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n"
                },
                {
                    "date": 1741679818363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,5 +405,20 @@\n         handleSubmit={handleSubmit}\r\n         handleClear={handleClear}\r\n         handlePriceChange={handlePriceChange}\r\n         renderCategories={renderCategories}\r\n-        categories={cate\n\\ No newline at end of file\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1741679826555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,424 @@\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import {\r\n+  renderCategories,\r\n+  handleCategoryChange,\r\n+} from \"../../services/categoryService\";\r\n+import ProductFormSidebar from \"../ProductFormSidebar\";\r\n+import LoadingScreen from \"../LoadingScreen\";\r\n+\r\n+const AdminProducts = () => {\r\n+  const [minPrice, setMinPrice] = useState(\"\");\r\n+  const [maxPrice, setMaxPrice] = useState(\"\");\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\", // String\r\n+    name: \"\", // String\r\n+    brand: \"\", // ObjectId (String)\r\n+    categories: [], // Mảng chứa ObjectId (Array of Strings)\r\n+    price: 0, // Number\r\n+    quantity: 0, // Number\r\n+    description: \"\", // String\r\n+    image: [], // Mảng String (URLs ảnh)\r\n+    additionalInfo: {\r\n+      weight: 0, // Number\r\n+      length: 0, // Number\r\n+      width: 0, // Number\r\n+      height: 0, // Number\r\n+    },\r\n+  });\r\n+  const [loading, setLoading] = useState(false); // State loading\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState([]);\r\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n+\r\n+  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n+  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+\r\n+      setProducts(productRes.data);\r\n+      console.log(productRes.data);\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      setBrandMap(\r\n+        brandRes.data.reduce((acc, brand) => {\r\n+          acc[brand._id] = brand.name;\r\n+          return acc;\r\n+        }, {})\r\n+      );\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+\r\n+    console.log(\"🚀 Trước khi gửi API:\");\r\n+    console.log(\"🔹 editingProduct:\", editingProduct);\r\n+    console.log(\"🔹 formData trước khi tạo FormData:\", formData);\r\n+\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"image\" && formData.image?.length > 0) {\r\n+        formData.image.forEach((img) => {\r\n+          if (img instanceof File) {\r\n+            formDataWithImage.append(\"image\", img); // Chỉ thêm ảnh mới\r\n+          } else {\r\n+            formDataWithImage.append(\"existingImages\", img); // Giữ ảnh cũ\r\n+          }\r\n+        });\r\n+      } else if (typeof formData[key] === \"object\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key]))\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n+\r\n+    console.log(\"🔹 formDataWithImage gửi đi:\");\r\n+    for (let [key, value] of formDataWithImage.entries()) {\r\n+      console.log(`${key}:`, value);\r\n+    }\r\n+\r\n+    try {\r\n+      if (editingProduct) {\r\n+        console.log(\"🛠 Cập nhật sản phẩm với ID:\", editingProduct._id);\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        console.log(\"➕ Thêm sản phẩm mới\");\r\n+        await axios.post(\r\n+          \"http://localhost:5000/api/products\",\r\n+          formDataWithImage,\r\n+          {\r\n+            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+          }\r\n+        );\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\r\n+        \"❌ Lỗi khi gửi dữ liệu\",\r\n+        error.response?.data || error.message\r\n+      );\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+    try {\r\n+      const response = await axios.delete(\r\n+        `http://localhost:5000/api/products/${id}`\r\n+      );\r\n+      setProducts(products.filter((product) => product._id !== id));\r\n+      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\r\n+        \"Lỗi khi xóa sản phẩm\",\r\n+        error.response?.data || error.message\r\n+      );\r\n+      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleImageChange = (e) => {\r\n+    const files = Array.from(e.target.files);\r\n+\r\n+    if (files.length === 0) return; // Không làm gì nếu không có ảnh mới\r\n+\r\n+    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n+    console.log(files);\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image ? [...prev.image, ...files] : [...files],\r\n+    }));\r\n+    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n+    console.log(product);\r\n+    const defaultImageUrl =\r\n+      \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n+    // Nếu ảnh là default thì loại bỏ\r\n+    const filteredImages =\r\n+      product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n+    console.log(filteredImages);\r\n+    // Kiểm tra nếu không có ảnh mới, giữ ảnh cũ\r\n+    if (filteredImages.length === 0 && imagePreview.length === 0) {\r\n+      setImagePreview([defaultImageUrl]);\r\n+    } else {\r\n+      setImagePreview(filteredImages);\r\n+    }\r\n+\r\n+    setFormData({\r\n+      code: product.code || \"\",\r\n+      name: product.name || \"\",\r\n+      brand: product.brand?._id || \"\",\r\n+      categories: product.categories?.map((cat) => cat._id) || [],\r\n+      price: product.price || 0,\r\n+      quantity: product.quantity || 0,\r\n+      description: product.description || \"\",\r\n+      image: filteredImages.length ? filteredImages : [defaultImageUrl], // Giữ ảnh cũ nếu không có thay đổi\r\n+      additionalInfo: {\r\n+        weight: product.additionalInfo?.weight || 0,\r\n+        length: product.additionalInfo?.length || 0,\r\n+        width: product.additionalInfo?.width || 0,\r\n+        height: product.additionalInfo?.height || 0,\r\n+      },\r\n+    });\r\n+\r\n+    setIsSidebarOpen(true);\r\n+    setEditingProduct(product);\r\n+  };\r\n+\r\n+  const formatPrice = (price) => {\r\n+    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n+  };\r\n+  const handlePriceChange = (e) => {\r\n+    const value = e.target.value.replace(/\\D/g, \"\");\r\n+    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n+  };\r\n+  const handleRemoveImage = (index) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      image: prev.image.filter((_, i) => i !== index),\r\n+    }));\r\n+    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n+  };\r\n+  const handleClear = () => {\r\n+    setFormData({\r\n+      code: \"\", // String\r\n+      name: \"\", // String\r\n+      brand: \"\", // ObjectId (String)\r\n+      categories: [], // Mảng chứa ObjectId (Array of Strings)\r\n+      price: 0, // Number\r\n+      quantity: 0, // Number\r\n+      description: \"\", // String\r\n+      image: [], // Mảng String (URLs ảnh)\r\n+      additionalInfo: {\r\n+        weight: 0, // Number\r\n+        length: 0, // Number\r\n+        width: 0, // Number\r\n+        height: 0, // Number\r\n+      },\r\n+    });\r\n+    setEditingProduct(null);\r\n+    setImagePreview([]);\r\n+  };\r\n+  const handleAdditionalInfoChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      additionalInfo: {\r\n+        ...prev.additionalInfo,\r\n+        [field]: Number(value) || 0, // Đảm bảo luôn là số, tránh lỗi undefined\r\n+      },\r\n+    }));\r\n+  };\r\n+  const handleCreate = () => {\r\n+    handleClear();\r\n+    handleOpenSidebar();\r\n+  };\r\n+\r\n+  return (\r\n+    <div className={`grid`}>\r\n+      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n+        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n+        <div className=\"flex justify-between mb-4\">\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Tìm kiếm sản phẩm...\"\r\n+            className=\"border p-2 rounded w-1/3\"\r\n+            onChange={(e) => setSearchTerm(e.target.value)}\r\n+          />\r\n+          <select\r\n+            className=\"border p-2 rounded\"\r\n+            onChange={(e) => setFilterBrand(e.target.value)}\r\n+          >\r\n+            <option value=\"\">Tất cả thương hiệu</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>\r\n+                {brand.name}\r\n+              </option>\r\n+            ))}\r\n+          </select>\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối thiểu\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMinPrice(e.target.value)}\r\n+          />\r\n+          <input\r\n+            type=\"number\"\r\n+            placeholder=\"Giá tối đa\"\r\n+            className=\"border p-2 rounded w-1/6\"\r\n+            onChange={(e) => setMaxPrice(e.target.value)}\r\n+          />\r\n+          <button\r\n+            onClick={handleCreate}\r\n+            className=\"bg-green-500 text-white px-4 py-2 rounded\"\r\n+          >\r\n+            Thêm sản phẩm\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+          <table className=\"w-full border-collapse border border-gray-300\">\r\n+            <thead className=\"bg-gray-200 sticky top-0\">\r\n+              <tr>\r\n+                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n+                <th className=\"border p-2\">Mã sản phẩm</th>\r\n+                <th className=\"border p-2\">Tên sản phẩm</th>\r\n+                <th className=\"border p-2\">Giá</th>\r\n+                <th className=\"border p-2\">Trạng thái</th>\r\n+                <th className=\"border p-2\">Hãng</th>\r\n+                <th className=\"border p-2\">Kho hàng</th>\r\n+                <th className=\"border p-2\">Danh mục</th>\r\n+                <th className=\"border p-2\">Thông tin thêm</th>\r\n+                <th className=\"border p-2 w-40\">Mô tả</th>\r\n+                <th className=\"border p-2\">Hành động</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {products\r\n+                .filter((product) =>\r\n+                  product.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n+                )\r\n+                .filter(\r\n+                  (product) => !filterBrand || product.brand === filterBrand\r\n+                )\r\n+                .filter((product) =>\r\n+                  minPrice ? product.price >= minPrice : true\r\n+                )\r\n+                .filter((product) =>\r\n+                  maxPrice ? product.price <= maxPrice : true\r\n+                )\r\n+                .map((product) => (\r\n+                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n+                    <td className=\"border p-2\">\r\n+                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                        {product.image.map((img, index) => (\r\n+                          <img\r\n+                            key={index}\r\n+                            src={\r\n+                              img ||\r\n+                              \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\"\r\n+                            }\r\n+                            alt={product.name}\r\n+                            className=\"object-cover\"\r\n+                          />\r\n+                        ))}\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.code}</td>\r\n+                    <td className=\"border p-2\">{product.name}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {formatPrice(product.price)} VNĐ\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.quantity > 0 ? (\r\n+                        <span className=\"text-green-500\">Còn hàng</span>\r\n+                      ) : (\r\n+                        <span className=\"text-red-500\">Hết hàng</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.brand ? product.brand.name : \"Không có hãng\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">{product.quantity}</td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.categories.length > 0\r\n+                        ? product.categories.map((cat) => cat.name).join(\", \")\r\n+                        : \"Không có danh mục\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2\">\r\n+                      {product.additionalInfo &&\r\n+                      typeof product.additionalInfo === \"object\"\r\n+                        ? `Trọng lượng: ${\r\n+                            product.additionalInfo.weight || 0\r\n+                          }kg, Kích thước: ${\r\n+                            product.additionalInfo.length || 0\r\n+                          }x${product.additionalInfo.width || 0}x${\r\n+                            product.additionalInfo.height || 0\r\n+                          } cm`\r\n+                        : \"Không có thông tin thêm\"}\r\n+                    </td>\r\n+                    <td className=\"border p-2 whitespace-pre-line\">\r\n+                      {product.description}\r\n+                    </td>\r\n+                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n+                      <button\r\n+                        onClick={() => handleEdit(product)}\r\n+                        className=\"text-sky-500 px-3 py-1 rounded\"\r\n+                      >\r\n+                        Sửa\r\n+                      </button>\r\n+                      <button\r\n+                        onClick={() => handleDelete(product._id)}\r\n+                        className=\"text-red-500 px-3 py-1 rounded\"\r\n+                      >\r\n+                        Xóa\r\n+                      </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <ProductFormSidebar\r\n+        isOpen={isSidebarOpen}\r\n+        onClose={handleCloseSidebar}\r\n+        formData={formData}\r\n+        setFormData={setFormData}\r\n+        handleSubmit={handleSubmit}\r\n+        handleClear={handleClear}\r\n+        handlePriceChange={handlePriceChange}\r\n+        renderCategories={renderCategories}\r\n+        categories={categories}\r\n+        handleCategoryChange={handleCategoryChange}\r\n+        brands={brands}\r\n+        imagePreview={imagePreview}\r\n+        handleImageChange={handleImageChange}\r\n+        handleRemoveImage={handleRemoveImage}\r\n+        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n+        editingProduct={editingProduct}\r\n+      />\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+      <LoadingScreen loading={loading} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                }
            ],
            "date": 1741337544329,
            "name": "Commit-0",
            "content": "import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { renderCategories, handleCategoryChange } from \"../../services/categoryService\";\r\nimport ProductFormSidebar from \"../ProductFormSidebar\";\r\n\r\nconst AdminProducts = () => {\r\n  const [minPrice, setMinPrice] = useState('');\r\n  const [maxPrice, setMaxPrice] = useState('');\r\n  const [products, setProducts] = useState([]);\r\n  const [brands, setBrands] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [brandMap, setBrandMap] = useState({});\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [filterBrand, setFilterBrand] = useState(\"\");\r\n  const [formData, setFormData] = useState({\r\n    code: \"\",                          // String\r\n    name: \"\",                          // String\r\n    brand: \"\",                         // ObjectId (String)\r\n    categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n    price: 0,                          // Number\r\n    quantity: 0,                       // Number\r\n    description: \"\",                    // String\r\n    image: [],                          // Mảng String (URLs ảnh)\r\n    additionalInfo: {\r\n      weight: 0,                        // Number\r\n      length: 0,                        // Number\r\n      width: 0,                         // Number\r\n      height: 0,                        // Number\r\n    },\r\n  });\r\n  const [editingProduct, setEditingProduct] = useState(null);\r\n  const [imagePreview, setImagePreview] = useState([]);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n  const handleOpenSidebar = () => setIsSidebarOpen(true);\r\n  const handleCloseSidebar = () => setIsSidebarOpen(false);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n        axios.get(\"http://localhost:5000/api/products\"),\r\n        axios.get(\"http://localhost:5000/api/brands\"),\r\n        axios.get(\"http://localhost:5000/api/categories\"),\r\n      ]);\r\n\r\n      setProducts(productRes.data);\r\n      setBrands(brandRes.data || []);\r\n      setCategories(categoryRes.data || []);\r\n\r\n      setBrandMap(brandRes.data.reduce((acc, brand) => {\r\n        acc[brand._id] = brand.name;\r\n        return acc;\r\n      }, {}));\r\n    } catch (error) {\r\n      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n    fetchData();\r\n  }, []);\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const formDataWithImage = new FormData();\r\n    console.log(formData);\r\n\r\n    Object.keys(formData).forEach((key) => {\r\n      if (key === \"image\" && formData.image && formData.image.length > 0) {\r\n        formData.image.forEach((img) => {\r\n          formDataWithImage.append(\"image\", img); // Không JSON.stringify ảnh\r\n        });\r\n      } else if (key === \"categories\" || key === \"additionalInfo\") {\r\n        formDataWithImage.append(key, JSON.stringify(formData[key] || []));\r\n      } else {\r\n        formDataWithImage.append(key, formData[key]);\r\n      }\r\n    });\r\n\r\n    try {\r\n      if (editingProduct) {\r\n        await axios.put(\r\n          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n          formDataWithImage,\r\n          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n        );\r\n\r\n        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n      } else {\r\n        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        });\r\n\r\n        toast.success(\"Thêm sản phẩm thành công!\");\r\n      }\r\n\r\n      fetchData();\r\n    } catch (error) {\r\n      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n    }\r\n  };\r\n  const handleDelete = async (id) => {\r\n    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n\r\n    try {\r\n      const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n      setProducts(products.filter(product => product._id !== id));\r\n      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n    } catch (error) {\r\n      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n      toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n    }\r\n  };\r\n\r\n  const handleImageChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n\r\n    setFormData((prev) => ({ ...prev, image: [...prev.image, ...files] }));\r\n    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n  };\r\n\r\n  const handleEdit = (product) => {\r\n    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n\r\n    const defaultImageUrl = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n\r\n    // Nếu ảnh là default thì loại bỏ\r\n    const filteredImages = product.image?.filter((img) => img !== defaultImageUrl) || [];\r\n\r\n    setFormData({\r\n      code: product.code || \"\",\r\n      name: product.name || \"\",\r\n      brand: product.brand?._id || \"\",\r\n      categories: product.categories?.map((cat) => cat._id) || [],\r\n      price: product.price || 0,\r\n      quantity: product.quantity || 0,\r\n      description: product.description || \"\",\r\n      image: filteredImages, // Cập nhật ảnh đã lọc\r\n      additionalInfo: {\r\n        weight: product.additionalInfo?.weight || 0,\r\n        length: product.additionalInfo?.length || 0,\r\n        width: product.additionalInfo?.width || 0,\r\n        height: product.additionalInfo?.height || 0,\r\n      },\r\n    });\r\n    setIsSidebarOpen(true);\r\n    setEditingProduct(product);\r\n    setImagePreview(filteredImages);\r\n  };\r\n  const formatPrice = (price) => {\r\n    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n  };\r\n  const handlePriceChange = (e) => {\r\n    const value = e.target.value.replace(/\\D/g, \"\");\r\n    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n  };\r\n  const handleRemoveImage = (index) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      image: prev.image.filter((_, i) => i !== index),\r\n    }));\r\n    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n  };\r\n  const handleClear = () => {\r\n    setFormData({\r\n      code: \"\",                          // String\r\n      name: \"\",                          // String\r\n      brand: \"\",                         // ObjectId (String)\r\n      categories: [],                     // Mảng chứa ObjectId (Array of Strings)\r\n      price: 0,                          // Number\r\n      quantity: 0,                       // Number\r\n      description: \"\",                    // String\r\n      image: [],                          // Mảng String (URLs ảnh)\r\n      additionalInfo: {\r\n        weight: 0,                        // Number\r\n        length: 0,                        // Number\r\n        width: 0,                         // Number\r\n        height: 0,                        // Number\r\n      }\r\n    });\r\n    setEditingProduct(null);\r\n    setImagePreview([]);\r\n  };\r\n  const handleAdditionalInfoChange = (field, value) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      additionalInfo: {\r\n        ...prev.additionalInfo,\r\n        [field]: Number(value) || 0,  // Đảm bảo luôn là số, tránh lỗi undefined\r\n      }\r\n    }));\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={`grid`}>\r\n      <div className=\"container p-6 overscroll-contain col-span-3 \">\r\n        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n        <div className=\"flex justify-between mb-4\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Tìm kiếm sản phẩm...\"\r\n            className=\"border p-2 rounded w-1/3\"\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n          <select\r\n            className=\"border p-2 rounded\"\r\n            onChange={(e) => setFilterBrand(e.target.value)}\r\n          >\r\n            <option value=\"\">Tất cả thương hiệu</option>\r\n            {brands.map((brand) => (\r\n              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n            ))}\r\n          </select>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Giá tối thiểu\"\r\n            className=\"border p-2 rounded w-1/6\"\r\n            onChange={(e) => setMinPrice(e.target.value)}\r\n          />\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Giá tối đa\"\r\n            className=\"border p-2 rounded w-1/6\"\r\n            onChange={(e) => setMaxPrice(e.target.value)}\r\n          />\r\n          <button onClick={handleOpenSidebar} className=\"bg-green-500 text-white px-4 py-2 rounded\">\r\n            Thêm sản phẩm\r\n          </button>\r\n        </div>\r\n        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n          <table className=\"w-full border-collapse border border-gray-300\">\r\n            <thead className=\"bg-gray-200 sticky top-0\">\r\n              <tr>\r\n                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n                <th className=\"border p-2\">Mã sản phẩm</th>\r\n                <th className=\"border p-2\">Tên sản phẩm</th>\r\n                <th className=\"border p-2\">Giá</th>\r\n                <th className=\"border p-2\">Trạng thái</th>\r\n                <th className=\"border p-2\">Hãng</th>\r\n                <th className=\"border p-2\">Kho hàng</th>\r\n                <th className=\"border p-2\">Danh mục</th>\r\n                <th className=\"border p-2\">Thông tin thêm</th>\r\n                <th className=\"border p-2 w-40\">Mô tả</th>\r\n                <th className=\"border p-2\">Hành động</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {products\r\n                .filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n                .filter((product) => !filterBrand || product.brand === filterBrand)\r\n                .filter((product) => (minPrice ? product.price >= minPrice : true))\r\n                .filter((product) => (maxPrice ? product.price <= maxPrice : true))\r\n                .map((product) => (\r\n                  <tr key={product._id} className=\"hover:bg-gray-100\">\r\n                    <td className=\"border p-2\">\r\n                      <div className=\"flex space-x-2 overflow-x-auto\">\r\n                        {product.image.map((img, index) => (\r\n                          <img key={index} src={img} alt={product.name} className=\"object-cover\" />\r\n                        ))}\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"border p-2\">{product.code}</td>\r\n                    <td className=\"border p-2\">{product.name}</td>\r\n                    <td className=\"border p-2\">{formatPrice(product.price)} VNĐ</td>\r\n                    <td className=\"border p-2\">\r\n                      {product.quantity > 0 ? (\r\n                        <span className=\"text-green-500\">Còn hàng</span>\r\n                      ) : (\r\n                        <span className=\"text-red-500\">Hết hàng</span>\r\n                      )}\r\n                    </td>\r\n                    <td className=\"border p-2\">{product.brand ? product.brand.name : \"Không có hãng\"}</td>\r\n                    <td className=\"border p-2\">{product.quantity}</td>\r\n                    <td className=\"border p-2\">\r\n                      {product.categories.length > 0 ? product.categories.map((cat) => cat.name).join(\", \") : \"Không có danh mục\"}\r\n                    </td>\r\n                    <td className=\"border p-2\">\r\n                      {product.additionalInfo && typeof product.additionalInfo === 'object' ? (\r\n                        `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n                      ) : (\r\n                        \"Không có thông tin thêm\"\r\n                      )}\r\n                    </td>\r\n                    <td className=\"border p-2 whitespace-pre-line\">{product.description}</td>\r\n                    <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n                        <button\r\n                          onClick={() => handleEdit(product)}\r\n                          className=\"text-sky-500 px-3 py-1 rounded\"\r\n                        >\r\n                          Sửa\r\n                        </button>\r\n                        <button\r\n                          onClick={() => handleDelete(product._id)}\r\n                          className=\"text-red-500 px-3 py-1 rounded\"\r\n                        >\r\n                          Xóa\r\n                        </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <ProductFormSidebar\r\n        isOpen={isSidebarOpen}\r\n        onClose={handleCloseSidebar}\r\n        formData={formData}\r\n        setFormData={setFormData}\r\n        handleSubmit={handleSubmit}\r\n        handleClear={handleClear}\r\n        handlePriceChange={handlePriceChange}\r\n        renderCategories={renderCategories}\r\n        categories={categories}\r\n        handleCategoryChange={handleCategoryChange}\r\n        brands={brands}\r\n        imagePreview={imagePreview}\r\n        handleImageChange={handleImageChange}\r\n        handleRemoveImage={handleRemoveImage}\r\n        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n        editingProduct={editingProduct}\r\n      />\r\n      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminProducts;\r\n"
        }
    ]
}