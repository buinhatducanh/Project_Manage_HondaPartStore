{
    "sourceFile": "frontend/components/admin/AdminProducts.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1751901969556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751901981889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import LoadingScreen from \"../LoadingScreen\";\r\n \r\n const API_URL = \"http://localhost:5000/api\";\r\n const DEFAULT_IMAGE_URL =\r\n-  \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\";\r\n+  \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739447969/bugi-ngk-honda2_fscvad.jpg\";\r\n \r\n const AdminProducts = () => {\r\n   const [minPrice, setMinPrice] = useState(\"\");\r\n   const [maxPrice, setMaxPrice] = useState(\"\");\r\n"
                },
                {
                    "date": 1751902011839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import LoadingScreen from \"../LoadingScreen\";\r\n \r\n const API_URL = \"http://localhost:5000/api\";\r\n const DEFAULT_IMAGE_URL =\r\n-  \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739447969/bugi-ngk-honda2_fscvad.jpg\";\r\n+  \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n \r\n const AdminProducts = () => {\r\n   const [minPrice, setMinPrice] = useState(\"\");\r\n   const [maxPrice, setMaxPrice] = useState(\"\");\r\n"
                }
            ],
            "date": 1751901969556,
            "name": "Commit-0",
            "content": "import axios from \"axios\";\r\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport {\r\n  renderCategories,\r\n  handleCategoryChange,\r\n} from \"../../services/categoryService\";\r\nimport ProductFormSidebar from \"../ProductFormSidebar\";\r\nimport LoadingScreen from \"../LoadingScreen\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\nconst DEFAULT_IMAGE_URL =\r\n  \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1741570849/empty_dhtk5e.jpg\";\r\n\r\nconst AdminProducts = () => {\r\n  const [minPrice, setMinPrice] = useState(\"\");\r\n  const [maxPrice, setMaxPrice] = useState(\"\");\r\n  const [products, setProducts] = useState([]);\r\n  const [brands, setBrands] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [filterBrand, setFilterBrand] = useState(\"\");\r\n  const [formData, setFormData] = useState({\r\n    code: \"\",\r\n    name: \"\",\r\n    brand: \"\",\r\n    categories: [],\r\n    price: 0,\r\n    quantity: 0,\r\n    description: \"\",\r\n    // Lưu ảnh ở đây có thể là mảng File (ảnh mới) hoặc đối tượng đã lưu với {url, public_id}\r\n    image: [],\r\n    additionalInfo: {\r\n      weight: 0,\r\n      length: 0,\r\n      width: 0,\r\n      height: 0,\r\n    },\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [editingProduct, setEditingProduct] = useState(null);\r\n  const [imagePreview, setImagePreview] = useState([]);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n  // Dùng useMemo để tính brandMap chỉ khi brands thay đổi (nếu cần sử dụng)\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const brandMap = useMemo(() => {\r\n    return brands.reduce((acc, brand) => {\r\n      acc[brand._id] = brand.name;\r\n      return acc;\r\n    }, {});\r\n  }, [brands]);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n        axios.get(`${API_URL}/products`),\r\n        axios.get(`${API_URL}/brands`),\r\n        axios.get(`${API_URL}/categories`),\r\n      ]);\r\n\r\n      setProducts(productRes.data);\r\n      setBrands(brandRes.data || []);\r\n      setCategories(categoryRes.data || []);\r\n    } catch (error) {\r\n      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  // Xử lý lọc sản phẩm với useMemo để giảm tính toán lại\r\n  const filteredProducts = useMemo(() => {\r\n    return products.filter((product) => {\r\n      const matchSearch = product.name\r\n        .toLowerCase()\r\n        .includes(searchTerm.toLowerCase());\r\n      // Lưu ý: nếu product.brand là đối tượng, ta có thể so sánh _id\r\n      const matchBrand = filterBrand\r\n        ? product.brand && product.brand._id === filterBrand\r\n        : true;\r\n      const matchMinPrice = minPrice ? product.price >= Number(minPrice) : true;\r\n      const matchMaxPrice = maxPrice ? product.price <= Number(maxPrice) : true;\r\n      return matchSearch && matchBrand && matchMinPrice && matchMaxPrice;\r\n    });\r\n  }, [products, searchTerm, filterBrand, minPrice, maxPrice]);\r\n\r\n  const handleOpenSidebar = useCallback(() => setIsSidebarOpen(true), []);\r\n  const handleCloseSidebar = useCallback(() => setIsSidebarOpen(false), []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    // Nếu không có hãng, tìm hãng Honda trong danh sách brands\r\n    const defaultBrandId =\r\n      brands.find((b) => b.name.toLowerCase() === \"honda\")?._id || \"\";\r\n    const brandToSubmit = formData.brand || defaultBrandId;\r\n\r\n    // Tạo một bản sao của formData với giá trị brand cập nhật\r\n    const dataToSubmit = { ...formData, brand: brandToSubmit };\r\n\r\n    // Tạo FormData, xử lý ảnh mới và giữ ảnh cũ\r\n    const formDataWithImage = new FormData();\r\n    Object.keys(dataToSubmit).forEach((key) => {\r\n      if (key === \"image\" && dataToSubmit.image?.length > 0) {\r\n        dataToSubmit.image.forEach((img) => {\r\n          if (img instanceof File) {\r\n            formDataWithImage.append(\"image\", img);\r\n          } else {\r\n            // Đối với ảnh đã lưu (đối tượng có url, public_id), ta gửi dưới dạng JSON\r\n            formDataWithImage.append(\"existingImages\", JSON.stringify(img));\r\n          }\r\n        });\r\n      } else if (typeof dataToSubmit[key] === \"object\") {\r\n        formDataWithImage.append(key, JSON.stringify(dataToSubmit[key]));\r\n      } else {\r\n        formDataWithImage.append(key, dataToSubmit[key]);\r\n      }\r\n    });\r\n\r\n    try {\r\n      if (editingProduct) {\r\n        await axios.put(\r\n          `${API_URL}/products/${editingProduct._id}`,\r\n          formDataWithImage,\r\n          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n        );\r\n        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n      } else {\r\n        await axios.post(`${API_URL}/products`, formDataWithImage, {\r\n          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        });\r\n        toast.success(\"Thêm sản phẩm thành công!\");\r\n      }\r\n      fetchData();\r\n    } catch (error) {\r\n      console.error(\"❌ Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n    try {\r\n      const response = await axios.delete(`${API_URL}/products/${id}`);\r\n      setProducts((prev) => prev.filter((product) => product._id !== id));\r\n      toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n    } catch (error) {\r\n      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n      toast.error(\r\n        error.response?.data.message || \"Không thể xóa sản phẩm!\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleImageChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    if (!files.length) return;\r\n    // Tạo preview từ File object\r\n    const imageUrls = files.map((file) => URL.createObjectURL(file));\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      // Thêm các File mới vào mảng image\r\n      image: prev.image ? [...prev.image, ...files] : [...files],\r\n    }));\r\n    setImagePreview((prev) => [...prev, ...imageUrls]);\r\n  };\r\n\r\n  const handleEdit = (product) => {\r\n    toast.success(\"Sửa sản phẩm: \" + product.name);\r\n    // Lấy ra danh sách URL từ đối tượng ảnh (nếu có)\r\n    const filteredImages =\r\n      product.image && product.image.length > 0\r\n        ? product.image.filter((img) => img.url !== DEFAULT_IMAGE_URL)\r\n        : [];\r\n    const previewUrls =\r\n      filteredImages.length > 0\r\n        ? filteredImages.map((img) => img.url)\r\n        : [DEFAULT_IMAGE_URL];\r\n\r\n    setImagePreview(previewUrls);\r\n\r\n    setFormData({\r\n      code: product.code || \"\",\r\n      name: product.name || \"\",\r\n      // Nếu brand là object thì lấy _id, nếu không thì dùng trực tiếp\r\n      brand: product.brand ? (product.brand._id || product.brand) : \"\",\r\n      categories: product.categories?.map((cat) => cat._id) || [],\r\n      price: product.price || 0,\r\n      quantity: product.quantity || 0,\r\n      description: product.description || \"\",\r\n      // Lưu toàn bộ đối tượng ảnh\r\n      image: product.image && product.image.length > 0 ? product.image : [{ url: DEFAULT_IMAGE_URL, public_id: \"default\" }],\r\n      additionalInfo: {\r\n        weight: product.additionalInfo?.weight || 0,\r\n        length: product.additionalInfo?.length || 0,\r\n        width: product.additionalInfo?.width || 0,\r\n        height: product.additionalInfo?.height || 0,\r\n      },\r\n    });\r\n\r\n    setIsSidebarOpen(true);\r\n    setEditingProduct(product);\r\n  };\r\n\r\n  const formatPrice = (price) => {\r\n    return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n  };\r\n\r\n  const handlePriceChange = (e) => {\r\n    const value = e.target.value.replace(/\\D/g, \"\");\r\n    setFormData((prev) => ({ ...prev, price: Number(value) }));\r\n  };\r\n\r\n  const handleRemoveImage = (index) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      image: prev.image.filter((_, i) => i !== index),\r\n    }));\r\n    setImagePreview((prev) => prev.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleClear = useCallback(() => {\r\n    setFormData({\r\n      code: \"\",\r\n      name: \"\",\r\n      brand: \"\",\r\n      categories: [],\r\n      price: 0,\r\n      quantity: 0,\r\n      description: \"\",\r\n      image: [],\r\n      additionalInfo: {\r\n        weight: 0,\r\n        length: 0,\r\n        width: 0,\r\n        height: 0,\r\n      },\r\n    });\r\n    setEditingProduct(null);\r\n    setImagePreview([]);\r\n  }, []);\r\n\r\n  const handleAdditionalInfoChange = (field, value) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      additionalInfo: {\r\n        ...prev.additionalInfo,\r\n        [field]: Number(value) || 0,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleCreate = () => {\r\n    handleClear();\r\n    handleOpenSidebar();\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      <div className=\"container p-6 overscroll-contain col-span-3\">\r\n        <h2 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h2>\r\n        <div className=\"flex justify-between mb-4\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Tìm kiếm sản phẩm...\"\r\n            className=\"border p-2 rounded w-1/3\"\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n          <select\r\n            className=\"border p-2 rounded\"\r\n            onChange={(e) => setFilterBrand(e.target.value)}\r\n          >\r\n            <option value=\"\">Tất cả thương hiệu</option>\r\n            {brands.map((brand) => (\r\n              <option key={brand._id} value={brand._id}>\r\n                {brand.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Giá tối thiểu\"\r\n            className=\"border p-2 rounded w-1/6\"\r\n            onChange={(e) => setMinPrice(e.target.value)}\r\n          />\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Giá tối đa\"\r\n            className=\"border p-2 rounded w-1/6\"\r\n            onChange={(e) => setMaxPrice(e.target.value)}\r\n          />\r\n          <button\r\n            onClick={handleCreate}\r\n            className=\"bg-green-500 text-white px-4 py-2 rounded\"\r\n          >\r\n            Thêm sản phẩm\r\n          </button>\r\n        </div>\r\n        <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n          <table className=\"w-full border-collapse border border-gray-300\">\r\n            <thead className=\"bg-gray-200 sticky top-0\">\r\n              <tr>\r\n                <th className=\"border p-2 w-40 h-20\">Hình ảnh</th>\r\n                <th className=\"border p-2\">Mã sản phẩm</th>\r\n                <th className=\"border p-2\">Tên sản phẩm</th>\r\n                <th className=\"border p-2\">Giá</th>\r\n                <th className=\"border p-2\">Trạng thái</th>\r\n                <th className=\"border p-2\">Hãng</th>\r\n                <th className=\"border p-2\">Kho hàng</th>\r\n                <th className=\"border p-2\">Danh mục</th>\r\n                <th className=\"border p-2\">Thông tin thêm</th>\r\n                <th className=\"border p-2 w-40\">Mô tả</th>\r\n                <th className=\"border p-2\">Hành động</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredProducts.map((product) => (\r\n                <tr key={product._id} className=\"hover:bg-gray-100\">\r\n                  <td className=\"border p-2\">\r\n                    <div className=\"flex space-x-2 overflow-x-auto\">\r\n                      {product.image.map((img, index) => (\r\n                        <img\r\n                          key={index}\r\n                          // Dùng thuộc tính url từ đối tượng ảnh, nếu không có thì dùng default\r\n                          src={img.url || DEFAULT_IMAGE_URL}\r\n                          alt={product.name}\r\n                          className=\"object-cover h-20 w-20\"\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"border p-2\">{product.code}</td>\r\n                  <td className=\"border p-2\">{product.name}</td>\r\n                  <td className=\"border p-2\">\r\n                    {formatPrice(product.price)} VNĐ\r\n                  </td>\r\n                  <td className=\"border p-2\">\r\n                    {product.quantity > 0 ? (\r\n                      <span className=\"text-green-500\">Còn hàng</span>\r\n                    ) : (\r\n                      <span className=\"text-red-500\">Hết hàng</span>\r\n                    )}\r\n                  </td>\r\n                  <td className=\"border p-2\">\r\n                    {product.brand ? product.brand.name : \"Không có hãng\"}\r\n                  </td>\r\n                  <td className=\"border p-2\">{product.quantity}</td>\r\n                  <td className=\"border p-2\">\r\n                    {product.categories.length > 0\r\n                      ? product.categories.map((cat) => cat.name).join(\", \")\r\n                      : \"Không có danh mục\"}\r\n                  </td>\r\n                  <td className=\"border p-2\">\r\n                    {product.additionalInfo &&\r\n                    typeof product.additionalInfo === \"object\"\r\n                      ? `Trọng lượng: ${product.additionalInfo.weight || 0}kg, Kích thước: ${product.additionalInfo.length || 0}x${product.additionalInfo.width || 0}x${product.additionalInfo.height || 0} cm`\r\n                      : \"Không có thông tin thêm\"}\r\n                  </td>\r\n                  <td className=\"border p-2 whitespace-pre-line\">\r\n                    {product.description}\r\n                  </td>\r\n                  <td className=\"border p-2 flex justify-center items-center space-x-2\">\r\n                    <button\r\n                      onClick={() => handleEdit(product)}\r\n                      className=\"text-sky-500 px-3 py-1 rounded\"\r\n                    >\r\n                      Sửa\r\n                    </button>\r\n                    <button\r\n                      onClick={() => handleDelete(product._id)}\r\n                      className=\"text-red-500 px-3 py-1 rounded\"\r\n                    >\r\n                      Xóa\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <ProductFormSidebar\r\n        isOpen={isSidebarOpen}\r\n        onClose={handleCloseSidebar}\r\n        formData={formData}\r\n        setFormData={setFormData}\r\n        handleSubmit={handleSubmit}\r\n        handleClear={handleClear}\r\n        handlePriceChange={handlePriceChange}\r\n        renderCategories={renderCategories}\r\n        categories={categories}\r\n        handleCategoryChange={handleCategoryChange}\r\n        brands={brands}\r\n        imagePreview={imagePreview}\r\n        handleImageChange={handleImageChange}\r\n        handleRemoveImage={handleRemoveImage}\r\n        handleAdditionalInfoChange={handleAdditionalInfoChange}\r\n        editingProduct={editingProduct}\r\n      />\r\n      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n      <LoadingScreen loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminProducts;\r\n"
        }
    ]
}