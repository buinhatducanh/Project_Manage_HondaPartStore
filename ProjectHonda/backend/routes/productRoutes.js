const express = require("express");
const router = express.Router();
const Product = require("../models/Product.js");
const upload = require("../middleware/upload");
const mongoose = require("mongoose");
const cloudinary = require("cloudinary").v2;

// POST: T·∫°o s·∫£n ph·∫©m m·ªõi
router.post("/", upload.array("image", 5), async (req, res) => {
  try {
    console.log("D·ªØ li·ªáu nh·∫≠n t·ª´ Client:", req.body);
    console.log("Files upload:", req.files);

    // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    if (!req.body.name || !req.body.price || !req.body.code) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt!" });
    }

    // X·ª≠ l√Ω ·∫£nh: chuy·ªÉn t·ª´ req.files th√†nh m·∫£ng ƒë·ªëi t∆∞·ª£ng { url, public_id }
    const imageObjs =
      req.files && req.files.length > 0
        ? req.files.map((file) => ({
            url: file.path,
            public_id: file.filename,
          }))
        : [
            {
              url: "https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg",
              public_id: "empty_cpvono",
            },
          ];

    // Parse JSON cho c√°c tr∆∞·ªùng object
    let parsedCategories = [];
    try {
      parsedCategories = req.body.categories ? JSON.parse(req.body.categories) : [];
    } catch (e) {
      return res.status(400).json({ message: "D·ªØ li·ªáu categories kh√¥ng h·ª£p l·ªá!" });
    }

    let parsedAdditionalInfo = {};
    try {
      parsedAdditionalInfo = req.body.additionalInfo ? JSON.parse(req.body.additionalInfo) : {};
    } catch (e) {
      return res.status(400).json({ message: "D·ªØ li·ªáu additionalInfo kh√¥ng h·ª£p l·ªá!" });
    }

    // Chuy·ªÉn ƒë·ªïi brand th√†nh ObjectId n·∫øu c√≥ v√† h·ª£p l·ªá
    let brandId = null;
    if (req.body.brand && mongoose.Types.ObjectId.isValid(req.body.brand)) {
      brandId = new mongoose.Types.ObjectId(req.body.brand);
    }

    const newProduct = new Product({
      name: req.body.name,
      price: Number(req.body.price),
      quantity: Number(req.body.quantity),
      code: req.body.code,
      brand: brandId, // S·ª≠ d·ª•ng ObjectId ƒë√£ ki·ªÉm tra
      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),
      description: req.body.description,
      image: imageObjs,
      additionalInfo: {
        weight: Number(parsedAdditionalInfo.weight || 0),
        length: Number(parsedAdditionalInfo.length || 0),
        width: Number(parsedAdditionalInfo.width || 0),
        height: Number(parsedAdditionalInfo.height || 0),
      },
    });

    console.log("D·ªØ li·ªáu s·∫Ω l∆∞u:", newProduct);

    const product = await newProduct.save();
    res.status(201).json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c t·∫°o!", product });
  } catch (error) {
    console.error("L·ªói API:", error);
    res.status(500).json({ message: "L·ªói server!" });
  }
});

// READ: L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m (C√ì POPULATE)
router.get("/", async (req, res) => {
  try {
    const products = await Product.find()
      .populate("brand", "name") // L·∫•y t√™n th∆∞∆°ng hi·ªáu
      .populate("categories", "name"); // L·∫•y t√™n danh m·ª•c

    res.status(200).json(products);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// PUT: C·∫≠p nh·∫≠t s·∫£n ph·∫©m
router.put("/:id", upload.array("image", 5), async (req, res) => {
  try {
    console.log("üì• D·ªØ li·ªáu g·ª≠i l√™n t·ª´ Client:", req.body);
    console.log("üì∏ ·∫¢nh m·ªõi upload:", req.files);

    const { brand, categories, additionalInfo, existingImages, ...otherData } = req.body;

    // X·ª≠ l√Ω ·∫£nh m·ªõi: chuy·ªÉn sang ƒë·ªëi t∆∞·ª£ng {url, public_id}
    const newImages =
      req.files && req.files.length > 0
        ? req.files.map((file) => ({
            url: file.path,
            public_id: file.filename,
          }))
        : [];

    // existingImages t·ª´ FE ph·∫£i ƒë∆∞·ª£c g·ª≠i theo ƒë√∫ng ƒë·ªãnh d·∫°ng ƒë·ªëi t∆∞·ª£ng
    const oldImages = existingImages
      ? Array.isArray(existingImages)
        ? existingImages
        : [existingImages]
      : [];

    const finalImages = [...oldImages, ...newImages].filter(Boolean);

    // Parse JSON cho categories v√† additionalInfo
    let parsedCategories = [];
    try {
      parsedCategories = categories ? JSON.parse(categories) : [];
    } catch (e) {
      return res.status(400).json({ message: "D·ªØ li·ªáu categories kh√¥ng h·ª£p l·ªá!" });
    }

    let parsedAdditionalInfo = {};
    try {
      parsedAdditionalInfo = additionalInfo ? JSON.parse(additionalInfo) : {};
    } catch (e) {
      return res.status(400).json({ message: "D·ªØ li·ªáu additionalInfo kh√¥ng h·ª£p l·ªá!" });
    }

    // Chuy·ªÉn ƒë·ªïi brand n·∫øu h·ª£p l·ªá
    let brandId = null;
    if (brand && mongoose.Types.ObjectId.isValid(brand)) {
      brandId = new mongoose.Types.ObjectId(brand);
    }

    const updatedData = {
      ...otherData,
      brand: brandId,
      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),
      image: finalImages,
      additionalInfo: parsedAdditionalInfo,
    };

    const updatedProduct = await Product.findByIdAndUpdate(
      req.params.id,
      updatedData,
      { new: true }
    )
      .populate("brand")
      .populate("categories");

    if (!updatedProduct) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!" });
    }

    console.log("‚úÖ D·ªØ li·ªáu sau c·∫≠p nh·∫≠t:", updatedProduct);
    res.status(200).json(updatedProduct);
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", err);
    res.status(400).json({ message: err.message });
  }
});

// DELETE: X√≥a s·∫£n ph·∫©m v√† ·∫£nh tr√™n Cloudinary
router.delete("/:id", async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);

    if (!product) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!" });
    }

    // Xo√° ·∫£nh tr√™n Cloudinary: s·ª≠ d·ª•ng public_id ƒë√£ l∆∞u
    if (product.image && Array.isArray(product.image) && product.image.length > 0) {
      for (const imageObj of product.image) {
        try {
          await cloudinary.uploader.destroy(imageObj.public_id);
        } catch (cloudinaryError) {
          console.warn("L·ªói xo√° ·∫£nh tr√™n Cloudinary:", cloudinaryError.message);
        }
      }
    }

    // Xo√° s·∫£n ph·∫©m kh·ªèi MongoDB
    await Product.findByIdAndDelete(req.params.id);

    res.status(200).json({ message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng (bao g·ªìm ·∫£nh n·∫øu c√≥)!" });
  } catch (err) {
    console.error("L·ªói xo√° s·∫£n ph·∫©m:", err);
    res.status(400).json({ message: "Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m!" });
  }
});

// Upload ·∫£nh v√† c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n v√†o MongoDB (n·∫øu c·∫ßn)
router.post("/upload", upload.single("image"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: "No file uploaded" });
    }

    res.json({
      message: "Upload successful",
      imageUrl: req.file.path, // URL ·∫£nh tr√™n Cloudinary
      public_id: req.file.filename, // Public ID c·ªßa ·∫£nh
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Upload failed" });
  }
});

router.get("/:id", async (req, res) => {
  try {
    const product = await Product.findById(req.params.id)
      .populate("brand")
      .populate("categories");

    if (!product) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!" });
    }

    res.status(200).json(product);
  } catch (err) {
    res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói server!" });
  }
});

module.exports = router;
