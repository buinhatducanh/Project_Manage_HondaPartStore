{
    "sourceFile": "models/Category.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1738064319292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738519191623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,12 @@\n const mongoose = require(\"mongoose\");\r\n \r\n const categorySchema = new mongoose.Schema({\r\n-  name: { type: String, required: true },\r\n+  name: { \r\n+    type: String, \r\n+    required: true, \r\n+    unique: true  // Đảm bảo mỗi phân loại là duy nhất\r\n+  },\r\n   description: { type: String },\r\n }, { timestamps: true });\r\n \r\n module.exports = mongoose.model(\"Category\", categorySchema);\r\n"
                },
                {
                    "date": 1738519396927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,15 @@\n     type: String, \r\n     required: true, \r\n     unique: true  // Đảm bảo mỗi phân loại là duy nhất\r\n   },\r\n-  description: { type: String },\r\n+  description: { \r\n+    type: String \r\n+  },\r\n+  parent: {\r\n+    type: mongoose.Schema.Types.ObjectId,  // Trường này liên kết với phân loại cha\r\n+    ref: \"Category\",  // Liên kết với chính collection Category\r\n+    default: null  // Nếu không có phân loại cha, trường này sẽ là null\r\n+  }\r\n }, { timestamps: true });\r\n \r\n module.exports = mongoose.model(\"Category\", categorySchema);\r\n"
                },
                {
                    "date": 1739943056309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,155 @@\n-const mongoose = require(\"mongoose\");\r\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n \r\n-const categorySchema = new mongoose.Schema({\r\n-  name: { \r\n-    type: String, \r\n-    required: true, \r\n-    unique: true  // Đảm bảo mỗi phân loại là duy nhất\r\n-  },\r\n-  description: { \r\n-    type: String \r\n-  },\r\n-  parent: {\r\n-    type: mongoose.Schema.Types.ObjectId,  // Trường này liên kết với phân loại cha\r\n-    ref: \"Category\",  // Liên kết với chính collection Category\r\n-    default: null  // Nếu không có phân loại cha, trường này sẽ là null\r\n-  }\r\n-}, { timestamps: true });\r\n+const AdminProducts = () => {\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [categoryMap, setCategoryMap] = useState({});\r\n+  const [searchCategory, setSearchCategory] = useState(\"\");\r\n+  const [formData, setFormData] = useState({\r\n+    name: \"\",\r\n+    price: \"\",\r\n+    brand: \"\",\r\n+    quantity: \"\",\r\n+    categories: [],\r\n+    image: null,\r\n+  });\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n \r\n-module.exports = mongoose.model(\"Category\", categorySchema);\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const productRes = await axios.get(\"http://localhost:5000/api/products\");\r\n+      const brandRes = await axios.get(\"http://localhost:5000/api/brands\");\r\n+      const categoryRes = await axios.get(\"http://localhost:5000/api/categories\");\r\n+\r\n+      setProducts(productRes.data);\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+\r\n+      const brandObj = brandRes.data.reduce((acc, brand) => {\r\n+        acc[brand._id] = brand.name;\r\n+        return acc;\r\n+      }, {});\r\n+      const categoryObj = categoryRes.data.reduce((acc, category) => {\r\n+        acc[category._id] = category.name;\r\n+        return acc;\r\n+      }, {});\r\n+\r\n+      setBrandMap(brandObj);\r\n+      setCategoryMap(categoryObj);\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    fetchData();\r\n+  }, []);\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    try {\r\n+      const formDataWithImage = new FormData();\r\n+      formDataWithImage.append(\"name\", formData.name);\r\n+      formDataWithImage.append(\"price\", formData.price);\r\n+      formDataWithImage.append(\"quantity\", formData.quantity);\r\n+      formDataWithImage.append(\"brand\", formData.brand);\r\n+      formDataWithImage.append(\"categories\", JSON.stringify(formData.categories));\r\n+\r\n+      if (formData.image) {\r\n+        formDataWithImage.append(\"image\", formData.image);\r\n+      }\r\n+\r\n+      if (editingProduct) {\r\n+        await axios.put(`http://localhost:5000/api/products/${editingProduct._id}`, formDataWithImage);\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage);\r\n+      }\r\n+\r\n+      setFormData({ name: \"\", price: \"\", brand: \"\", quantity: \"\", categories: [], image: null });\r\n+      setEditingProduct(null);\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi thêm/cập nhật sản phẩm\", error.response ? error.response.data : error.message);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (productId) => {\r\n+    try {\r\n+      await axios.delete(`http://localhost:5000/api/products/${productId}`);\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEdit = (product) => {\r\n+    setFormData({\r\n+      name: product.name,\r\n+      price: product.price,\r\n+      brand: product.brand,\r\n+      quantity: product.quantity,\r\n+      categories: product.categories,\r\n+      image: null,\r\n+    });\r\n+    setEditingProduct(product);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container mx-auto p-6 grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n+      <div className=\"bg-white p-4 rounded-lg shadow-lg\">\r\n+        <h2 className=\"text-lg font-bold mb-4\">{editingProduct ? \"Cập nhật sản phẩm\" : \"Thêm sản phẩm mới\"}</h2>\r\n+        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n+          <input type=\"text\" placeholder=\"Tên sản phẩm\" className=\"w-full p-2 border rounded\" value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} required />\r\n+          <input type=\"number\" placeholder=\"Giá\" className=\"w-full p-2 border rounded\" value={formData.price} onChange={(e) => setFormData({ ...formData, price: e.target.value })} required />\r\n+          <input type=\"number\" placeholder=\"Số lượng\" className=\"w-full p-2 border rounded\" value={formData.quantity} onChange={(e) => setFormData({ ...formData, quantity: e.target.value })} required />\r\n+          <select className=\"w-full p-2 border rounded\" value={formData.brand} onChange={(e) => setFormData({ ...formData, brand: e.target.value })} required>\r\n+            <option value=\"\">Chọn hãng</option>\r\n+            {brands.map((brand) => (\r\n+              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <select multiple className=\"w-full p-2 border rounded\" value={formData.categories} onChange={(e) => setFormData({ ...formData, categories: Array.from(e.target.selectedOptions, (option) => option.value) })}>\r\n+            {categories.map((category) => (\r\n+              <option key={category._id} value={category._id}>{category.name}</option>\r\n+            ))}\r\n+          </select>\r\n+          <input type=\"file\" onChange={(e) => setFormData({ ...formData, image: e.target.files[0] })} className=\"w-full p-2 border rounded\" />\r\n+          <button type=\"submit\" className=\"bg-blue-500 text-white px-4 py-2 rounded\">{editingProduct ? \"Cập nhật\" : \"Thêm\"}</button>\r\n+        </form>\r\n+      </div>\r\n+      <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n+        <table className=\"w-full table-auto border-collapse border border-gray-300\">\r\n+          <thead className=\"bg-gray-200\">\r\n+            <tr>\r\n+              <th className=\"border p-2\">Hình ảnh</th>\r\n+              <th className=\"border p-2\">Tên sản phẩm</th>\r\n+              <th className=\"border p-2\">Giá</th>\r\n+              <th className=\"border p-2\">Hãng</th>\r\n+              <th className=\"border p-2\">Kho hàng</th>\r\n+              <th className=\"border p-2\">Phân loại</th>\r\n+              <th className=\"border p-2\">Hành động</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {products.map((product) => (\r\n+              <tr key={product._id} className=\"text-center\">\r\n+                <td className=\"border p-2\">{product.image ? <img src={product.image} alt={product.name} className=\"h-16 mx-auto\" /> : \"Không có ảnh\"}</td>\r\n+                <td className=\"border p-2\">{product.name}</td>\r\n+                <td className=\"border p-2\">{product.price}</td>\r\n+                <td className=\"border p-2\">{brandMap[product.brand] || \"Không có hãng\"}</td>\r\n+                <td className=\"border p-2\">{product.quantity}</td>\r\n+                <td className=\"border p-2\">{product.categories.map((id) => categoryMap[id] || \"Không có loại\").join(\", \")}</td>\r\n+                <td className=\"border p-2\"><button onClick={() => handleEdit(product)} className=\"bg-yellow-500 text-white px-3 py-2 rounded\">Sửa</button> <button onClick={() => handleDelete(product._id)} className=\"bg-red-500 text-white px-3 py-2 rounded\">Xóa</button></td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </table>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1739943066391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,155 +1,19 @@\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n+const mongoose = require(\"mongoose\");\r\n \r\n-const AdminProducts = () => {\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [categoryMap, setCategoryMap] = useState({});\r\n-  const [searchCategory, setSearchCategory] = useState(\"\");\r\n-  const [formData, setFormData] = useState({\r\n-    name: \"\",\r\n-    price: \"\",\r\n-    brand: \"\",\r\n-    quantity: \"\",\r\n-    categories: [],\r\n-    image: null,\r\n-  });\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n+const categorySchema = new mongoose.Schema({\r\n+  name: { \r\n+    type: String, \r\n+    required: true, \r\n+    unique: true  // Đảm bảo mỗi phân loại là duy nhất\r\n+  },\r\n+  description: { \r\n+    type: String \r\n+  },\r\n+  parent: {\r\n+    type: mongoose.Schema.Types.ObjectId,  // Trường này liên kết với phân loại cha\r\n+    ref: \"Category\",  // Liên kết với chính collection Category\r\n+    default: null  // Nếu không có phân loại cha, trường này sẽ là null\r\n+  }\r\n+}, { timestamps: true });\r\n \r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const productRes = await axios.get(\"http://localhost:5000/api/products\");\r\n-      const brandRes = await axios.get(\"http://localhost:5000/api/brands\");\r\n-      const categoryRes = await axios.get(\"http://localhost:5000/api/categories\");\r\n-\r\n-      setProducts(productRes.data);\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-\r\n-      const brandObj = brandRes.data.reduce((acc, brand) => {\r\n-        acc[brand._id] = brand.name;\r\n-        return acc;\r\n-      }, {});\r\n-      const categoryObj = categoryRes.data.reduce((acc, category) => {\r\n-        acc[category._id] = category.name;\r\n-        return acc;\r\n-      }, {});\r\n-\r\n-      setBrandMap(brandObj);\r\n-      setCategoryMap(categoryObj);\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n-    }\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    fetchData();\r\n-  }, []);\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    try {\r\n-      const formDataWithImage = new FormData();\r\n-      formDataWithImage.append(\"name\", formData.name);\r\n-      formDataWithImage.append(\"price\", formData.price);\r\n-      formDataWithImage.append(\"quantity\", formData.quantity);\r\n-      formDataWithImage.append(\"brand\", formData.brand);\r\n-      formDataWithImage.append(\"categories\", JSON.stringify(formData.categories));\r\n-\r\n-      if (formData.image) {\r\n-        formDataWithImage.append(\"image\", formData.image);\r\n-      }\r\n-\r\n-      if (editingProduct) {\r\n-        await axios.put(`http://localhost:5000/api/products/${editingProduct._id}`, formDataWithImage);\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage);\r\n-      }\r\n-\r\n-      setFormData({ name: \"\", price: \"\", brand: \"\", quantity: \"\", categories: [], image: null });\r\n-      setEditingProduct(null);\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi thêm/cập nhật sản phẩm\", error.response ? error.response.data : error.message);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (productId) => {\r\n-    try {\r\n-      await axios.delete(`http://localhost:5000/api/products/${productId}`);\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEdit = (product) => {\r\n-    setFormData({\r\n-      name: product.name,\r\n-      price: product.price,\r\n-      brand: product.brand,\r\n-      quantity: product.quantity,\r\n-      categories: product.categories,\r\n-      image: null,\r\n-    });\r\n-    setEditingProduct(product);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container mx-auto p-6 grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n-      <div className=\"bg-white p-4 rounded-lg shadow-lg\">\r\n-        <h2 className=\"text-lg font-bold mb-4\">{editingProduct ? \"Cập nhật sản phẩm\" : \"Thêm sản phẩm mới\"}</h2>\r\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n-          <input type=\"text\" placeholder=\"Tên sản phẩm\" className=\"w-full p-2 border rounded\" value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} required />\r\n-          <input type=\"number\" placeholder=\"Giá\" className=\"w-full p-2 border rounded\" value={formData.price} onChange={(e) => setFormData({ ...formData, price: e.target.value })} required />\r\n-          <input type=\"number\" placeholder=\"Số lượng\" className=\"w-full p-2 border rounded\" value={formData.quantity} onChange={(e) => setFormData({ ...formData, quantity: e.target.value })} required />\r\n-          <select className=\"w-full p-2 border rounded\" value={formData.brand} onChange={(e) => setFormData({ ...formData, brand: e.target.value })} required>\r\n-            <option value=\"\">Chọn hãng</option>\r\n-            {brands.map((brand) => (\r\n-              <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <select multiple className=\"w-full p-2 border rounded\" value={formData.categories} onChange={(e) => setFormData({ ...formData, categories: Array.from(e.target.selectedOptions, (option) => option.value) })}>\r\n-            {categories.map((category) => (\r\n-              <option key={category._id} value={category._id}>{category.name}</option>\r\n-            ))}\r\n-          </select>\r\n-          <input type=\"file\" onChange={(e) => setFormData({ ...formData, image: e.target.files[0] })} className=\"w-full p-2 border rounded\" />\r\n-          <button type=\"submit\" className=\"bg-blue-500 text-white px-4 py-2 rounded\">{editingProduct ? \"Cập nhật\" : \"Thêm\"}</button>\r\n-        </form>\r\n-      </div>\r\n-      <div className=\"overflow-x-auto bg-white rounded shadow-lg p-4\">\r\n-        <table className=\"w-full table-auto border-collapse border border-gray-300\">\r\n-          <thead className=\"bg-gray-200\">\r\n-            <tr>\r\n-              <th className=\"border p-2\">Hình ảnh</th>\r\n-              <th className=\"border p-2\">Tên sản phẩm</th>\r\n-              <th className=\"border p-2\">Giá</th>\r\n-              <th className=\"border p-2\">Hãng</th>\r\n-              <th className=\"border p-2\">Kho hàng</th>\r\n-              <th className=\"border p-2\">Phân loại</th>\r\n-              <th className=\"border p-2\">Hành động</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {products.map((product) => (\r\n-              <tr key={product._id} className=\"text-center\">\r\n-                <td className=\"border p-2\">{product.image ? <img src={product.image} alt={product.name} className=\"h-16 mx-auto\" /> : \"Không có ảnh\"}</td>\r\n-                <td className=\"border p-2\">{product.name}</td>\r\n-                <td className=\"border p-2\">{product.price}</td>\r\n-                <td className=\"border p-2\">{brandMap[product.brand] || \"Không có hãng\"}</td>\r\n-                <td className=\"border p-2\">{product.quantity}</td>\r\n-                <td className=\"border p-2\">{product.categories.map((id) => categoryMap[id] || \"Không có loại\").join(\", \")}</td>\r\n-                <td className=\"border p-2\"><button onClick={() => handleEdit(product)} className=\"bg-yellow-500 text-white px-3 py-2 rounded\">Sửa</button> <button onClick={() => handleDelete(product._id)} className=\"bg-red-500 text-white px-3 py-2 rounded\">Xóa</button></td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </table>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n+module.exports = mongoose.model(\"Category\", categorySchema);\r\n"
                }
            ],
            "date": 1738064319292,
            "name": "Commit-0",
            "content": "const mongoose = require(\"mongoose\");\r\n\r\nconst categorySchema = new mongoose.Schema({\r\n  name: { type: String, required: true },\r\n  description: { type: String },\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Category\", categorySchema);\r\n"
        }
    ]
}