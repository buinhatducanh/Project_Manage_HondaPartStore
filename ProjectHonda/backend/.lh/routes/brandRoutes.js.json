{
    "sourceFile": "routes/brandRoutes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1738858287134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738860643064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,78 @@\n const express = require(\"express\");\r\n const router = express.Router();\r\n const Brand = require(\"../models/Brand\");\r\n+const { body, validationResult } = require(\"express-validator\");\r\n \r\n // CREATE: Thêm mới Brand\r\n-router.post(\"/\", async (req, res) => {\r\n-  try {\r\n-    const Brand = new Brand(req.body);\r\n-    await Brand.save();\r\n-    res.status(201).json(Brand);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n+router.post(\r\n+  \"/\",\r\n+  // Xác thực đầu vào\r\n+  body(\"name\").notEmpty().withMessage(\"Name is required\").isString().withMessage(\"Name must be a string\"),\r\n+  body(\"description\").optional().isString().withMessage(\"Description must be a string\"),\r\n+  async (req, res) => {\r\n+    // Kiểm tra lỗi đầu vào\r\n+    const errors = validationResult(req);\r\n+    if (!errors.isEmpty()) {\r\n+      return res.status(400).json({ errors: errors.array() });\r\n+    }\r\n+\r\n+    try {\r\n+      const newBrand = new Brand(req.body);\r\n+      await newBrand.save();\r\n+      res.status(201).json(newBrand);\r\n+    } catch (err) {\r\n+      res.status(500).json({ message: err.message });\r\n+    }\r\n   }\r\n-});\r\n+);\r\n \r\n // READ: Lấy tất cả Brands\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n-    const Brands = await Brand.find();\r\n-    res.status(200).json(Brands);\r\n+    const brands = await Brand.find();\r\n+    res.status(200).json(brands);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n // READ: Lấy một Brand theo ID\r\n router.get(\"/:id\", async (req, res) => {\r\n   try {\r\n-    const Brand = await Brand.findById(req.params.id);\r\n-    if (!Brand) {\r\n+    const brand = await Brand.findById(req.params.id);\r\n+    if (!brand) {\r\n       return res.status(404).json({ message: \"Brand not found\" });\r\n     }\r\n-    res.status(200).json(Brand);\r\n+    res.status(200).json(brand);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n // UPDATE: Cập nhật thông tin Brand\r\n-router.put(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const updatedBrand = await Brand.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    if (!updatedBrand) {\r\n-      return res.status(404).json({ message: \"Brand not found\" });\r\n+router.put(\r\n+  \"/:id\",\r\n+  body(\"name\").optional().notEmpty().withMessage(\"Name should be a non-empty string\"),\r\n+  body(\"description\").optional().isString().withMessage(\"Description must be a string\"),\r\n+  async (req, res) => {\r\n+    // Kiểm tra lỗi đầu vào\r\n+    const errors = validationResult(req);\r\n+    if (!errors.isEmpty()) {\r\n+      return res.status(400).json({ errors: errors.array() });\r\n     }\r\n-    res.status(200).json(updatedBrand);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n+\r\n+    try {\r\n+      const updatedBrand = await Brand.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+      if (!updatedBrand) {\r\n+        return res.status(404).json({ message: \"Brand not found\" });\r\n+      }\r\n+      res.status(200).json(updatedBrand);\r\n+    } catch (err) {\r\n+      res.status(400).json({ message: err.message });\r\n+    }\r\n   }\r\n-});\r\n+);\r\n \r\n // DELETE: Xóa Brand\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n"
                },
                {
                    "date": 1738860729196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,18 @@\n const express = require(\"express\");\r\n const router = express.Router();\r\n const Brand = require(\"../models/Brand\");\r\n-const { body, validationResult } = require(\"express-validator\");\r\n \r\n // CREATE: Thêm mới Brand\r\n-router.post(\r\n-  \"/\",\r\n-  // Xác thực đầu vào\r\n-  body(\"name\").notEmpty().withMessage(\"Name is required\").isString().withMessage(\"Name must be a string\"),\r\n-  body(\"description\").optional().isString().withMessage(\"Description must be a string\"),\r\n-  async (req, res) => {\r\n-    // Kiểm tra lỗi đầu vào\r\n-    const errors = validationResult(req);\r\n-    if (!errors.isEmpty()) {\r\n-      return res.status(400).json({ errors: errors.array() });\r\n-    }\r\n-\r\n-    try {\r\n-      const newBrand = new Brand(req.body);\r\n-      await newBrand.save();\r\n-      res.status(201).json(newBrand);\r\n-    } catch (err) {\r\n-      res.status(500).json({ message: err.message });\r\n-    }\r\n+router.post(\"/\", async (req, res) => {\r\n+  try {\r\n+    const brand = new Brand(req.body);\r\n+    await brand.save();\r\n+    res.status(201).json(brand);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n   }\r\n-);\r\n+});\r\n \r\n // READ: Lấy tất cả Brands\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n@@ -35,45 +22,21 @@\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-// READ: Lấy một Brand theo ID\r\n-router.get(\"/:id\", async (req, res) => {\r\n+// UPDATE: Cập nhật thông tin Brand\r\n+router.put(\"/:id\", async (req, res) => {\r\n   try {\r\n-    const brand = await Brand.findById(req.params.id);\r\n-    if (!brand) {\r\n+    const updatedBrand = await Brand.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    if (!updatedBrand) {\r\n       return res.status(404).json({ message: \"Brand not found\" });\r\n     }\r\n-    res.status(200).json(brand);\r\n+    res.status(200).json(updatedBrand);\r\n   } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n+    res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-// UPDATE: Cập nhật thông tin Brand\r\n-router.put(\r\n-  \"/:id\",\r\n-  body(\"name\").optional().notEmpty().withMessage(\"Name should be a non-empty string\"),\r\n-  body(\"description\").optional().isString().withMessage(\"Description must be a string\"),\r\n-  async (req, res) => {\r\n-    // Kiểm tra lỗi đầu vào\r\n-    const errors = validationResult(req);\r\n-    if (!errors.isEmpty()) {\r\n-      return res.status(400).json({ errors: errors.array() });\r\n-    }\r\n-\r\n-    try {\r\n-      const updatedBrand = await Brand.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-      if (!updatedBrand) {\r\n-        return res.status(404).json({ message: \"Brand not found\" });\r\n-      }\r\n-      res.status(200).json(updatedBrand);\r\n-    } catch (err) {\r\n-      res.status(400).json({ message: err.message });\r\n-    }\r\n-  }\r\n-);\r\n-\r\n // DELETE: Xóa Brand\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedBrand = await Brand.findByIdAndDelete(req.params.id);\r\n"
                }
            ],
            "date": 1738858287134,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\r\nconst router = express.Router();\r\nconst Brand = require(\"../models/Brand\");\r\n\r\n// CREATE: Thêm mới Brand\r\nrouter.post(\"/\", async (req, res) => {\r\n  try {\r\n    const Brand = new Brand(req.body);\r\n    await Brand.save();\r\n    res.status(201).json(Brand);\r\n  } catch (err) {\r\n    res.status(400).json({ message: err.message });\r\n  }\r\n});\r\n\r\n// READ: Lấy tất cả Brands\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const Brands = await Brand.find();\r\n    res.status(200).json(Brands);\r\n  } catch (err) {\r\n    res.status(500).json({ message: err.message });\r\n  }\r\n});\r\n\r\n// READ: Lấy một Brand theo ID\r\nrouter.get(\"/:id\", async (req, res) => {\r\n  try {\r\n    const Brand = await Brand.findById(req.params.id);\r\n    if (!Brand) {\r\n      return res.status(404).json({ message: \"Brand not found\" });\r\n    }\r\n    res.status(200).json(Brand);\r\n  } catch (err) {\r\n    res.status(500).json({ message: err.message });\r\n  }\r\n});\r\n\r\n// UPDATE: Cập nhật thông tin Brand\r\nrouter.put(\"/:id\", async (req, res) => {\r\n  try {\r\n    const updatedBrand = await Brand.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n    if (!updatedBrand) {\r\n      return res.status(404).json({ message: \"Brand not found\" });\r\n    }\r\n    res.status(200).json(updatedBrand);\r\n  } catch (err) {\r\n    res.status(400).json({ message: err.message });\r\n  }\r\n});\r\n\r\n// DELETE: Xóa Brand\r\nrouter.delete(\"/:id\", async (req, res) => {\r\n  try {\r\n    const deletedBrand = await Brand.findByIdAndDelete(req.params.id);\r\n    if (!deletedBrand) {\r\n      return res.status(404).json({ message: \"Brand not found\" });\r\n    }\r\n    res.status(200).json({ message: \"Brand deleted successfully\" });\r\n  } catch (err) {\r\n    res.status(400).json({ message: err.message });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}