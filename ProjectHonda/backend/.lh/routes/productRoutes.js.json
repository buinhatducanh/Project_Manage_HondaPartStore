{
    "sourceFile": "routes/productRoutes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 96,
            "patches": [
                {
                    "date": 1738056020650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738059283384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,16 +11,5 @@\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-// Thêm sản phẩm\r\n-router.post(\"/\", async (req, res) => {\r\n-  const product = new Product(req.body);\r\n-  try {\r\n-    const savedProduct = await product.save();\r\n-    res.status(201).json(savedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1738059291295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,4 +12,23 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n+\r\n+// Thêm sản phẩm mới\r\n+router.post(\"/\", async (req, res) => {\r\n+  const product = new Product({\r\n+    name: req.body.name,\r\n+    brand: req.body.brand || \"Honda\",\r\n+    price: req.body.price,\r\n+    quantity: req.body.quantity || 0,\r\n+    description: req.body.description,\r\n+    image: req.body.image,\r\n+  });\r\n+\r\n+  try {\r\n+    const savedProduct = await product.save();\r\n+    res.status(201).json(savedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1738059301556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,4 +31,26 @@\n   } catch (err) {\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n+\r\n+// Cập nhật sản phẩm theo ID\r\n+router.put(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Product not found\" });\r\n+    }\r\n+\r\n+    product.name = req.body.name || product.name;\r\n+    product.brand = req.body.brand || product.brand;\r\n+    product.price = req.body.price || product.price;\r\n+    product.quantity = req.body.quantity || product.quantity;\r\n+    product.description = req.body.description || product.description;\r\n+    product.image = req.body.image || product.image;\r\n+\r\n+    const updatedProduct = await product.save();\r\n+    res.json(updatedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1738059847675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product\");\r\n+\r\n+// Lấy tất cả sản phẩm\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find();\r\n+    res.json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n+\r\n+// Thêm sản phẩm mới\r\n+router.post(\"/\", async (req, res) => {\r\n+  const product = new Product({\r\n+    name: req.body.name,\r\n+    brand: req.body.brand || \"Honda\",\r\n+    price: req.body.price,\r\n+    quantity: req.body.quantity || 0,\r\n+    description: req.body.description,\r\n+    image: req.body.image,\r\n+  });\r\n+\r\n+  try {\r\n+    const savedProduct = await product.save();\r\n+    res.status(201).json(savedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// Cập nhật sản phẩm theo ID\r\n+router.put(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Product not found\" });\r\n+    }\r\n+\r\n+    product.name = req.body.name || product.name;\r\n+    product.brand = req.body.brand || product.brand;\r\n+    product.price = req.body.price || product.price;\r\n+    product.quantity = req.body.quantity || product.quantity;\r\n+    product.description = req.body.description || product.description;\r\n+    product.image = req.body.image || product.image;\r\n+\r\n+    const updatedProduct = await product.save();\r\n+    res.json(updatedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// Xóa sản phẩm theo ID\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Product not found\" });\r\n+    }\r\n+\r\n+    await product.remove();\r\n+    res.json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1738064164348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/product\");\r\n+\r\n+// **CREATE**: Thêm một sản phẩm mới\r\n+router.post(\"/\", async (req, res) => {\r\n+  try {\r\n+    const { name, price, quantity, description, image } = req.body;\r\n+    const product = new Product({\r\n+      name,\r\n+      price,\r\n+      quantity,\r\n+      description,\r\n+      image,\r\n+    });\r\n+    await product.save();\r\n+    res.status(201).json(product);\r\n+  } catch (error) {\r\n+    res.status(400).json({ message: \"Error creating product\", error });\r\n+  }\r\n+});\r\n+\r\n+// **READ**: Lấy tất cả sản phẩm\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find();\r\n+    res.status(200).json(products);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: \"Error fetching products\", error });\r\n+  }\r\n+});\r\n+\r\n+// **READ**: Lấy thông tin chi tiết một sản phẩm theo ID\r\n+router.get(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Product not found\" });\r\n+    }\r\n+    res.status(200).json(product);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: \"Error fetching product\", error });\r\n+  }\r\n+});\r\n+\r\n+// **UPDATE**: Cập nhật thông tin sản phẩm\r\n+router.put(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      req.body,\r\n+      { new: true } // Trả về đối tượng đã được cập nhật\r\n+    );\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Product not found\" });\r\n+    }\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (error) {\r\n+    res.status(400).json({ message: \"Error updating product\", error });\r\n+  }\r\n+});\r\n+\r\n+// **DELETE**: Xóa một sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    if (!deletedProduct) {\r\n+      return res.status(404).json({ message: \"Product not found\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (error) {\r\n+    res.status(400).json({ message: \"Error deleting product\", error });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1738064180394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"./models/product\");\r\n+\r\n+// **CREATE**: Thêm một sản phẩm mới\r\n+router.post(\"/\", async (req, res) => {\r\n+  try {\r\n+    const { name, price, quantity, description, image } = req.body;\r\n+    const product = new Product({\r\n+      name,\r\n+      price,\r\n+      quantity,\r\n+      description,\r\n+      image,\r\n+    });\r\n+    await product.save();\r\n+    res.status(201).json(product);\r\n+  } catch (error) {\r\n+    res.status(400).json({ message: \"Error creating product\", error });\r\n+  }\r\n+});\r\n+\r\n+// **READ**: Lấy tất cả sản phẩm\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find();\r\n+    res.status(200).json(products);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: \"Error fetching products\", error });\r\n+  }\r\n+});\r\n+\r\n+// **READ**: Lấy thông tin chi tiết một sản phẩm theo ID\r\n+router.get(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Product not found\" });\r\n+    }\r\n+    res.status(200).json(product);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: \"Error fetching product\", error });\r\n+  }\r\n+});\r\n+\r\n+// **UPDATE**: Cập nhật thông tin sản phẩm\r\n+router.put(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      req.body,\r\n+      { new: true } // Trả về đối tượng đã được cập nhật\r\n+    );\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Product not found\" });\r\n+    }\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (error) {\r\n+    res.status(400).json({ message: \"Error updating product\", error });\r\n+  }\r\n+});\r\n+\r\n+// **DELETE**: Xóa một sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    if (!deletedProduct) {\r\n+      return res.status(404).json({ message: \"Product not found\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (error) {\r\n+    res.status(400).json({ message: \"Error deleting product\", error });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1738064345570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"./models/product\");\r\n+\r\n+// CREATE: Thêm mới sản phẩm\r\n+router.post(\"/\", async (req, res) => {\r\n+  try {\r\n+    const product = new Product(req.body);\r\n+    await product.save();\r\n+    res.status(201).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// READ: Lấy tất cả sản phẩm\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find();\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// UPDATE: Cập nhật thông tin sản phẩm\r\n+router.put(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// DELETE: Xóa sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1738064465182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"./models/Product\");\r\n+\r\n+// CREATE: Thêm mới sản phẩm\r\n+router.post(\"/\", async (req, res) => {\r\n+  try {\r\n+    const product = new Product(req.body);\r\n+    await product.save();\r\n+    res.status(201).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// READ: Lấy tất cả sản phẩm\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find();\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// UPDATE: Cập nhật thông tin sản phẩm\r\n+router.put(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// DELETE: Xóa sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1738064493779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const express = require(\"express\");\r\n const router = express.Router();\r\n-const Product = require(\"./models/Product\");\r\n+const Product = require(\"./models/Product.js\");\r\n \r\n // CREATE: Thêm mới sản phẩm\r\n router.post(\"/\", async (req, res) => {\r\n   try {\r\n@@ -43,329 +43,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"./models/product\");\r\n-\r\n-// CREATE: Thêm mới sản phẩm\r\n-router.post(\"/\", async (req, res) => {\r\n-  try {\r\n-    const product = new Product(req.body);\r\n-    await product.save();\r\n-    res.status(201).json(product);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// READ: Lấy tất cả sản phẩm\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find();\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// UPDATE: Cập nhật thông tin sản phẩm\r\n-router.put(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// DELETE: Xóa sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"./models/product\");\r\n-\r\n-// **CREATE**: Thêm một sản phẩm mới\r\n-router.post(\"/\", async (req, res) => {\r\n-  try {\r\n-    const { name, price, quantity, description, image } = req.body;\r\n-    const product = new Product({\r\n-      name,\r\n-      price,\r\n-      quantity,\r\n-      description,\r\n-      image,\r\n-    });\r\n-    await product.save();\r\n-    res.status(201).json(product);\r\n-  } catch (error) {\r\n-    res.status(400).json({ message: \"Error creating product\", error });\r\n-  }\r\n-});\r\n-\r\n-// **READ**: Lấy tất cả sản phẩm\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find();\r\n-    res.status(200).json(products);\r\n-  } catch (error) {\r\n-    res.status(500).json({ message: \"Error fetching products\", error });\r\n-  }\r\n-});\r\n-\r\n-// **READ**: Lấy thông tin chi tiết một sản phẩm theo ID\r\n-router.get(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id);\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Product not found\" });\r\n-    }\r\n-    res.status(200).json(product);\r\n-  } catch (error) {\r\n-    res.status(500).json({ message: \"Error fetching product\", error });\r\n-  }\r\n-});\r\n-\r\n-// **UPDATE**: Cập nhật thông tin sản phẩm\r\n-router.put(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      req.body,\r\n-      { new: true } // Trả về đối tượng đã được cập nhật\r\n-    );\r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ message: \"Product not found\" });\r\n-    }\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (error) {\r\n-    res.status(400).json({ message: \"Error updating product\", error });\r\n-  }\r\n-});\r\n-\r\n-// **DELETE**: Xóa một sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    if (!deletedProduct) {\r\n-      return res.status(404).json({ message: \"Product not found\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (error) {\r\n-    res.status(400).json({ message: \"Error deleting product\", error });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/product\");\r\n-\r\n-// **CREATE**: Thêm một sản phẩm mới\r\n-router.post(\"/\", async (req, res) => {\r\n-  try {\r\n-    const { name, price, quantity, description, image } = req.body;\r\n-    const product = new Product({\r\n-      name,\r\n-      price,\r\n-      quantity,\r\n-      description,\r\n-      image,\r\n-    });\r\n-    await product.save();\r\n-    res.status(201).json(product);\r\n-  } catch (error) {\r\n-    res.status(400).json({ message: \"Error creating product\", error });\r\n-  }\r\n-});\r\n-\r\n-// **READ**: Lấy tất cả sản phẩm\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find();\r\n-    res.status(200).json(products);\r\n-  } catch (error) {\r\n-    res.status(500).json({ message: \"Error fetching products\", error });\r\n-  }\r\n-});\r\n-\r\n-// **READ**: Lấy thông tin chi tiết một sản phẩm theo ID\r\n-router.get(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id);\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Product not found\" });\r\n-    }\r\n-    res.status(200).json(product);\r\n-  } catch (error) {\r\n-    res.status(500).json({ message: \"Error fetching product\", error });\r\n-  }\r\n-});\r\n-\r\n-// **UPDATE**: Cập nhật thông tin sản phẩm\r\n-router.put(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      req.body,\r\n-      { new: true } // Trả về đối tượng đã được cập nhật\r\n-    );\r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ message: \"Product not found\" });\r\n-    }\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (error) {\r\n-    res.status(400).json({ message: \"Error updating product\", error });\r\n-  }\r\n-});\r\n-\r\n-// **DELETE**: Xóa một sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    if (!deletedProduct) {\r\n-      return res.status(404).json({ message: \"Product not found\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (error) {\r\n-    res.status(400).json({ message: \"Error deleting product\", error });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product\");\r\n-\r\n-// Lấy tất cả sản phẩm\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find();\r\n-    res.json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-\r\n-// Thêm sản phẩm mới\r\n-router.post(\"/\", async (req, res) => {\r\n-  const product = new Product({\r\n-    name: req.body.name,\r\n-    brand: req.body.brand || \"Honda\",\r\n-    price: req.body.price,\r\n-    quantity: req.body.quantity || 0,\r\n-    description: req.body.description,\r\n-    image: req.body.image,\r\n-  });\r\n-\r\n-  try {\r\n-    const savedProduct = await product.save();\r\n-    res.status(201).json(savedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// Cập nhật sản phẩm theo ID\r\n-router.put(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id);\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Product not found\" });\r\n-    }\r\n-\r\n-    product.name = req.body.name || product.name;\r\n-    product.brand = req.body.brand || product.brand;\r\n-    product.price = req.body.price || product.price;\r\n-    product.quantity = req.body.quantity || product.quantity;\r\n-    product.description = req.body.description || product.description;\r\n-    product.image = req.body.image || product.image;\r\n-\r\n-    const updatedProduct = await product.save();\r\n-    res.json(updatedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// Xóa sản phẩm theo ID\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id);\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Product not found\" });\r\n-    }\r\n-\r\n-    await product.remove();\r\n-    res.json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product\");\r\n-\r\n-// Lấy tất cả sản phẩm\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find();\r\n-    res.json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-\r\n-// Thêm sản phẩm mới\r\n-router.post(\"/\", async (req, res) => {\r\n-  const product = new Product({\r\n-    name: req.body.name,\r\n-    brand: req.body.brand || \"Honda\",\r\n-    price: req.body.price,\r\n-    quantity: req.body.quantity || 0,\r\n-    description: req.body.description,\r\n-    image: req.body.image,\r\n-  });\r\n-\r\n-  try {\r\n-    const savedProduct = await product.save();\r\n-    res.status(201).json(savedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// Cập nhật sản phẩm theo ID\r\n-router.put(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id);\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Product not found\" });\r\n-    }\r\n-\r\n-    product.name = req.body.name || product.name;\r\n-    product.brand = req.body.brand || product.brand;\r\n-    product.price = req.body.price || product.price;\r\n-    product.quantity = req.body.quantity || product.quantity;\r\n-    product.description = req.body.description || product.description;\r\n-    product.image = req.body.image || product.image;\r\n-\r\n-    const updatedProduct = await product.save();\r\n-    res.json(updatedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n"
                },
                {
                    "date": 1738064643775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product.js\");\r\n+\r\n+// CREATE: Thêm mới sản phẩm\r\n+router.post(\"/\", async (req, res) => {\r\n+  try {\r\n+    const product = new Product(req.body);\r\n+    await product.save();\r\n+    res.status(201).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// READ: Lấy tất cả sản phẩm\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find();\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// UPDATE: Cập nhật thông tin sản phẩm\r\n+router.put(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// DELETE: Xóa sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1738064650291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product.js\");\r\n+\r\n+// CREATE: Thêm mới sản phẩm\r\n+router.post(\"/\", async (req, res) => {\r\n+  try {\r\n+    const product = new Product(req.body);\r\n+    await product.save();\r\n+    res.status(201).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// READ: Lấy tất cả sản phẩm\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find();\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// UPDATE: Cập nhật thông tin sản phẩm\r\n+router.put(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// DELETE: Xóa sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1738859157354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n const express = require(\"express\");\r\n const router = express.Router();\r\n const Product = require(\"../models/Product.js\");\r\n+const upload = require(\"../middleware/upload\");\r\n \r\n // CREATE: Thêm mới sản phẩm\r\n router.post(\"/\", async (req, res) => {\r\n   try {\r\n@@ -42,97 +43,16 @@\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product.js\");\r\n \r\n-// CREATE: Thêm mới sản phẩm\r\n-router.post(\"/\", async (req, res) => {\r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n+router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n   try {\r\n-    const product = new Product(req.body);\r\n-    await product.save();\r\n-    res.status(201).json(product);\r\n+    const imageUrl = `/uploads/${req.file.filename}`; // Đường dẫn ảnh\r\n+    res.json({ imageUrl });\r\n   } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// READ: Lấy tất cả sản phẩm\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find();\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-// UPDATE: Cập nhật thông tin sản phẩm\r\n-router.put(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// DELETE: Xóa sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"./models/Product.js\");\r\n-\r\n-// CREATE: Thêm mới sản phẩm\r\n-router.post(\"/\", async (req, res) => {\r\n-  try {\r\n-    const product = new Product(req.body);\r\n-    await product.save();\r\n-    res.status(201).json(product);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// READ: Lấy tất cả sản phẩm\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find();\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// UPDATE: Cập nhật thông tin sản phẩm\r\n-router.put(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// DELETE: Xóa sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1739364549753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,15 +44,21 @@\n   }\r\n });\r\n \r\n \r\n-// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n   try {\r\n-    const imageUrl = `/uploads/${req.file.filename}`; // Đường dẫn ảnh\r\n-    res.json({ imageUrl });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    }\r\n+\r\n+    res.json({\r\n+      message: \"Upload successful\",\r\n+      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Upload failed\" });\r\n   }\r\n });\r\n \r\n module.exports = router;\r\n"
                },
                {
                    "date": 1739725878797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n-    const products = await Product.find();\r\n+    const products = await Product.find().populate(\"brand\",\"name\");\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n@@ -44,8 +44,9 @@\n   }\r\n });\r\n \r\n \r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n   try {\r\n     if (!req.file) {\r\n       return res.status(400).json({ message: \"No file uploaded\" });\r\n"
                },
                {
                    "date": 1739725946088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n-    const products = await Product.find().populate(\"brand\",\"name\");\r\n+    const products = await Product.find().populate(\"brands\",\"name\");\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1739725952649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n-    const products = await Product.find().populate(\"brands\",\"name\");\r\n+    const products = await Product.find().populate(\"brand\",\"name\");\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1739726199220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find().populate(\"brand\",\"name\");\r\n+    console.log(products);  // Xem dữ liệu đã populate chưa\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1739731154182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n-    const products = await Product.find().populate(\"brand\",\"name\");\r\n+    const products = await Product.find();\r\n     console.log(products);  // Xem dữ liệu đã populate chưa\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n"
                },
                {
                    "date": 1739731438324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n-    const products = await Product.find();\r\n+    const products = await Product.find().populate(\"brand\", \"name\");\r\n     console.log(products);  // Xem dữ liệu đã populate chưa\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n"
                },
                {
                    "date": 1739731538027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,12 @@\n \r\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n-    const products = await Product.find().populate(\"brand\", \"name\");\r\n+    const products = await Product.find().populate({\r\n+      path: \"brand\",\r\n+      select: \"name\",\r\n+    });\r\n     console.log(products);  // Xem dữ liệu đã populate chưa\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n"
                },
                {
                    "date": 1739795118267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,9 @@\n \r\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n-    const products = await Product.find().populate({\r\n-      path: \"brand\",\r\n-      select: \"name\",\r\n-    });\r\n+    const products = await Product.find()\r\n     console.log(products);  // Xem dữ liệu đã populate chưa\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n"
                },
                {
                    "date": 1739799190131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,11 @@\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n+      .populate(\"brand\", \"name\") // Populate chỉ lấy trường \"name\"\r\n+      .populate(\"categories\", \"name\");\r\n+\r\n     console.log(products);  // Xem dữ liệu đã populate chưa\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n"
                },
                {
                    "date": 1739799556862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,16 +5,24 @@\n \r\n // CREATE: Thêm mới sản phẩm\r\n router.post(\"/\", async (req, res) => {\r\n   try {\r\n-    const product = new Product(req.body);\r\n+    const { brand, categories, ...otherData } = req.body;\r\n+\r\n+    const product = new Product({\r\n+      ...otherData,\r\n+      brand: new mongoose.Types.ObjectId(brand), // Chuyển brand thành ObjectId\r\n+      categories: categories.map(id => new mongoose.Types.ObjectId(id)) // Chuyển categories thành ObjectId\r\n+    });\r\n+\r\n     await product.save();\r\n     res.status(201).json(product);\r\n   } catch (err) {\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n+\r\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n"
                },
                {
                    "date": 1739799650437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,12 +7,15 @@\n router.post(\"/\", async (req, res) => {\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n+    // Kiểm tra nếu categories không phải là mảng hoặc rỗng thì gán mặc định []\r\n+    const categoryArray = Array.isArray(categories) ? categories : [];\r\n+\r\n     const product = new Product({\r\n       ...otherData,\r\n-      brand: new mongoose.Types.ObjectId(brand), // Chuyển brand thành ObjectId\r\n-      categories: categories.map(id => new mongoose.Types.ObjectId(id)) // Chuyển categories thành ObjectId\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null, // Chỉ tạo ObjectId nếu có brand\r\n+      categories: categoryArray.map(id => new mongoose.Types.ObjectId(id)) // Chuyển các category thành ObjectId\r\n     });\r\n \r\n     await product.save();\r\n     res.status(201).json(product);\r\n@@ -21,8 +24,9 @@\n   }\r\n });\r\n \r\n \r\n+\r\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n"
                },
                {
                    "date": 1739799662780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,15 +42,27 @@\n \r\n // UPDATE: Cập nhật thông tin sản phẩm\r\n router.put(\"/:id\", async (req, res) => {\r\n   try {\r\n-    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    const { brand, categories, ...otherData } = req.body;\r\n+\r\n+    const updatedData = {\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      categories: Array.isArray(categories) ? categories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n+    };\r\n+\r\n+    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n+      .populate(\"brand\", \"name\")\r\n+      .populate(\"categories\", \"name\");\r\n+\r\n     res.status(200).json(updatedProduct);\r\n   } catch (err) {\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n+\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1739799683253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,8 @@\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1739800582545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n+\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1739800595845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,8 @@\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1739800844620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n       categories: Array.isArray(categories) ? categories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n     };\r\n \r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n-      .populate(\"brand\", \"name\")\r\n-      .populate(\"categories\", \"name\");\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\")\r\n \r\n     res.status(200).json(updatedProduct);\r\n   } catch (err) {\r\n     res.status(400).json({ message: err.message });\r\n"
                },
                {
                    "date": 1739801054078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,11 +29,8 @@\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n-      .populate(\"brand\", \"name\") // Populate chỉ lấy trường \"name\"\r\n-      .populate(\"categories\", \"name\");\r\n-\r\n     console.log(products);  // Xem dữ liệu đã populate chưa\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n"
                },
                {
                    "date": 1739803535075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,33 @@\n });\r\n \r\n \r\n \r\n-// READ: Lấy tất cả sản phẩm\r\n+// READ: Lấy tất cả sản phẩm với thông tin đầy đủ của brand và categories\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n-    const products = await Product.find()\r\n-    console.log(products);  // Xem dữ liệu đã populate chưa\r\n-    res.status(200).json(products);\r\n+    const products = await Product.find();\r\n+\r\n+    // Lấy thông tin đầy đủ của brand và categories\r\n+    const brands = await Brand.find();\r\n+    const categories = await Category.find();\r\n+\r\n+    // Kết hợp thông tin chi tiết vào từng sản phẩm\r\n+    const productsWithDetails = products.map(product => {\r\n+      const brand = brands.find(b => b._id.toString() === product.brand.toString());\r\n+      const categoryNames = product.categories.map(categoryId => {\r\n+        const category = categories.find(c => c._id.toString() === categoryId.toString());\r\n+        return category ? category.name : \"Unknown\";\r\n+      });\r\n+\r\n+      return {\r\n+        ...product.toObject(),\r\n+        brand: brand ? brand.name : \"Unknown\",\r\n+        categories: categoryNames,\r\n+      };\r\n+    });\r\n+\r\n+    res.status(200).json(productsWithDetails);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n"
                },
                {
                    "date": 1739803749638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,33 +25,14 @@\n });\r\n \r\n \r\n \r\n-// READ: Lấy tất cả sản phẩm với thông tin đầy đủ của brand và categories\r\n+// READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n-    const products = await Product.find();\r\n-\r\n-    // Lấy thông tin đầy đủ của brand và categories\r\n-    const brands = await Brand.find();\r\n-    const categories = await Category.find();\r\n-\r\n-    // Kết hợp thông tin chi tiết vào từng sản phẩm\r\n-    const productsWithDetails = products.map(product => {\r\n-      const brand = brands.find(b => b._id.toString() === product.brand.toString());\r\n-      const categoryNames = product.categories.map(categoryId => {\r\n-        const category = categories.find(c => c._id.toString() === categoryId.toString());\r\n-        return category ? category.name : \"Unknown\";\r\n-      });\r\n-\r\n-      return {\r\n-        ...product.toObject(),\r\n-        brand: brand ? brand.name : \"Unknown\",\r\n-        categories: categoryNames,\r\n-      };\r\n-    });\r\n-\r\n-    res.status(200).json(productsWithDetails);\r\n+    const products = await Product.find()\r\n+    console.log(products);  // Xem dữ liệu đã populate chưa\r\n+    res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n"
                },
                {
                    "date": 1739805036313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,29 +36,31 @@\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-// UPDATE: Cập nhật thông tin sản phẩm\r\n router.put(\"/:id\", async (req, res) => {\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n+    // Kiểm tra xem brand và categories có hợp lệ không\r\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n       categories: Array.isArray(categories) ? categories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n     };\r\n \r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n-      .populate(\"categories\")\r\n+      .populate(\"categories\");\r\n \r\n     res.status(200).json(updatedProduct);\r\n   } catch (err) {\r\n+    console.error(\"Cập nhật sản phẩm thất bại\", err);\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n+\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1739805096393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n const express = require(\"express\");\r\n const router = express.Router();\r\n const Product = require(\"../models/Product.js\");\r\n const upload = require(\"../middleware/upload\");\r\n+const mongoose = require('mongoose');\r\n \r\n // CREATE: Thêm mới sản phẩm\r\n router.post(\"/\", async (req, res) => {\r\n   try {\r\n"
                },
                {
                    "date": 1739806337828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n       categories: categoryArray.map(id => new mongoose.Types.ObjectId(id)) // Chuyển các category thành ObjectId\r\n     });\r\n \r\n     await product.save();\r\n-    res.status(201).json(product);\r\n   } catch (err) {\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n"
                },
                {
                    "date": 1739806347502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n       categories: categoryArray.map(id => new mongoose.Types.ObjectId(id)) // Chuyển các category thành ObjectId\r\n     });\r\n \r\n     await product.save();\r\n+    res.status(201).json(product);\r\n   } catch (err) {\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n@@ -30,9 +31,8 @@\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n     console.log(products);  // Xem dữ liệu đã populate chưa\r\n-    res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n"
                },
                {
                    "date": 1739806360186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n     console.log(products);  // Xem dữ liệu đã populate chưa\r\n+    res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n"
                },
                {
                    "date": 1739806368904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n // READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n-    console.log(products);  // Xem dữ liệu đã populate chưa\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1739806404719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \r\n router.put(\"/:id\", async (req, res) => {\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n-\r\n+    console.log(req.body)\r\n     // Kiểm tra xem brand và categories có hợp lệ không\r\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n"
                },
                {
                    "date": 1739806436226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n \r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n-\r\n+      console.log(\"cập nhật thành công!\")\r\n     res.status(200).json(updatedProduct);\r\n   } catch (err) {\r\n     console.error(\"Cập nhật sản phẩm thất bại\", err);\r\n     res.status(400).json({ message: err.message });\r\n"
                },
                {
                    "date": 1739806479801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,19 +39,20 @@\n \r\n router.put(\"/:id\", async (req, res) => {\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n-    console.log(req.body)\r\n+    \r\n     // Kiểm tra xem brand và categories có hợp lệ không\r\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n       categories: Array.isArray(categories) ? categories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n     };\r\n-\r\n+    console.log(updatedData)\r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n+    \r\n       console.log(\"cập nhật thành công!\")\r\n     res.status(200).json(updatedProduct);\r\n   } catch (err) {\r\n     console.error(\"Cập nhật sản phẩm thất bại\", err);\r\n"
                },
                {
                    "date": 1739806713998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n     \r\n-      console.log(\"cập nhật thành công!\")\r\n     res.status(200).json(updatedProduct);\r\n+    console.log(\"Sản phẩm sau cập nhật:\", updatedProduct);\r\n   } catch (err) {\r\n     console.error(\"Cập nhật sản phẩm thất bại\", err);\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1739807002883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,12 @@\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n       categories: Array.isArray(categories) ? categories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n     };\r\n     console.log(updatedData)\r\n+    const product = await Product.findById(req.params.id);\r\n+    console.log(\"Sản phẩm trong database:\", product);\r\n+\r\n+\r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n     \r\n"
                },
                {
                    "date": 1739807066737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product.js\");\r\n+const upload = require(\"../middleware/upload\");\r\n+const mongoose = require('mongoose');\r\n+\r\n+// CREATE: Thêm mới sản phẩm\r\n+router.post(\"/\", async (req, res) => {\r\n+  try {\r\n+    const { brand, categories, ...otherData } = req.body;\r\n+\r\n+    // Kiểm tra nếu categories không phải là mảng hoặc rỗng thì gán mặc định []\r\n+    const categoryArray = Array.isArray(categories) ? categories : [];\r\n+\r\n+    const product = new Product({\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null, // Chỉ tạo ObjectId nếu có brand\r\n+      categories: categoryArray.map(id => new mongoose.Types.ObjectId(id)) // Chuyển các category thành ObjectId\r\n+    });\r\n+\r\n+    await product.save();\r\n+    res.status(201).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+// READ: Lấy tất cả sản phẩm\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find()\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+router.put(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const { brand, categories, ...otherData } = req.body;\r\n+    \r\n+    // Kiểm tra xem brand và categories có hợp lệ không\r\n+    const updatedData = {\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      categories: Array.isArray(categories) ? categories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n+    };\r\n+    console.log(req.params.id)\r\n+    const product = await Product.findById(req.params.id);\r\n+    console.log(\"Sản phẩm trong database:\", product);\r\n+\r\n+\r\n+    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+    \r\n+    res.status(200).json(updatedProduct);\r\n+    console.log(\"Sản phẩm sau cập nhật:\", updatedProduct);\r\n+  } catch (err) {\r\n+    console.error(\"Cập nhật sản phẩm thất bại\", err);\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+// DELETE: Xóa sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n+router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    }\r\n+\r\n+    res.json({\r\n+      message: \"Upload successful\",\r\n+      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Upload failed\" });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1739945513514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,18 +26,22 @@\n });\r\n \r\n \r\n \r\n-// READ: Lấy tất cả sản phẩm\r\n+// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n+      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n+      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n+\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n+\r\n router.put(\"/:id\", async (req, res) => {\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n     \r\n@@ -93,100 +97,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product.js\");\r\n-const upload = require(\"../middleware/upload\");\r\n-const mongoose = require('mongoose');\r\n-\r\n-// CREATE: Thêm mới sản phẩm\r\n-router.post(\"/\", async (req, res) => {\r\n-  try {\r\n-    const { brand, categories, ...otherData } = req.body;\r\n-\r\n-    // Kiểm tra nếu categories không phải là mảng hoặc rỗng thì gán mặc định []\r\n-    const categoryArray = Array.isArray(categories) ? categories : [];\r\n-\r\n-    const product = new Product({\r\n-      ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null, // Chỉ tạo ObjectId nếu có brand\r\n-      categories: categoryArray.map(id => new mongoose.Types.ObjectId(id)) // Chuyển các category thành ObjectId\r\n-    });\r\n-\r\n-    await product.save();\r\n-    res.status(201).json(product);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-// READ: Lấy tất cả sản phẩm\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find()\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-router.put(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const { brand, categories, ...otherData } = req.body;\r\n-    \r\n-    // Kiểm tra xem brand và categories có hợp lệ không\r\n-    const updatedData = {\r\n-      ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: Array.isArray(categories) ? categories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n-    };\r\n-    console.log(updatedData)\r\n-    const product = await Product.findById(req.params.id);\r\n-    console.log(\"Sản phẩm trong database:\", product);\r\n-\r\n-\r\n-    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-    \r\n-    res.status(200).json(updatedProduct);\r\n-    console.log(\"Sản phẩm sau cập nhật:\", updatedProduct);\r\n-  } catch (err) {\r\n-    console.error(\"Cập nhật sản phẩm thất bại\", err);\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-\r\n-// DELETE: Xóa sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-\r\n-// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n-router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"No file uploaded\" });\r\n-    }\r\n-\r\n-    res.json({\r\n-      message: \"Upload successful\",\r\n-      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Upload failed\" });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1739946113996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,36 +40,40 @@\n   }\r\n });\r\n \r\n \r\n-router.put(\"/:id\", async (req, res) => {\r\n+const updateProduct = async (req, res) => {\r\n   try {\r\n-    const { brand, categories, ...otherData } = req.body;\r\n-    \r\n-    // Kiểm tra xem brand và categories có hợp lệ không\r\n-    const updatedData = {\r\n-      ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: Array.isArray(categories) ? categories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n-    };\r\n-    console.log(req.params.id)\r\n-    const product = await Product.findById(req.params.id);\r\n-    console.log(\"Sản phẩm trong database:\", product);\r\n+    const { name, price, brand, quantity, category } = req.body;\r\n \r\n+    // Chuyển category từ JSON string thành mảng\r\n+    const parsedCategories = category ? JSON.parse(category) : [];\r\n \r\n-    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-    \r\n-    res.status(200).json(updatedProduct);\r\n-    console.log(\"Sản phẩm sau cập nhật:\", updatedProduct);\r\n-  } catch (err) {\r\n-    console.error(\"Cập nhật sản phẩm thất bại\", err);\r\n-    res.status(400).json({ message: err.message });\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      {\r\n+        name,\r\n+        price,\r\n+        brand,\r\n+        quantity,\r\n+        categories: parsedCategories, // Đảm bảo lưu đúng định dạng\r\n+      },\r\n+      { new: true }\r\n+    );\r\n+\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.json(updatedProduct);\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi khi cập nhật sản phẩm:\", error);\r\n+    res.status(500).json({ message: \"Lỗi server\", error: error.message });\r\n   }\r\n-});\r\n+};\r\n \r\n \r\n+\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1739946208356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,37 +40,40 @@\n   }\r\n });\r\n \r\n \r\n-const updateProduct = async (req, res) => {\r\n+router.put(\"/:id\", async (req, res) => {\r\n   try {\r\n-    const { name, price, brand, quantity, category } = req.body;\r\n+    const { brand, categories, ...otherData } = req.body;\r\n \r\n-    // Chuyển category từ JSON string thành mảng\r\n-    const parsedCategories = category ? JSON.parse(category) : [];\r\n+    console.log(\"Dữ liệu từ client:\", req.body); // Kiểm tra dữ liệu nhận được\r\n \r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      {\r\n-        name,\r\n-        price,\r\n-        brand,\r\n-        quantity,\r\n-        categories: parsedCategories, // Đảm bảo lưu đúng định dạng\r\n-      },\r\n-      { new: true }\r\n-    );\r\n+    // Kiểm tra nếu categories là string thì parse JSON\r\n+    const parsedCategories = typeof categories === \"string\" ? JSON.parse(categories) : categories;\r\n \r\n+    const updatedData = {\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      categories: Array.isArray(parsedCategories) ? parsedCategories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n+    };\r\n+\r\n+    console.log(\"Dữ liệu sau xử lý:\", updatedData);\r\n+\r\n+    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n     if (!updatedProduct) {\r\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n \r\n-    res.json(updatedProduct);\r\n-  } catch (error) {\r\n-    console.error(\"Lỗi khi cập nhật sản phẩm:\", error);\r\n-    res.status(500).json({ message: \"Lỗi server\", error: error.message });\r\n+    res.status(200).json(updatedProduct);\r\n+    console.log(\"Sản phẩm sau cập nhật:\", updatedProduct);\r\n+  } catch (err) {\r\n+    console.error(\"Lỗi khi cập nhật sản phẩm\", err);\r\n+    res.status(400).json({ message: err.message });\r\n   }\r\n-};\r\n+});\r\n \r\n \r\n \r\n // DELETE: Xóa sản phẩm\r\n"
                },
                {
                    "date": 1739946326532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,15 +40,14 @@\n   }\r\n });\r\n \r\n \r\n-router.put(\"/:id\", async (req, res) => {\r\n+router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n   try {\r\n+    console.log(\"Dữ liệu từ client:\", req.body);\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n-    console.log(\"Dữ liệu từ client:\", req.body); // Kiểm tra dữ liệu nhận được\r\n-\r\n-    // Kiểm tra nếu categories là string thì parse JSON\r\n+    // Nếu categories là JSON string, thì parse nó\r\n     const parsedCategories = typeof categories === \"string\" ? JSON.parse(categories) : categories;\r\n \r\n     const updatedData = {\r\n       ...otherData,\r\n@@ -66,17 +65,17 @@\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n \r\n     res.status(200).json(updatedProduct);\r\n-    console.log(\"Sản phẩm sau cập nhật:\", updatedProduct);\r\n   } catch (err) {\r\n     console.error(\"Lỗi khi cập nhật sản phẩm\", err);\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n \r\n \r\n+\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1739946532544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,14 +40,15 @@\n   }\r\n });\r\n \r\n \r\n-router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n+router.put(\"/:id\", async (req, res) => {\r\n   try {\r\n-    console.log(\"Dữ liệu từ client:\", req.body);\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n-    // Nếu categories là JSON string, thì parse nó\r\n+    console.log(\"Dữ liệu từ client:\", req.body); // Kiểm tra dữ liệu nhận được\r\n+\r\n+    // Kiểm tra nếu categories là string thì parse JSON\r\n     const parsedCategories = typeof categories === \"string\" ? JSON.parse(categories) : categories;\r\n \r\n     const updatedData = {\r\n       ...otherData,\r\n@@ -65,17 +66,17 @@\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n \r\n     res.status(200).json(updatedProduct);\r\n+    console.log(\"Sản phẩm sau cập nhật:\", updatedProduct);\r\n   } catch (err) {\r\n     console.error(\"Lỗi khi cập nhật sản phẩm\", err);\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n \r\n \r\n-\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1739946541084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,57 +26,46 @@\n });\r\n \r\n \r\n \r\n-// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n+// READ: Lấy tất cả sản phẩm\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n-      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n-      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n-\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-\r\n router.put(\"/:id\", async (req, res) => {\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n-\r\n-    console.log(\"Dữ liệu từ client:\", req.body); // Kiểm tra dữ liệu nhận được\r\n-\r\n-    // Kiểm tra nếu categories là string thì parse JSON\r\n-    const parsedCategories = typeof categories === \"string\" ? JSON.parse(categories) : categories;\r\n-\r\n+    \r\n+    // Kiểm tra xem brand và categories có hợp lệ không\r\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: Array.isArray(parsedCategories) ? parsedCategories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n+      categories: Array.isArray(categories) ? categories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n     };\r\n+    console.log(req.params.id)\r\n+    const product = await Product.findById(req.params.id);\r\n+    console.log(\"Sản phẩm trong database:\", product);\r\n \r\n-    console.log(\"Dữ liệu sau xử lý:\", updatedData);\r\n \r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n-\r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n+    \r\n     res.status(200).json(updatedProduct);\r\n     console.log(\"Sản phẩm sau cập nhật:\", updatedProduct);\r\n   } catch (err) {\r\n-    console.error(\"Lỗi khi cập nhật sản phẩm\", err);\r\n+    console.error(\"Cập nhật sản phẩm thất bại\", err);\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n \r\n-\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1739946546785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,46 +26,56 @@\n });\r\n \r\n \r\n \r\n-// READ: Lấy tất cả sản phẩm\r\n+// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n+      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n+      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n+\r\n     res.status(200).json(products);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-router.put(\"/:id\", async (req, res) => {\r\n+\r\n+router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n   try {\r\n+    console.log(\"Dữ liệu từ client:\", req.body);\r\n     const { brand, categories, ...otherData } = req.body;\r\n-    \r\n-    // Kiểm tra xem brand và categories có hợp lệ không\r\n+\r\n+    // Nếu categories là JSON string, thì parse nó\r\n+    const parsedCategories = typeof categories === \"string\" ? JSON.parse(categories) : categories;\r\n+\r\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: Array.isArray(categories) ? categories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n+      categories: Array.isArray(parsedCategories) ? parsedCategories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n     };\r\n-    console.log(req.params.id)\r\n-    const product = await Product.findById(req.params.id);\r\n-    console.log(\"Sản phẩm trong database:\", product);\r\n \r\n+    console.log(\"Dữ liệu sau xử lý:\", updatedData);\r\n \r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n-    \r\n+\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n     res.status(200).json(updatedProduct);\r\n-    console.log(\"Sản phẩm sau cập nhật:\", updatedProduct);\r\n   } catch (err) {\r\n-    console.error(\"Cập nhật sản phẩm thất bại\", err);\r\n+    console.error(\"Lỗi khi cập nhật sản phẩm\", err);\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n \r\n+\r\n+\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1739947081529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,14 +46,19 @@\n     console.log(\"Dữ liệu từ client:\", req.body);\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n     // Nếu categories là JSON string, thì parse nó\r\n-    const parsedCategories = typeof categories === \"string\" ? JSON.parse(categories) : categories;\r\n+    const parsedCategories =\r\n+      typeof req.body.category === \"string\"\r\n+        ? req.body.category.split(\",\").map(id => id.trim())  // Chuyển chuỗi CSV thành mảng\r\n+        : Array.isArray(req.body.category)\r\n+          ? req.body.category  // Nếu đã là mảng thì giữ nguyên\r\n+          : [];\r\n \r\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: Array.isArray(parsedCategories) ? parsedCategories.map(id => new mongoose.Types.ObjectId(id)) : [],\r\n+      categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),  // Chuyển ID thành ObjectId\r\n     };\r\n \r\n     console.log(\"Dữ liệu sau xử lý:\", updatedData);\r\n \r\n"
                },
                {
                    "date": 1739947225814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,12 @@\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n       categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),  // Chuyển ID thành ObjectId\r\n+      image: (!req.body.image || req.body.image === \"null\") ? [] : req.body.image  // Kiểm tra null\r\n     };\r\n \r\n+\r\n     console.log(\"Dữ liệu sau xử lý:\", updatedData);\r\n \r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n"
                },
                {
                    "date": 1739947851089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,11 +63,16 @@\n \r\n \r\n     console.log(\"Dữ liệu sau xử lý:\", updatedData);\r\n \r\n-    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      { \r\n+        ...req.body, \r\n+        category: req.body.category.map(cat => new mongoose.Types.ObjectId(cat)) // ❌ Lỗi nếu category là string\r\n+      },\r\n+      { new: true }\r\n+    );    \r\n \r\n     if (!updatedProduct) {\r\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n"
                },
                {
                    "date": 1739947870036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,12 +67,12 @@\n     const updatedProduct = await Product.findByIdAndUpdate(\r\n       req.params.id,\r\n       { \r\n         ...req.body, \r\n-        category: req.body.category.map(cat => new mongoose.Types.ObjectId(cat)) // ❌ Lỗi nếu category là string\r\n+        category: JSON.parse(req.body.category).map(cat => new mongoose.Types.ObjectId(cat)) // ✅ Chuyển JSON string thành mảng ObjectId\r\n       },\r\n       { new: true }\r\n-    );    \r\n+    );\r\n \r\n     if (!updatedProduct) {\r\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n"
                },
                {
                    "date": 1739947893382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,16 +63,11 @@\n \r\n \r\n     console.log(\"Dữ liệu sau xử lý:\", updatedData);\r\n \r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      { \r\n-        ...req.body, \r\n-        category: JSON.parse(req.body.category).map(cat => new mongoose.Types.ObjectId(cat)) // ✅ Chuyển JSON string thành mảng ObjectId\r\n-      },\r\n-      { new: true }\r\n-    );\r\n+    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n \r\n     if (!updatedProduct) {\r\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n"
                },
                {
                    "date": 1739947934727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n \r\n     // Nếu categories là JSON string, thì parse nó\r\n     const parsedCategories =\r\n       typeof req.body.category === \"string\"\r\n-        ? req.body.category.split(\",\").map(id => id.trim())  // Chuyển chuỗi CSV thành mảng\r\n+        ? req.body.category.split(\",\").map(id => id.trim())  // ❌ Không đảm bảo ObjectId hợp lệ\r\n         : Array.isArray(req.body.category)\r\n-          ? req.body.category  // Nếu đã là mảng thì giữ nguyên\r\n+          ? req.body.category\r\n           : [];\r\n \r\n     const updatedData = {\r\n       ...otherData,\r\n"
                },
                {
                    "date": 1739947941541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,18 +48,18 @@\n \r\n     // Nếu categories là JSON string, thì parse nó\r\n     const parsedCategories =\r\n       typeof req.body.category === \"string\"\r\n-        ? req.body.category.split(\",\").map(id => id.trim())  // ❌ Không đảm bảo ObjectId hợp lệ\r\n+        ? JSON.parse(req.body.category)  // ✅ Chuyển JSON string thành mảng\r\n         : Array.isArray(req.body.category)\r\n           ? req.body.category\r\n           : [];\r\n \r\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),  // Chuyển ID thành ObjectId\r\n-      image: (!req.body.image || req.body.image === \"null\") ? [] : req.body.image  // Kiểm tra null\r\n+      categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),  // ✅ Chuyển ID thành ObjectId\r\n+      image: (!req.body.image || req.body.image === \"null\") ? [] : req.body.image\r\n     };\r\n \r\n \r\n     console.log(\"Dữ liệu sau xử lý:\", updatedData);\r\n"
                },
                {
                    "date": 1739948200533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,16 +53,19 @@\n         : Array.isArray(req.body.category)\r\n           ? req.body.category\r\n           : [];\r\n \r\n+    const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),  // ✅ Chuyển ID thành ObjectId\r\n-      image: (!req.body.image || req.body.image === \"null\") ? [] : req.body.image\r\n+      categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),\r\n+      image: req.body.image && req.body.image !== \"null\" ? req.body.image : [defaultImage], // ✅ Đặt ảnh mặc định nếu không có\r\n     };\r\n \r\n \r\n+\r\n     console.log(\"Dữ liệu sau xử lý:\", updatedData);\r\n \r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n"
                },
                {
                    "date": 1739948228903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n \r\n \r\n router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n   try {\r\n-    console.log(\"Dữ liệu từ client:\", req.body);\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n     // Nếu categories là JSON string, thì parse nó\r\n     const parsedCategories =\r\n@@ -62,12 +61,8 @@\n       categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),\r\n       image: req.body.image && req.body.image !== \"null\" ? req.body.image : [defaultImage], // ✅ Đặt ảnh mặc định nếu không có\r\n     };\r\n \r\n-\r\n-\r\n-    console.log(\"Dữ liệu sau xử lý:\", updatedData);\r\n-\r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n \r\n@@ -76,9 +71,8 @@\n     }\r\n \r\n     res.status(200).json(updatedProduct);\r\n   } catch (err) {\r\n-    console.error(\"Lỗi khi cập nhật sản phẩm\", err);\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n"
                },
                {
                    "date": 1739948782283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n     // Kiểm tra nếu categories không phải là mảng hoặc rỗng thì gán mặc định []\r\n-    const categoryArray = Array.isArray(categories) ? categories : [];\r\n+    const categoryArray = typeof categories === \"string\" ? JSON.parse(categories) : (Array.isArray(categories) ? categories : []);\r\n \r\n     const product = new Product({\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null, // Chỉ tạo ObjectId nếu có brand\r\n"
                },
                {
                    "date": 1739949037645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,20 +3,25 @@\n const Product = require(\"../models/Product.js\");\r\n const upload = require(\"../middleware/upload\");\r\n const mongoose = require('mongoose');\r\n \r\n-// CREATE: Thêm mới sản phẩm\r\n router.post(\"/\", async (req, res) => {\r\n+  console.log(\"Dữ liệu nhận được từ client:\", req.body);\r\n+\r\n   try {\r\n-    const { brand, categories, ...otherData } = req.body;\r\n+    const { brand, categories, price, name, code, ...otherData } = req.body;\r\n \r\n-    // Kiểm tra nếu categories không phải là mảng hoặc rỗng thì gán mặc định []\r\n+    if (!name || !price || !code || !brand) {\r\n+      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n+    }\r\n+\r\n     const categoryArray = typeof categories === \"string\" ? JSON.parse(categories) : (Array.isArray(categories) ? categories : []);\r\n \r\n     const product = new Product({\r\n       ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null, // Chỉ tạo ObjectId nếu có brand\r\n-      categories: categoryArray.map(id => new mongoose.Types.ObjectId(id)) // Chuyển các category thành ObjectId\r\n+      price: Number(price), // Chuyển `price` về số\r\n+      brand: new mongoose.Types.ObjectId(brand),\r\n+      categories: categoryArray.map(id => new mongoose.Types.ObjectId(id)),\r\n     });\r\n \r\n     await product.save();\r\n     res.status(201).json(product);\r\n@@ -26,8 +31,9 @@\n });\r\n \r\n \r\n \r\n+\r\n // READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n"
                },
                {
                    "date": 1739949465823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,37 +3,42 @@\n const Product = require(\"../models/Product.js\");\r\n const upload = require(\"../middleware/upload\");\r\n const mongoose = require('mongoose');\r\n \r\n-router.post(\"/\", async (req, res) => {\r\n-  console.log(\"Dữ liệu nhận được từ client:\", req.body);\r\n-\r\n+router.post(\"/api/products\", upload.single(\"image\"), async (req, res) => {\r\n   try {\r\n-    const { brand, categories, price, name, code, ...otherData } = req.body;\r\n+    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n+    console.log(\"File upload:\", req.file); // Kiểm tra ảnh có upload không\r\n \r\n-    if (!name || !price || !code || !brand) {\r\n+    if (!req.body.name || !req.body.price || !req.body.code) {\r\n       return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n     }\r\n \r\n-    const categoryArray = typeof categories === \"string\" ? JSON.parse(categories) : (Array.isArray(categories) ? categories : []);\r\n+    const newProduct = {\r\n+      name: req.body.name,\r\n+      price: Number(req.body.price), // Chuyển về số\r\n+      quantity: Number(req.body.quantity),\r\n+      code: req.body.code,\r\n+      brand: req.body.brand,\r\n+      categories: JSON.parse(req.body.categories), // Chuyển JSON string thành mảng\r\n+      image: req.file ? req.file.path : \"\", // Nếu có ảnh thì lấy từ Cloudinary\r\n+    };\r\n \r\n-    const product = new Product({\r\n-      ...otherData,\r\n-      price: Number(price), // Chuyển `price` về số\r\n-      brand: new mongoose.Types.ObjectId(brand),\r\n-      categories: categoryArray.map(id => new mongoose.Types.ObjectId(id)),\r\n-    });\r\n+    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n+    // Lưu vào database (giả sử dùng MongoDB)\r\n+    const product = await Product.create(newProduct);\r\n \r\n-    await product.save();\r\n-    res.status(201).json(product);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n+    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi API:\", error);\r\n+    res.status(500).json({ message: \"Lỗi server!\" });\r\n   }\r\n });\r\n \r\n \r\n \r\n \r\n+\r\n // READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n"
                },
                {
                    "date": 1740063043188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,121 +1,128 @@\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product.js\");\r\n-const upload = require(\"../middleware/upload\");\r\n-const mongoose = require('mongoose');\r\n+import axios from \"axios\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n \r\n-router.post(\"/api/products\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n-    console.log(\"File upload:\", req.file); // Kiểm tra ảnh có upload không\r\n+const AdminProducts = () => {\r\n+  const [products, setProducts] = useState([]);\r\n+  const [brands, setBrands] = useState([]);\r\n+  const [categories, setCategories] = useState([]);\r\n+  const [brandMap, setBrandMap] = useState({});\r\n+  const [searchTerm, setSearchTerm] = useState(\"\");\r\n+  const [filterBrand, setFilterBrand] = useState(\"\");\r\n+  const [editingProduct, setEditingProduct] = useState(null);\r\n+  const [imagePreview, setImagePreview] = useState(null);\r\n+  const [formData, setFormData] = useState({\r\n+    code: \"\",\r\n+    name: \"\",\r\n+    brand: \"\",\r\n+    categories: [],\r\n+    price: 0,\r\n+    quantity: 0,\r\n+    description: \"\",\r\n+    image: [],\r\n+    additionalInfo: { weight: 0, length: 0, width: 0, height: 0 },\r\n+  });\r\n \r\n-    if (!req.body.name || !req.body.price || !req.body.code) {\r\n-      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n+  useEffect(() => {\r\n+    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n+    fetchData();\r\n+  }, []);\r\n+\r\n+  const fetchData = async () => {\r\n+    try {\r\n+      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n+        axios.get(\"http://localhost:5000/api/products\"),\r\n+        axios.get(\"http://localhost:5000/api/brands\"),\r\n+        axios.get(\"http://localhost:5000/api/categories\"),\r\n+      ]);\r\n+      setProducts(productRes.data);\r\n+      setBrands(brandRes.data || []);\r\n+      setCategories(categoryRes.data || []);\r\n+      setBrandMap(\r\n+        brandRes.data.reduce((acc, brand) => {\r\n+          acc[brand._id] = brand.name;\r\n+          return acc;\r\n+        }, {})\r\n+      );\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n     }\r\n+  };\r\n \r\n-    const newProduct = {\r\n-      name: req.body.name,\r\n-      price: Number(req.body.price), // Chuyển về số\r\n-      quantity: Number(req.body.quantity),\r\n-      code: req.body.code,\r\n-      brand: req.body.brand,\r\n-      categories: JSON.parse(req.body.categories), // Chuyển JSON string thành mảng\r\n-      image: req.file ? req.file.path : \"\", // Nếu có ảnh thì lấy từ Cloudinary\r\n-    };\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    const formDataWithImage = new FormData();\r\n+    Object.keys(formData).forEach((key) => {\r\n+      if (key === \"categories\" || key === \"image\") {\r\n+        formDataWithImage.append(key, JSON.stringify(formData[key]));\r\n+      } else if (typeof formData[key] === \"object\" && formData[key] !== null) {\r\n+        Object.entries(formData[key]).forEach(([subKey, value]) => {\r\n+          formDataWithImage.append(`additionalInfo[${subKey}]`, value);\r\n+        });\r\n+      } else {\r\n+        formDataWithImage.append(key, formData[key]);\r\n+      }\r\n+    });\r\n \r\n-    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n-    // Lưu vào database (giả sử dùng MongoDB)\r\n-    const product = await Product.create(newProduct);\r\n+    try {\r\n+      if (editingProduct) {\r\n+        await axios.put(\r\n+          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n+          formDataWithImage,\r\n+          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n+        );\r\n+        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n+      } else {\r\n+        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n+          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n+        });\r\n+        toast.success(\"Thêm sản phẩm thành công!\");\r\n+      }\r\n+      fetchData();\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n+      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    }\r\n+  };\r\n \r\n-    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n-  } catch (error) {\r\n-    console.error(\"Lỗi API:\", error);\r\n-    res.status(500).json({ message: \"Lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find()\r\n-      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n-      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n-\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-\r\n-router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n-  try {\r\n-    const { brand, categories, ...otherData } = req.body;\r\n-\r\n-    // Nếu categories là JSON string, thì parse nó\r\n-    const parsedCategories =\r\n-      typeof req.body.category === \"string\"\r\n-        ? JSON.parse(req.body.category)  // ✅ Chuyển JSON string thành mảng\r\n-        : Array.isArray(req.body.category)\r\n-          ? req.body.category\r\n-          : [];\r\n-\r\n-    const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-\r\n-    const updatedData = {\r\n-      ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),\r\n-      image: req.body.image && req.body.image !== \"null\" ? req.body.image : [defaultImage], // ✅ Đặt ảnh mặc định nếu không có\r\n-    };\r\n-\r\n-    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+  const handleDelete = async (id) => {\r\n+    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+    try {\r\n+      await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+      setProducts(products.filter((product) => product._id !== id));\r\n+      toast.success(\"Xóa sản phẩm thành công!\");\r\n+    } catch (error) {\r\n+      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+      toast.error(\"Không thể xóa sản phẩm!\");\r\n     }\r\n+  };\r\n \r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n+  const handleImageChange = (e) => {\r\n+    const file = e.target.files[0];\r\n+    setFormData({ ...formData, image: [file] });\r\n+    setImagePreview(URL.createObjectURL(file));\r\n+  };\r\n \r\n+  return (\r\n+    <div className=\"container mx-auto p-6\">\r\n+      <form onSubmit={handleSubmit} className=\"space-y-4 bg-white p-4 rounded-lg shadow-lg\">\r\n+        <input type=\"text\" placeholder=\"Tên sản phẩm\" value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} required />\r\n+        <input type=\"text\" placeholder=\"Mã sản phẩm\" value={formData.code} onChange={(e) => setFormData({ ...formData, code: e.target.value })} required />\r\n+        <input type=\"number\" placeholder=\"Giá\" value={formData.price} onChange={(e) => setFormData({ ...formData, price: Number(e.target.value) })} required />\r\n+        <select value={formData.brand} onChange={(e) => setFormData({ ...formData, brand: e.target.value })} required>\r\n+          <option value=\"\">Chọn hãng</option>\r\n+          {brands.map((brand) => (\r\n+            <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n+          ))}\r\n+        </select>\r\n+        <input type=\"file\" onChange={handleImageChange} />\r\n+        {imagePreview && <img src={imagePreview} alt=\"Xem trước\" className=\"h-16\" />}\r\n+        <button type=\"submit\" className=\"bg-blue-500 text-white px-4 py-2 rounded\">{editingProduct ? \"Cập nhật\" : \"Thêm\"}</button>\r\n+      </form>\r\n+      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n+    </div>\r\n+  );\r\n+};\r\n \r\n-\r\n-\r\n-// DELETE: Xóa sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-\r\n-// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n-router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"No file uploaded\" });\r\n-    }\r\n-\r\n-    res.json({\r\n-      message: \"Upload successful\",\r\n-      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Upload failed\" });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n+export default AdminProducts;\r\n"
                },
                {
                    "date": 1740063086797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,128 +1,117 @@\n-import axios from \"axios\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { ToastContainer, toast } from \"react-toastify\";\r\n-import \"react-toastify/dist/ReactToastify.css\";\r\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product.js\");\r\n+const upload = require(\"../middleware/upload\");\r\n+const mongoose = require('mongoose');\r\n \r\n-const AdminProducts = () => {\r\n-  const [products, setProducts] = useState([]);\r\n-  const [brands, setBrands] = useState([]);\r\n-  const [categories, setCategories] = useState([]);\r\n-  const [brandMap, setBrandMap] = useState({});\r\n-  const [searchTerm, setSearchTerm] = useState(\"\");\r\n-  const [filterBrand, setFilterBrand] = useState(\"\");\r\n-  const [editingProduct, setEditingProduct] = useState(null);\r\n-  const [imagePreview, setImagePreview] = useState(null);\r\n-  const [formData, setFormData] = useState({\r\n-    code: \"\",\r\n-    name: \"\",\r\n-    brand: \"\",\r\n-    categories: [],\r\n-    price: 0,\r\n-    quantity: 0,\r\n-    description: \"\",\r\n-    image: [],\r\n-    additionalInfo: { weight: 0, length: 0, width: 0, height: 0 },\r\n-  });\r\n+router.post(\"/api/products\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n+    console.log(\"File upload:\", req.file); // Kiểm tra ảnh có upload không\r\n \r\n-  useEffect(() => {\r\n-    toast.success(\"Chào mừng đến trang quản lý sản phẩm!\");\r\n-    fetchData();\r\n-  }, []);\r\n-\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      const [productRes, brandRes, categoryRes] = await Promise.all([\r\n-        axios.get(\"http://localhost:5000/api/products\"),\r\n-        axios.get(\"http://localhost:5000/api/brands\"),\r\n-        axios.get(\"http://localhost:5000/api/categories\"),\r\n-      ]);\r\n-      setProducts(productRes.data);\r\n-      setBrands(brandRes.data || []);\r\n-      setCategories(categoryRes.data || []);\r\n-      setBrandMap(\r\n-        brandRes.data.reduce((acc, brand) => {\r\n-          acc[brand._id] = brand.name;\r\n-          return acc;\r\n-        }, {})\r\n-      );\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi tải dữ liệu:\", error);\r\n+    if (!req.body.name || !req.body.price || !req.body.code) {\r\n+      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n     }\r\n-  };\r\n \r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    const formDataWithImage = new FormData();\r\n-    Object.keys(formData).forEach((key) => {\r\n-      if (key === \"categories\" || key === \"image\") {\r\n-        formDataWithImage.append(key, JSON.stringify(formData[key]));\r\n-      } else if (typeof formData[key] === \"object\" && formData[key] !== null) {\r\n-        Object.entries(formData[key]).forEach(([subKey, value]) => {\r\n-          formDataWithImage.append(`additionalInfo[${subKey}]`, value);\r\n-        });\r\n-      } else {\r\n-        formDataWithImage.append(key, formData[key]);\r\n-      }\r\n-    });\r\n+    const newProduct = {\r\n+      name: req.body.name,\r\n+      price: Number(req.body.price), // Chuyển về số\r\n+      quantity: Number(req.body.quantity),\r\n+      code: req.body.code,\r\n+      brand: req.body.brand,\r\n+      categories: JSON.parse(req.body.categories), // Chuyển JSON string thành mảng\r\n+      image: req.file ? req.file.path : \"\", // Nếu có ảnh thì lấy từ Cloudinary\r\n+    };\r\n \r\n-    try {\r\n-      if (editingProduct) {\r\n-        await axios.put(\r\n-          `http://localhost:5000/api/products/${editingProduct._id}`,\r\n-          formDataWithImage,\r\n-          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n-        );\r\n-        toast.success(\"Cập nhật sản phẩm thành công!\");\r\n-      } else {\r\n-        await axios.post(\"http://localhost:5000/api/products\", formDataWithImage, {\r\n-          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-        });\r\n-        toast.success(\"Thêm sản phẩm thành công!\");\r\n-      }\r\n-      fetchData();\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi gửi dữ liệu\", error.response?.data || error.message);\r\n-      toast.error(\"Có lỗi xảy ra khi gửi dữ liệu!\");\r\n+    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n+    // Lưu vào database (giả sử dùng MongoDB)\r\n+    const product = await Product.create(newProduct);\r\n+\r\n+    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi API:\", error);\r\n+    res.status(500).json({ message: \"Lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find()\r\n+      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n+      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n+\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n+  try {\r\n+    const { brand, categories, ...otherData } = req.body;\r\n+\r\n+    // Nếu categories là JSON string, thì parse nó\r\n+    const parsedCategories =\r\n+      typeof req.body.category === \"string\"\r\n+        ? JSON.parse(req.body.category)  // ✅ Chuyển JSON string thành mảng\r\n+        : Array.isArray(req.body.category)\r\n+          ? req.body.category\r\n+          : [];\r\n+\r\n+    const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+\r\n+    const updatedData = {\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),\r\n+      image: req.body.image && req.body.image !== \"null\" ? req.body.image : [defaultImage], // ✅ Đặt ảnh mặc định nếu không có\r\n+    };\r\n+\r\n+    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n-  };\r\n \r\n-  const handleDelete = async (id) => {\r\n-    if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-    try {\r\n-      await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-      setProducts(products.filter((product) => product._id !== id));\r\n-      toast.success(\"Xóa sản phẩm thành công!\");\r\n-    } catch (error) {\r\n-      console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-      toast.error(\"Không thể xóa sản phẩm!\");\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+// DELETE: Xóa sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n+router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n     }\r\n-  };\r\n \r\n-  const handleImageChange = (e) => {\r\n-    const file = e.target.files[0];\r\n-    setFormData({ ...formData, image: [file] });\r\n-    setImagePreview(URL.createObjectURL(file));\r\n-  };\r\n+    res.json({\r\n+      message: \"Upload successful\",\r\n+      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Upload failed\" });\r\n+  }\r\n+});\r\n \r\n-  return (\r\n-    <div className=\"container mx-auto p-6\">\r\n-      <form onSubmit={handleSubmit} className=\"space-y-4 bg-white p-4 rounded-lg shadow-lg\">\r\n-        <input type=\"text\" placeholder=\"Tên sản phẩm\" value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} required />\r\n-        <input type=\"text\" placeholder=\"Mã sản phẩm\" value={formData.code} onChange={(e) => setFormData({ ...formData, code: e.target.value })} required />\r\n-        <input type=\"number\" placeholder=\"Giá\" value={formData.price} onChange={(e) => setFormData({ ...formData, price: Number(e.target.value) })} required />\r\n-        <select value={formData.brand} onChange={(e) => setFormData({ ...formData, brand: e.target.value })} required>\r\n-          <option value=\"\">Chọn hãng</option>\r\n-          {brands.map((brand) => (\r\n-            <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n-          ))}\r\n-        </select>\r\n-        <input type=\"file\" onChange={handleImageChange} />\r\n-        {imagePreview && <img src={imagePreview} alt=\"Xem trước\" className=\"h-16\" />}\r\n-        <button type=\"submit\" className=\"bg-blue-500 text-white px-4 py-2 rounded\">{editingProduct ? \"Cập nhật\" : \"Thêm\"}</button>\r\n-      </form>\r\n-      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdminProducts;\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1740133801604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n     const parsedCategories =\r\n       typeof req.body.category === \"string\"\r\n         ? JSON.parse(req.body.category)  // ✅ Chuyển JSON string thành mảng\r\n         : Array.isArray(req.body.category)\r\n+        \r\n           ? req.body.category\r\n           : [];\r\n \r\n     const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n"
                },
                {
                    "date": 1740133815805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,8 @@\n     const parsedCategories =\r\n       typeof req.body.category === \"string\"\r\n         ? JSON.parse(req.body.category)  // ✅ Chuyển JSON string thành mảng\r\n         : Array.isArray(req.body.category)\r\n-        \r\n           ? req.body.category\r\n           : [];\r\n \r\n     const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n"
                },
                {
                    "date": 1740389043522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,8 @@\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-\r\n router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n@@ -82,11 +81,8 @@\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-\r\n-\r\n-\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1740439809805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,14 @@\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n       categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),\r\n-      image: req.body.image && req.body.image !== \"null\" ? req.body.image : [defaultImage], // ✅ Đặt ảnh mặc định nếu không có\r\n+      image: req.body.image && req.body.image !== \"null\"\r\n+        ? JSON.parse(req.body.image)\r\n+        : [defaultImage], // Gán ảnh mặc định nếu không có\r\n     };\r\n \r\n+\r\n     const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n \r\n"
                },
                {
                    "date": 1740440318188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,11 @@\n   }\r\n });\r\n \r\n router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n+\r\n+\r\n+\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n     // Nếu categories là JSON string, thì parse nó\r\n@@ -70,16 +73,19 @@\n         : [defaultImage], // Gán ảnh mặc định nếu không có\r\n     };\r\n \r\n \r\n-    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, updatedData, { new: true })\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id, \r\n+      updatedData, \r\n+      { new: true }\r\n+    )\r\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n \r\n     if (!updatedProduct) {\r\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n-\r\n     res.status(200).json(updatedProduct);\r\n   } catch (err) {\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1740440406645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,10 +82,12 @@\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n \r\n     if (!updatedProduct) {\r\n+      console.log(updatedProduct)\r\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n+\r\n     res.status(200).json(updatedProduct);\r\n   } catch (err) {\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1740440433555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n \r\n     if (!updatedProduct) {\r\n-      console.log(updatedProduct)\r\n+      console.log(\"hello+ \"+ updatedProduct)\r\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n \r\n     res.status(200).json(updatedProduct);\r\n"
                },
                {
                    "date": 1740440453524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,10 @@\n });\r\n \r\n router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n \r\n+  console.log(\"hello+ \"+ req)\r\n \r\n-\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n     // Nếu categories là JSON string, thì parse nó\r\n"
                },
                {
                    "date": 1740440871350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,11 +47,8 @@\n   }\r\n });\r\n \r\n router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n-\r\n-  console.log(\"hello+ \"+ req)\r\n-\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n \r\n     // Nếu categories là JSON string, thì parse nó\r\n"
                },
                {
                    "date": 1740441100149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,5 +117,22 @@\n     res.status(500).json({ message: \"Upload failed\" });\r\n   }\r\n });\r\n \r\n+router.get(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id)\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1740471288507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,9 @@\n       image: req.body.image && req.body.image !== \"null\"\r\n         ? JSON.parse(req.body.image)\r\n         : [defaultImage], // Gán ảnh mặc định nếu không có\r\n     };\r\n-\r\n-\r\n+    console.log(updatedData)\r\n     const updatedProduct = await Product.findByIdAndUpdate(\r\n       req.params.id, \r\n       updatedData, \r\n       { new: true }\r\n"
                },
                {
                    "date": 1740471332313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         ? JSON.parse(req.body.category)  // ✅ Chuyển JSON string thành mảng\r\n         : Array.isArray(req.body.category)\r\n           ? req.body.category\r\n           : [];\r\n-\r\n+    console.log(parsedCategories)\r\n     const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n \r\n     const updatedData = {\r\n       ...otherData,\r\n"
                },
                {
                    "date": 1740471401083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,17 +49,17 @@\n \r\n router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n   try {\r\n     const { brand, categories, ...otherData } = req.body;\r\n-\r\n+    console.log(req.body)\r\n     // Nếu categories là JSON string, thì parse nó\r\n     const parsedCategories =\r\n       typeof req.body.category === \"string\"\r\n         ? JSON.parse(req.body.category)  // ✅ Chuyển JSON string thành mảng\r\n         : Array.isArray(req.body.category)\r\n           ? req.body.category\r\n           : [];\r\n-    console.log(parsedCategories)\r\n+    \r\n     const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n \r\n     const updatedData = {\r\n       ...otherData,\r\n"
                },
                {
                    "date": 1740471563290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,12 +52,12 @@\n     const { brand, categories, ...otherData } = req.body;\r\n     console.log(req.body)\r\n     // Nếu categories là JSON string, thì parse nó\r\n     const parsedCategories =\r\n-      typeof req.body.category === \"string\"\r\n-        ? JSON.parse(req.body.category)  // ✅ Chuyển JSON string thành mảng\r\n-        : Array.isArray(req.body.category)\r\n-          ? req.body.category\r\n+      typeof req.body.categories === \"string\"\r\n+        ? JSON.parse(req.body.categories)  // ✅ Chuyển JSON string thành mảng\r\n+        : Array.isArray(req.body.categories)\r\n+          ? req.body.categories\r\n           : [];\r\n     \r\n     const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n \r\n"
                },
                {
                    "date": 1740473706037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,8 @@\n       image: req.body.image && req.body.image !== \"null\"\r\n         ? JSON.parse(req.body.image)\r\n         : [defaultImage], // Gán ảnh mặc định nếu không có\r\n     };\r\n-    console.log(updatedData)\r\n     const updatedProduct = await Product.findByIdAndUpdate(\r\n       req.params.id, \r\n       updatedData, \r\n       { new: true }\r\n"
                },
                {
                    "date": 1740480375672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,40 +46,51 @@\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-router.put(\"/:id\", upload.none(), async (req, res) => { // Đọc form-data\r\n+router.put(\"/:id\", upload.none(), async (req, res) => {\r\n   try {\r\n-    const { brand, categories, ...otherData } = req.body;\r\n-    console.log(req.body)\r\n-    // Nếu categories là JSON string, thì parse nó\r\n+    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n+    console.log(req.body);\r\n+\r\n+    // Xử lý categories\r\n     const parsedCategories =\r\n-      typeof req.body.categories === \"string\"\r\n-        ? JSON.parse(req.body.categories)  // ✅ Chuyển JSON string thành mảng\r\n-        : Array.isArray(req.body.categories)\r\n-          ? req.body.categories\r\n-          : [];\r\n-    \r\n+      typeof categories === \"string\"\r\n+        ? JSON.parse(categories)\r\n+        : Array.isArray(categories)\r\n+        ? categories\r\n+        : [];\r\n+\r\n+    // Xử lý hình ảnh\r\n     const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+    const parsedImage =\r\n+      req.body.image && req.body.image !== \"null\"\r\n+        ? JSON.parse(req.body.image)\r\n+        : [defaultImage];\r\n \r\n+    // Xử lý additionalInfo\r\n+    const parsedAdditionalInfo =\r\n+      typeof additionalInfo === \"string\"\r\n+        ? JSON.parse(additionalInfo)\r\n+        : {};\r\n+\r\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: parsedCategories.map(id => new mongoose.Types.ObjectId(id)),\r\n-      image: req.body.image && req.body.image !== \"null\"\r\n-        ? JSON.parse(req.body.image)\r\n-        : [defaultImage], // Gán ảnh mặc định nếu không có\r\n+      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      image: parsedImage,\r\n+      additionalInfo: parsedAdditionalInfo, // Gán vào DB dưới dạng object\r\n     };\r\n+\r\n     const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id, \r\n-      updatedData, \r\n+      req.params.id,\r\n+      updatedData,\r\n       { new: true }\r\n     )\r\n       .populate(\"brand\")\r\n       .populate(\"categories\");\r\n \r\n     if (!updatedProduct) {\r\n-      console.log(\"hello+ \"+ updatedProduct)\r\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n \r\n     res.status(200).json(updatedProduct);\r\n@@ -87,8 +98,9 @@\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n+\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1740481986886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product.js\");\r\n+const upload = require(\"../middleware/upload\");\r\n+const mongoose = require('mongoose');\r\n+\r\n+router.post(\"/api/products\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n+    console.log(\"File upload:\", req.file); // Kiểm tra ảnh có upload không\r\n+\r\n+    if (!req.body.name || !req.body.price || !req.body.code) {\r\n+      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n+    }\r\n+\r\n+    // Parse các trường cần thiết\r\n+    const categories = JSON.parse(req.body.categories || \"[]\");\r\n+    const additionalInfo = JSON.parse(req.body.additionalInfo || \"{}\");\r\n+\r\n+    // Tạo đối tượng sản phẩm mới\r\n+    const newProduct = new Product({\r\n+      name: req.body.name,\r\n+      price: Number(req.body.price), // Chuyển về số\r\n+      quantity: Number(req.body.quantity),\r\n+      code: req.body.code,\r\n+      brand: req.body.brand,\r\n+      categories: categories.map(id => new mongoose.Types.ObjectId(id)),\r\n+      description: req.body.description,\r\n+      image: req.file ? req.file.path : \"\", // Nếu có ảnh thì lấy từ Cloudinary\r\n+      additionalInfo: {\r\n+        weight: Number(additionalInfo.weight || 0),\r\n+        length: Number(additionalInfo.length || 0),\r\n+        width: Number(additionalInfo.width || 0),\r\n+        height: Number(additionalInfo.height || 0),\r\n+      },\r\n+    });\r\n+\r\n+    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n+\r\n+    // Lưu vào database\r\n+    const product = await newProduct.save();\r\n+\r\n+    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi API:\", error);\r\n+    res.status(500).json({ message: \"Lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find()\r\n+      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n+      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n+\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+router.put(\"/:id\", upload.none(), async (req, res) => {\r\n+  try {\r\n+    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n+    console.log(req.body);\r\n+\r\n+    // Xử lý categories\r\n+    const parsedCategories =\r\n+      typeof categories === \"string\"\r\n+        ? JSON.parse(categories)\r\n+        : Array.isArray(categories)\r\n+        ? categories\r\n+        : [];\r\n+\r\n+    // Xử lý hình ảnh\r\n+    const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+    const parsedImage =\r\n+      req.body.image && req.body.image !== \"null\"\r\n+        ? JSON.parse(req.body.image)\r\n+        : [defaultImage];\r\n+\r\n+    // Xử lý additionalInfo\r\n+    const parsedAdditionalInfo =\r\n+      typeof additionalInfo === \"string\"\r\n+        ? JSON.parse(additionalInfo)\r\n+        : {};\r\n+\r\n+    const updatedData = {\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      image: parsedImage,\r\n+      additionalInfo: parsedAdditionalInfo, // Gán vào DB dưới dạng object\r\n+    };\r\n+\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      updatedData,\r\n+      { new: true }\r\n+    )\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+// DELETE: Xóa sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n+router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    }\r\n+\r\n+    res.json({\r\n+      message: \"Upload successful\",\r\n+      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Upload failed\" });\r\n+  }\r\n+});\r\n+\r\n+router.get(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id)\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1740589525128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,10 +110,8 @@\n   } catch (err) {\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n-\r\n-\r\n // DELETE: Xóa sản phẩm\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n@@ -121,10 +119,8 @@\n   } catch (err) {\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n-\r\n-\r\n // Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n   try {\r\n     if (!req.file) {\r\n@@ -158,152 +154,4 @@\n });\r\n \r\n \r\n module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product.js\");\r\n-const upload = require(\"../middleware/upload\");\r\n-const mongoose = require('mongoose');\r\n-\r\n-router.post(\"/api/products\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n-    console.log(\"File upload:\", req.file); // Kiểm tra ảnh có upload không\r\n-\r\n-    if (!req.body.name || !req.body.price || !req.body.code) {\r\n-      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n-    }\r\n-\r\n-    const newProduct = {\r\n-      name: req.body.name,\r\n-      price: Number(req.body.price), // Chuyển về số\r\n-      quantity: Number(req.body.quantity),\r\n-      code: req.body.code,\r\n-      brand: req.body.brand,\r\n-      categories: JSON.parse(req.body.categories), // Chuyển JSON string thành mảng\r\n-      image: req.file ? req.file.path : \"\", // Nếu có ảnh thì lấy từ Cloudinary\r\n-    };\r\n-\r\n-    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n-    // Lưu vào database (giả sử dùng MongoDB)\r\n-    const product = await Product.create(newProduct);\r\n-\r\n-    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n-  } catch (error) {\r\n-    console.error(\"Lỗi API:\", error);\r\n-    res.status(500).json({ message: \"Lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find()\r\n-      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n-      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n-\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-router.put(\"/:id\", upload.none(), async (req, res) => {\r\n-  try {\r\n-    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n-    console.log(req.body);\r\n-\r\n-    // Xử lý categories\r\n-    const parsedCategories =\r\n-      typeof categories === \"string\"\r\n-        ? JSON.parse(categories)\r\n-        : Array.isArray(categories)\r\n-        ? categories\r\n-        : [];\r\n-\r\n-    // Xử lý hình ảnh\r\n-    const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-    const parsedImage =\r\n-      req.body.image && req.body.image !== \"null\"\r\n-        ? JSON.parse(req.body.image)\r\n-        : [defaultImage];\r\n-\r\n-    // Xử lý additionalInfo\r\n-    const parsedAdditionalInfo =\r\n-      typeof additionalInfo === \"string\"\r\n-        ? JSON.parse(additionalInfo)\r\n-        : {};\r\n-\r\n-    const updatedData = {\r\n-      ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      image: parsedImage,\r\n-      additionalInfo: parsedAdditionalInfo, // Gán vào DB dưới dạng object\r\n-    };\r\n-\r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      updatedData,\r\n-      { new: true }\r\n-    )\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-\r\n-// DELETE: Xóa sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-\r\n-// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n-router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"No file uploaded\" });\r\n-    }\r\n-\r\n-    res.json({\r\n-      message: \"Upload successful\",\r\n-      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Upload failed\" });\r\n-  }\r\n-});\r\n-\r\n-router.get(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id)\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(product);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1740589594179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \r\n     if (!req.body.name || !req.body.price || !req.body.code) {\r\n       return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n     }\r\n-\r\n+    const imagePaths = req.files ? req.files.map((file) => file.path) : [];\r\n     // Parse các trường cần thiết\r\n     const categories = JSON.parse(req.body.categories || \"[]\");\r\n     const additionalInfo = JSON.parse(req.body.additionalInfo || \"{}\");\r\n \r\n@@ -25,9 +25,9 @@\n       code: req.body.code,\r\n       brand: req.body.brand,\r\n       categories: categories.map(id => new mongoose.Types.ObjectId(id)),\r\n       description: req.body.description,\r\n-      image: req.file ? req.file.path : \"\", // Nếu có ảnh thì lấy từ Cloudinary\r\n+      image: imagePaths, // Nếu có ảnh thì lấy từ Cloudinary\r\n       additionalInfo: {\r\n         weight: Number(additionalInfo.weight || 0),\r\n         length: Number(additionalInfo.length || 0),\r\n         width: Number(additionalInfo.width || 0),\r\n"
                },
                {
                    "date": 1740589852895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product.js\");\r\n+const upload = require(\"../middleware/upload\");\r\n+const mongoose = require('mongoose');\r\n+\r\n+router.post(\"/\", upload.array(\"image\"), async (req, res) => {\r\n+  try {\r\n+    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n+    console.log(\"File upload:\", req.files);\r\n+\r\n+    if (!req.body.name || !req.body.price || !req.body.code) {\r\n+      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n+    }\r\n+\r\n+    const categories = JSON.parse(req.body.categories || \"[]\");\r\n+    const additionalInfo = JSON.parse(req.body.additionalInfo || \"{}\");\r\n+\r\n+    const imagePaths = req.files ? req.files.map((file) => file.path) : [];\r\n+\r\n+    const newProduct = new Product({\r\n+      name: req.body.name,\r\n+      price: Number(req.body.price),\r\n+      quantity: Number(req.body.quantity),\r\n+      code: req.body.code,\r\n+      brand: req.body.brand,\r\n+      categories: categories.map(id => new mongoose.Types.ObjectId(id)),\r\n+      description: req.body.description,\r\n+      image: imagePaths,\r\n+      additionalInfo: {\r\n+        weight: Number(additionalInfo.weight || 0),\r\n+        length: Number(additionalInfo.length || 0),\r\n+        width: Number(additionalInfo.width || 0),\r\n+        height: Number(additionalInfo.height || 0),\r\n+      },\r\n+    });\r\n+\r\n+    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n+\r\n+    const product = await newProduct.save();\r\n+    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi API:\", error);\r\n+    res.status(500).json({ message: \"Lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find()\r\n+      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n+      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n+\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+router.put(\"/:id\", upload.none(), async (req, res) => {\r\n+  try {\r\n+    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n+    console.log(req.body);\r\n+\r\n+    // Xử lý categories\r\n+    const parsedCategories =\r\n+      typeof categories === \"string\"\r\n+        ? JSON.parse(categories)\r\n+        : Array.isArray(categories)\r\n+        ? categories\r\n+        : [];\r\n+\r\n+    // Xử lý hình ảnh\r\n+    const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+    const parsedImage =\r\n+      req.body.image && req.body.image !== \"null\"\r\n+        ? JSON.parse(req.body.image)\r\n+        : [defaultImage];\r\n+\r\n+    // Xử lý additionalInfo\r\n+    const parsedAdditionalInfo =\r\n+      typeof additionalInfo === \"string\"\r\n+        ? JSON.parse(additionalInfo)\r\n+        : {};\r\n+\r\n+    const updatedData = {\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      image: parsedImage,\r\n+      additionalInfo: parsedAdditionalInfo, // Gán vào DB dưới dạng object\r\n+    };\r\n+\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      updatedData,\r\n+      { new: true }\r\n+    )\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+// DELETE: Xóa sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n+router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    }\r\n+\r\n+    res.json({\r\n+      message: \"Upload successful\",\r\n+      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Upload failed\" });\r\n+  }\r\n+});\r\n+\r\n+router.get(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id)\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1740590970530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,31 +3,35 @@\n const Product = require(\"../models/Product.js\");\r\n const upload = require(\"../middleware/upload\");\r\n const mongoose = require('mongoose');\r\n \r\n-router.post(\"/\", upload.array(\"image\"), async (req, res) => {\r\n+router.post(\"/\", upload.array(\"image\", 5), async (req, res) => {\r\n   try {\r\n     console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n-    console.log(\"File upload:\", req.files);\r\n+    console.log(\"Files upload:\", req.files); // Kiểm tra file ảnh\r\n \r\n     if (!req.body.name || !req.body.price || !req.body.code) {\r\n       return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n     }\r\n \r\n+    // Xử lý ảnh từ Cloudinary\r\n+    const imagePaths = req.files ? req.files.map((file) => file.path) : [];\r\n+    console.log(\"Image paths từ Cloudinary:\", imagePaths);\r\n+\r\n+    // Parse JSON từ form\r\n     const categories = JSON.parse(req.body.categories || \"[]\");\r\n     const additionalInfo = JSON.parse(req.body.additionalInfo || \"{}\");\r\n \r\n-    const imagePaths = req.files ? req.files.map((file) => file.path) : [];\r\n-\r\n+    // Tạo sản phẩm mới\r\n     const newProduct = new Product({\r\n       name: req.body.name,\r\n       price: Number(req.body.price),\r\n       quantity: Number(req.body.quantity),\r\n       code: req.body.code,\r\n       brand: req.body.brand,\r\n-      categories: categories.map(id => new mongoose.Types.ObjectId(id)),\r\n+      categories: categories.map((id) => new mongoose.Types.ObjectId(id)),\r\n       description: req.body.description,\r\n-      image: imagePaths,\r\n+      image: imagePaths, // Lưu URL ảnh Cloudinary vào DB\r\n       additionalInfo: {\r\n         weight: Number(additionalInfo.weight || 0),\r\n         length: Number(additionalInfo.length || 0),\r\n         width: Number(additionalInfo.width || 0),\r\n@@ -45,8 +49,9 @@\n     res.status(500).json({ message: \"Lỗi server!\" });\r\n   }\r\n });\r\n \r\n+\r\n // READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n"
                },
                {
                    "date": 1740591215945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-router.put(\"/:id\", upload.none(), async (req, res) => {\r\n+router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n   try {\r\n     const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n     console.log(req.body);\r\n \r\n@@ -158,161 +158,4 @@\n });\r\n \r\n \r\n module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product.js\");\r\n-const upload = require(\"../middleware/upload\");\r\n-const mongoose = require('mongoose');\r\n-\r\n-router.post(\"/api/products\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n-    console.log(\"File upload:\", req.file); // Kiểm tra ảnh có upload không\r\n-\r\n-    if (!req.body.name || !req.body.price || !req.body.code) {\r\n-      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n-    }\r\n-    const imagePaths = req.files ? req.files.map((file) => file.path) : [];\r\n-    // Parse các trường cần thiết\r\n-    const categories = JSON.parse(req.body.categories || \"[]\");\r\n-    const additionalInfo = JSON.parse(req.body.additionalInfo || \"{}\");\r\n-\r\n-    // Tạo đối tượng sản phẩm mới\r\n-    const newProduct = new Product({\r\n-      name: req.body.name,\r\n-      price: Number(req.body.price), // Chuyển về số\r\n-      quantity: Number(req.body.quantity),\r\n-      code: req.body.code,\r\n-      brand: req.body.brand,\r\n-      categories: categories.map(id => new mongoose.Types.ObjectId(id)),\r\n-      description: req.body.description,\r\n-      image: imagePaths, // Nếu có ảnh thì lấy từ Cloudinary\r\n-      additionalInfo: {\r\n-        weight: Number(additionalInfo.weight || 0),\r\n-        length: Number(additionalInfo.length || 0),\r\n-        width: Number(additionalInfo.width || 0),\r\n-        height: Number(additionalInfo.height || 0),\r\n-      },\r\n-    });\r\n-\r\n-    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n-\r\n-    // Lưu vào database\r\n-    const product = await newProduct.save();\r\n-\r\n-    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n-  } catch (error) {\r\n-    console.error(\"Lỗi API:\", error);\r\n-    res.status(500).json({ message: \"Lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find()\r\n-      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n-      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n-\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-router.put(\"/:id\", upload.none(), async (req, res) => {\r\n-  try {\r\n-    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n-    console.log(req.body);\r\n-\r\n-    // Xử lý categories\r\n-    const parsedCategories =\r\n-      typeof categories === \"string\"\r\n-        ? JSON.parse(categories)\r\n-        : Array.isArray(categories)\r\n-        ? categories\r\n-        : [];\r\n-\r\n-    // Xử lý hình ảnh\r\n-    const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-    const parsedImage =\r\n-      req.body.image && req.body.image !== \"null\"\r\n-        ? JSON.parse(req.body.image)\r\n-        : [defaultImage];\r\n-\r\n-    // Xử lý additionalInfo\r\n-    const parsedAdditionalInfo =\r\n-      typeof additionalInfo === \"string\"\r\n-        ? JSON.parse(additionalInfo)\r\n-        : {};\r\n-\r\n-    const updatedData = {\r\n-      ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      image: parsedImage,\r\n-      additionalInfo: parsedAdditionalInfo, // Gán vào DB dưới dạng object\r\n-    };\r\n-\r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      updatedData,\r\n-      { new: true }\r\n-    )\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-// DELETE: Xóa sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n-router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"No file uploaded\" });\r\n-    }\r\n-\r\n-    res.json({\r\n-      message: \"Upload successful\",\r\n-      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Upload failed\" });\r\n-  }\r\n-});\r\n-\r\n-router.get(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id)\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(product);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1740591230439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,12 +78,13 @@\n         : [];\r\n \r\n     // Xử lý hình ảnh\r\n     const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-    const parsedImage =\r\n-      req.body.image && req.body.image !== \"null\"\r\n-        ? JSON.parse(req.body.image)\r\n-        : [defaultImage];\r\n+    const parsedImage = req.files && req.files.length > 0\r\n+    ? req.files.map((file) => file.path) // Lấy đường dẫn Cloudinary\r\n+    : req.body.image && req.body.image !== \"null\"\r\n+    ? JSON.parse(req.body.image)\r\n+    : [defaultImage];\r\n \r\n     // Xử lý additionalInfo\r\n     const parsedAdditionalInfo =\r\n       typeof additionalInfo === \"string\"\r\n"
                },
                {
                    "date": 1740591471986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product.js\");\r\n+const upload = require(\"../middleware/upload\");\r\n+const mongoose = require('mongoose');\r\n+\r\n+router.post(\"/\", upload.array(\"image\", 5), async (req, res) => {\r\n+  try {\r\n+    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n+    console.log(\"Files upload:\", req.files); // Kiểm tra file ảnh\r\n+\r\n+    if (!req.body.name || !req.body.price || !req.body.code) {\r\n+      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n+    }\r\n+\r\n+    // Xử lý ảnh từ Cloudinary\r\n+    const imagePaths = req.files ? req.files.map((file) => file.path) : [];\r\n+    console.log(\"Image paths từ Cloudinary:\", imagePaths);\r\n+\r\n+    // Parse JSON từ form\r\n+    const categories = JSON.parse(req.body.categories || \"[]\");\r\n+    const additionalInfo = JSON.parse(req.body.additionalInfo || \"{}\");\r\n+\r\n+    // Tạo sản phẩm mới\r\n+    const newProduct = new Product({\r\n+      name: req.body.name,\r\n+      price: Number(req.body.price),\r\n+      quantity: Number(req.body.quantity),\r\n+      code: req.body.code,\r\n+      brand: req.body.brand,\r\n+      categories: categories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      description: req.body.description,\r\n+      image: imagePaths, // Lưu URL ảnh Cloudinary vào DB\r\n+      additionalInfo: {\r\n+        weight: Number(additionalInfo.weight || 0),\r\n+        length: Number(additionalInfo.length || 0),\r\n+        width: Number(additionalInfo.width || 0),\r\n+        height: Number(additionalInfo.height || 0),\r\n+      },\r\n+    });\r\n+\r\n+    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n+\r\n+    const product = await newProduct.save();\r\n+    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi API:\", error);\r\n+    res.status(500).json({ message: \"Lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+\r\n+// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find()\r\n+      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n+      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n+\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n+  try {\r\n+    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n+    console.log(req.body);\r\n+\r\n+    // Xử lý categories\r\n+    const parsedCategories =\r\n+      typeof categories === \"string\"\r\n+        ? JSON.parse(categories)\r\n+        : Array.isArray(categories)\r\n+          ? categories\r\n+          : [];\r\n+\r\n+    // Xử lý hình ảnh\r\n+    const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n+    const parsedImage = Array.isArray(req.body.image)\r\n+      ? req.body.image\r\n+      : req.body.image && req.body.image !== \"null\"\r\n+        ? JSON.parse(req.body.image)\r\n+        : [defaultImage];\r\n+\r\n+    // Xử lý additionalInfo\r\n+    const parsedAdditionalInfo =\r\n+      typeof additionalInfo === \"string\"\r\n+        ? JSON.parse(additionalInfo)\r\n+        : {};\r\n+\r\n+    const updatedData = {\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      image: parsedImage,\r\n+      additionalInfo: parsedAdditionalInfo, // Gán vào DB dưới dạng object\r\n+    };\r\n+\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      updatedData,\r\n+      { new: true }\r\n+    )\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+// DELETE: Xóa sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n+router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    }\r\n+\r\n+    res.json({\r\n+      message: \"Upload successful\",\r\n+      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Upload failed\" });\r\n+  }\r\n+});\r\n+\r\n+router.get(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id)\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1740591735583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product.js\");\r\n+const upload = require(\"../middleware/upload\");\r\n+const mongoose = require('mongoose');\r\n+\r\n+router.post(\"/\", upload.array(\"image\", 5), async (req, res) => {\r\n+  try {\r\n+    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n+    console.log(\"Files upload:\", req.files);\r\n+\r\n+    if (!req.body.name || !req.body.price || !req.body.code) {\r\n+      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n+    }\r\n+\r\n+    // Xử lý ảnh\r\n+    const imagePaths = req.files && req.files.length > 0 \r\n+      ? req.files.map((file) => file.path) \r\n+      : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n+\r\n+    // Parse JSON\r\n+    const categories = req.body.categories ? JSON.parse(req.body.categories) : [];\r\n+    const additionalInfo = req.body.additionalInfo ? JSON.parse(req.body.additionalInfo) : {};\r\n+\r\n+    const newProduct = new Product({\r\n+      name: req.body.name,\r\n+      price: Number(req.body.price),\r\n+      quantity: Number(req.body.quantity),\r\n+      code: req.body.code,\r\n+      brand: req.body.brand,\r\n+      categories: categories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      description: req.body.description,\r\n+      image: imagePaths,\r\n+      additionalInfo: {\r\n+        weight: Number(additionalInfo.weight || 0),\r\n+        length: Number(additionalInfo.length || 0),\r\n+        width: Number(additionalInfo.width || 0),\r\n+        height: Number(additionalInfo.height || 0),\r\n+      },\r\n+    });\r\n+\r\n+    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n+\r\n+    const product = await newProduct.save();\r\n+    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi API:\", error);\r\n+    res.status(500).json({ message: \"Lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find()\r\n+      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n+      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n+\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n+  try {\r\n+    console.log(req.body);\r\n+    console.log(req.files);\r\n+\r\n+    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n+\r\n+    // Xử lý ảnh mới hoặc giữ ảnh cũ\r\n+    const imagePaths = req.files && req.files.length > 0 \r\n+      ? req.files.map((file) => file.path)\r\n+      : Array.isArray(req.body.image) \r\n+        ? req.body.image \r\n+        : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n+\r\n+    const parsedCategories = categories ? JSON.parse(categories) : [];\r\n+    const parsedAdditionalInfo = additionalInfo ? JSON.parse(additionalInfo) : {};\r\n+\r\n+    const updatedData = {\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      image: imagePaths,\r\n+      additionalInfo: parsedAdditionalInfo,\r\n+    };\r\n+\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      updatedData,\r\n+      { new: true }\r\n+    )\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    console.error(\"Lỗi cập nhật sản phẩm:\", err);\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// DELETE: Xóa sản phẩm\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n+    res.status(200).json({ message: \"Product deleted successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n+router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    }\r\n+\r\n+    res.json({\r\n+      message: \"Upload successful\",\r\n+      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Upload failed\" });\r\n+  }\r\n+});\r\n+\r\n+router.get(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id)\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1740592207666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product.js\");\r\n+const upload = require(\"../middleware/upload\");\r\n+const mongoose = require('mongoose');\r\n+const cloudinary = require(\"cloudinary\").v2;\r\n+\r\n+router.post(\"/\", upload.array(\"image\", 5), async (req, res) => {\r\n+  try {\r\n+    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n+    console.log(\"Files upload:\", req.files);\r\n+\r\n+    if (!req.body.name || !req.body.price || !req.body.code) {\r\n+      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n+    }\r\n+\r\n+    // Xử lý ảnh\r\n+    const imagePaths = req.files && req.files.length > 0 \r\n+      ? req.files.map((file) => file.path) \r\n+      : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n+\r\n+    // Parse JSON\r\n+    const categories = req.body.categories ? JSON.parse(req.body.categories) : [];\r\n+    const additionalInfo = req.body.additionalInfo ? JSON.parse(req.body.additionalInfo) : {};\r\n+\r\n+    const newProduct = new Product({\r\n+      name: req.body.name,\r\n+      price: Number(req.body.price),\r\n+      quantity: Number(req.body.quantity),\r\n+      code: req.body.code,\r\n+      brand: req.body.brand,\r\n+      categories: categories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      description: req.body.description,\r\n+      image: imagePaths,\r\n+      additionalInfo: {\r\n+        weight: Number(additionalInfo.weight || 0),\r\n+        length: Number(additionalInfo.length || 0),\r\n+        width: Number(additionalInfo.width || 0),\r\n+        height: Number(additionalInfo.height || 0),\r\n+      },\r\n+    });\r\n+\r\n+    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n+\r\n+    const product = await newProduct.save();\r\n+    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi API:\", error);\r\n+    res.status(500).json({ message: \"Lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find()\r\n+      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n+      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n+\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n+  try {\r\n+    console.log(req.body);\r\n+    console.log(req.files);\r\n+\r\n+    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n+\r\n+    // Xử lý ảnh mới hoặc giữ ảnh cũ\r\n+    const imagePaths = req.files && req.files.length > 0 \r\n+      ? req.files.map((file) => file.path)\r\n+      : Array.isArray(req.body.image) \r\n+        ? req.body.image \r\n+        : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n+\r\n+    const parsedCategories = categories ? JSON.parse(categories) : [];\r\n+    const parsedAdditionalInfo = additionalInfo ? JSON.parse(additionalInfo) : {};\r\n+\r\n+    const updatedData = {\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      image: imagePaths,\r\n+      additionalInfo: parsedAdditionalInfo,\r\n+    };\r\n+\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      updatedData,\r\n+      { new: true }\r\n+    )\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    console.error(\"Lỗi cập nhật sản phẩm:\", err);\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+// DELETE: Xóa sản phẩm và ảnh trên Cloudinary\r\n+const handleDelete = async (id) => { \r\n+  if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+\r\n+  try {\r\n+    const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n+    setProducts(products.filter(product => product._id !== id));\r\n+    toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n+    toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n+  }\r\n+};\r\n+\r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n+router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    }\r\n+\r\n+    res.json({\r\n+      message: \"Upload successful\",\r\n+      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Upload failed\" });\r\n+  }\r\n+});\r\n+\r\n+router.get(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id)\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1740592356644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+const express = require(\"express\");\r\n+const router = express.Router();\r\n+const Product = require(\"../models/Product.js\");\r\n+const upload = require(\"../middleware/upload\");\r\n+const mongoose = require('mongoose');\r\n+const cloudinary = require(\"cloudinary\").v2;\r\n+\r\n+router.post(\"/\", upload.array(\"image\", 5), async (req, res) => {\r\n+  try {\r\n+    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n+    console.log(\"Files upload:\", req.files);\r\n+\r\n+    if (!req.body.name || !req.body.price || !req.body.code) {\r\n+      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n+    }\r\n+\r\n+    // Xử lý ảnh\r\n+    const imagePaths = req.files && req.files.length > 0 \r\n+      ? req.files.map((file) => file.path) \r\n+      : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n+\r\n+    // Parse JSON\r\n+    const categories = req.body.categories ? JSON.parse(req.body.categories) : [];\r\n+    const additionalInfo = req.body.additionalInfo ? JSON.parse(req.body.additionalInfo) : {};\r\n+\r\n+    const newProduct = new Product({\r\n+      name: req.body.name,\r\n+      price: Number(req.body.price),\r\n+      quantity: Number(req.body.quantity),\r\n+      code: req.body.code,\r\n+      brand: req.body.brand,\r\n+      categories: categories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      description: req.body.description,\r\n+      image: imagePaths,\r\n+      additionalInfo: {\r\n+        weight: Number(additionalInfo.weight || 0),\r\n+        length: Number(additionalInfo.length || 0),\r\n+        width: Number(additionalInfo.width || 0),\r\n+        height: Number(additionalInfo.height || 0),\r\n+      },\r\n+    });\r\n+\r\n+    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n+\r\n+    const product = await newProduct.save();\r\n+    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi API:\", error);\r\n+    res.status(500).json({ message: \"Lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n+router.get(\"/\", async (req, res) => {\r\n+  try {\r\n+    const products = await Product.find()\r\n+      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n+      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n+\r\n+    res.status(200).json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n+  try {\r\n+    console.log(req.body);\r\n+    console.log(req.files);\r\n+\r\n+    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n+\r\n+    // Xử lý ảnh mới hoặc giữ ảnh cũ\r\n+    const imagePaths = req.files && req.files.length > 0 \r\n+      ? req.files.map((file) => file.path)\r\n+      : Array.isArray(req.body.image) \r\n+        ? req.body.image \r\n+        : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n+\r\n+    const parsedCategories = categories ? JSON.parse(categories) : [];\r\n+    const parsedAdditionalInfo = additionalInfo ? JSON.parse(additionalInfo) : {};\r\n+\r\n+    const updatedData = {\r\n+      ...otherData,\r\n+      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      image: imagePaths,\r\n+      additionalInfo: parsedAdditionalInfo,\r\n+    };\r\n+\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      updatedData,\r\n+      { new: true }\r\n+    )\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(updatedProduct);\r\n+  } catch (err) {\r\n+    console.error(\"Lỗi cập nhật sản phẩm:\", err);\r\n+    res.status(400).json({ message: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+// DELETE: Xóa sản phẩm và ảnh trên Cloudinary\r\n+router.delete(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    // Kiểm tra và xoá ảnh trên Cloudinary (nếu có)\r\n+    if (product.image && Array.isArray(product.image) && product.image.length > 0) {\r\n+      for (const imageUrl of product.image) {\r\n+        try {\r\n+          const publicId = imageUrl.split(\"/\").pop().split(\".\")[0]; // Lấy publicId\r\n+          await cloudinary.uploader.destroy(publicId);\r\n+        } catch (cloudinaryError) {\r\n+          console.warn(\"Lỗi xoá ảnh trên Cloudinary:\", cloudinaryError.message);\r\n+        }\r\n+      }\r\n+    }\r\n+\r\n+    // Xoá sản phẩm khỏi MongoDB\r\n+    await Product.findByIdAndDelete(req.params.id);\r\n+\r\n+    res.status(200).json({ message: \"Xóa sản phẩm thành công (bao gồm ảnh nếu có)!\" });\r\n+  } catch (err) {\r\n+    console.error(\"Lỗi xoá sản phẩm:\", err);\r\n+    res.status(400).json({ message: \"Không thể xoá sản phẩm!\" });\r\n+  }\r\n+});\r\n+\r\n+\r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n+router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    }\r\n+\r\n+    res.json({\r\n+      message: \"Upload successful\",\r\n+      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Upload failed\" });\r\n+  }\r\n+});\r\n+\r\n+router.get(\"/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id)\r\n+      .populate(\"brand\")\r\n+      .populate(\"categories\");\r\n+\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n+    }\r\n+\r\n+    res.status(200).json(product);\r\n+  } catch (err) {\r\n+    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n+  }\r\n+});\r\n+\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1740592392373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n       return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n     }\r\n \r\n     // Xử lý ảnh\r\n-    const imagePaths = req.files && req.files.length > 0 \r\n-      ? req.files.map((file) => file.path) \r\n+    const imagePaths = req.files && req.files.length > 0\r\n+      ? req.files.map((file) => file.path)\r\n       : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n \r\n     // Parse JSON\r\n     const categories = req.body.categories ? JSON.parse(req.body.categories) : [];\r\n@@ -49,9 +49,8 @@\n     console.error(\"Lỗi API:\", error);\r\n     res.status(500).json({ message: \"Lỗi server!\" });\r\n   }\r\n });\r\n-\r\n // READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n@@ -62,21 +61,20 @@\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n-\r\n router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n   try {\r\n     console.log(req.body);\r\n     console.log(req.files);\r\n \r\n     const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n \r\n     // Xử lý ảnh mới hoặc giữ ảnh cũ\r\n-    const imagePaths = req.files && req.files.length > 0 \r\n+    const imagePaths = req.files && req.files.length > 0\r\n       ? req.files.map((file) => file.path)\r\n-      : Array.isArray(req.body.image) \r\n-        ? req.body.image \r\n+      : Array.isArray(req.body.image)\r\n+        ? req.body.image\r\n         : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n \r\n     const parsedCategories = categories ? JSON.parse(categories) : [];\r\n     const parsedAdditionalInfo = additionalInfo ? JSON.parse(additionalInfo) : {};\r\n@@ -106,10 +104,8 @@\n     console.error(\"Lỗi cập nhật sản phẩm:\", err);\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n-\r\n-\r\n // DELETE: Xóa sản phẩm và ảnh trên Cloudinary\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const product = await Product.findById(req.params.id);\r\n@@ -138,10 +134,8 @@\n     console.error(\"Lỗi xoá sản phẩm:\", err);\r\n     res.status(400).json({ message: \"Không thể xoá sản phẩm!\" });\r\n   }\r\n });\r\n-\r\n-\r\n // Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n   try {\r\n     if (!req.file) {\r\n@@ -175,640 +169,4 @@\n });\r\n \r\n \r\n module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product.js\");\r\n-const upload = require(\"../middleware/upload\");\r\n-const mongoose = require('mongoose');\r\n-const cloudinary = require(\"cloudinary\").v2;\r\n-\r\n-router.post(\"/\", upload.array(\"image\", 5), async (req, res) => {\r\n-  try {\r\n-    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n-    console.log(\"Files upload:\", req.files);\r\n-\r\n-    if (!req.body.name || !req.body.price || !req.body.code) {\r\n-      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n-    }\r\n-\r\n-    // Xử lý ảnh\r\n-    const imagePaths = req.files && req.files.length > 0 \r\n-      ? req.files.map((file) => file.path) \r\n-      : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n-\r\n-    // Parse JSON\r\n-    const categories = req.body.categories ? JSON.parse(req.body.categories) : [];\r\n-    const additionalInfo = req.body.additionalInfo ? JSON.parse(req.body.additionalInfo) : {};\r\n-\r\n-    const newProduct = new Product({\r\n-      name: req.body.name,\r\n-      price: Number(req.body.price),\r\n-      quantity: Number(req.body.quantity),\r\n-      code: req.body.code,\r\n-      brand: req.body.brand,\r\n-      categories: categories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      description: req.body.description,\r\n-      image: imagePaths,\r\n-      additionalInfo: {\r\n-        weight: Number(additionalInfo.weight || 0),\r\n-        length: Number(additionalInfo.length || 0),\r\n-        width: Number(additionalInfo.width || 0),\r\n-        height: Number(additionalInfo.height || 0),\r\n-      },\r\n-    });\r\n-\r\n-    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n-\r\n-    const product = await newProduct.save();\r\n-    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Lỗi API:\", error);\r\n-    res.status(500).json({ message: \"Lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find()\r\n-      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n-      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n-\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n-  try {\r\n-    console.log(req.body);\r\n-    console.log(req.files);\r\n-\r\n-    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n-\r\n-    // Xử lý ảnh mới hoặc giữ ảnh cũ\r\n-    const imagePaths = req.files && req.files.length > 0 \r\n-      ? req.files.map((file) => file.path)\r\n-      : Array.isArray(req.body.image) \r\n-        ? req.body.image \r\n-        : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n-\r\n-    const parsedCategories = categories ? JSON.parse(categories) : [];\r\n-    const parsedAdditionalInfo = additionalInfo ? JSON.parse(additionalInfo) : {};\r\n-\r\n-    const updatedData = {\r\n-      ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      image: imagePaths,\r\n-      additionalInfo: parsedAdditionalInfo,\r\n-    };\r\n-\r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      updatedData,\r\n-      { new: true }\r\n-    )\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (err) {\r\n-    console.error(\"Lỗi cập nhật sản phẩm:\", err);\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// DELETE: Xóa sản phẩm và ảnh trên Cloudinary\r\n-const handleDelete = async (id) => { \r\n-  if (!window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n-\r\n-  try {\r\n-    const response = await axios.delete(`http://localhost:5000/api/products/${id}`);\r\n-    setProducts(products.filter(product => product._id !== id));\r\n-    toast.success(response.data.message || \"Xóa sản phẩm thành công!\");\r\n-  } catch (error) {\r\n-    console.error(\"Lỗi khi xóa sản phẩm\", error.response?.data || error.message);\r\n-    toast.error(error.response?.data.message || \"Không thể xóa sản phẩm!\");\r\n-  }\r\n-};\r\n-\r\n-// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n-router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"No file uploaded\" });\r\n-    }\r\n-\r\n-    res.json({\r\n-      message: \"Upload successful\",\r\n-      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Upload failed\" });\r\n-  }\r\n-});\r\n-\r\n-router.get(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id)\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(product);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-\r\n-module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product.js\");\r\n-const upload = require(\"../middleware/upload\");\r\n-const mongoose = require('mongoose');\r\n-\r\n-router.post(\"/\", upload.array(\"image\", 5), async (req, res) => {\r\n-  try {\r\n-    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n-    console.log(\"Files upload:\", req.files);\r\n-\r\n-    if (!req.body.name || !req.body.price || !req.body.code) {\r\n-      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n-    }\r\n-\r\n-    // Xử lý ảnh\r\n-    const imagePaths = req.files && req.files.length > 0 \r\n-      ? req.files.map((file) => file.path) \r\n-      : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n-\r\n-    // Parse JSON\r\n-    const categories = req.body.categories ? JSON.parse(req.body.categories) : [];\r\n-    const additionalInfo = req.body.additionalInfo ? JSON.parse(req.body.additionalInfo) : {};\r\n-\r\n-    const newProduct = new Product({\r\n-      name: req.body.name,\r\n-      price: Number(req.body.price),\r\n-      quantity: Number(req.body.quantity),\r\n-      code: req.body.code,\r\n-      brand: req.body.brand,\r\n-      categories: categories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      description: req.body.description,\r\n-      image: imagePaths,\r\n-      additionalInfo: {\r\n-        weight: Number(additionalInfo.weight || 0),\r\n-        length: Number(additionalInfo.length || 0),\r\n-        width: Number(additionalInfo.width || 0),\r\n-        height: Number(additionalInfo.height || 0),\r\n-      },\r\n-    });\r\n-\r\n-    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n-\r\n-    const product = await newProduct.save();\r\n-    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Lỗi API:\", error);\r\n-    res.status(500).json({ message: \"Lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find()\r\n-      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n-      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n-\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n-  try {\r\n-    console.log(req.body);\r\n-    console.log(req.files);\r\n-\r\n-    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n-\r\n-    // Xử lý ảnh mới hoặc giữ ảnh cũ\r\n-    const imagePaths = req.files && req.files.length > 0 \r\n-      ? req.files.map((file) => file.path)\r\n-      : Array.isArray(req.body.image) \r\n-        ? req.body.image \r\n-        : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n-\r\n-    const parsedCategories = categories ? JSON.parse(categories) : [];\r\n-    const parsedAdditionalInfo = additionalInfo ? JSON.parse(additionalInfo) : {};\r\n-\r\n-    const updatedData = {\r\n-      ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      image: imagePaths,\r\n-      additionalInfo: parsedAdditionalInfo,\r\n-    };\r\n-\r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      updatedData,\r\n-      { new: true }\r\n-    )\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (err) {\r\n-    console.error(\"Lỗi cập nhật sản phẩm:\", err);\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-// DELETE: Xóa sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n-router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"No file uploaded\" });\r\n-    }\r\n-\r\n-    res.json({\r\n-      message: \"Upload successful\",\r\n-      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Upload failed\" });\r\n-  }\r\n-});\r\n-\r\n-router.get(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id)\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(product);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-\r\n-module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product.js\");\r\n-const upload = require(\"../middleware/upload\");\r\n-const mongoose = require('mongoose');\r\n-\r\n-router.post(\"/\", upload.array(\"image\", 5), async (req, res) => {\r\n-  try {\r\n-    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n-    console.log(\"Files upload:\", req.files); // Kiểm tra file ảnh\r\n-\r\n-    if (!req.body.name || !req.body.price || !req.body.code) {\r\n-      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n-    }\r\n-\r\n-    // Xử lý ảnh từ Cloudinary\r\n-    const imagePaths = req.files ? req.files.map((file) => file.path) : [];\r\n-    console.log(\"Image paths từ Cloudinary:\", imagePaths);\r\n-\r\n-    // Parse JSON từ form\r\n-    const categories = JSON.parse(req.body.categories || \"[]\");\r\n-    const additionalInfo = JSON.parse(req.body.additionalInfo || \"{}\");\r\n-\r\n-    // Tạo sản phẩm mới\r\n-    const newProduct = new Product({\r\n-      name: req.body.name,\r\n-      price: Number(req.body.price),\r\n-      quantity: Number(req.body.quantity),\r\n-      code: req.body.code,\r\n-      brand: req.body.brand,\r\n-      categories: categories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      description: req.body.description,\r\n-      image: imagePaths, // Lưu URL ảnh Cloudinary vào DB\r\n-      additionalInfo: {\r\n-        weight: Number(additionalInfo.weight || 0),\r\n-        length: Number(additionalInfo.length || 0),\r\n-        width: Number(additionalInfo.width || 0),\r\n-        height: Number(additionalInfo.height || 0),\r\n-      },\r\n-    });\r\n-\r\n-    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n-\r\n-    const product = await newProduct.save();\r\n-    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Lỗi API:\", error);\r\n-    res.status(500).json({ message: \"Lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-\r\n-// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find()\r\n-      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n-      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n-\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n-  try {\r\n-    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n-    console.log(req.body);\r\n-\r\n-    // Xử lý categories\r\n-    const parsedCategories =\r\n-      typeof categories === \"string\"\r\n-        ? JSON.parse(categories)\r\n-        : Array.isArray(categories)\r\n-          ? categories\r\n-          : [];\r\n-\r\n-    // Xử lý hình ảnh\r\n-    const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-    const parsedImage = Array.isArray(req.body.image)\r\n-      ? req.body.image\r\n-      : req.body.image && req.body.image !== \"null\"\r\n-        ? JSON.parse(req.body.image)\r\n-        : [defaultImage];\r\n-\r\n-    // Xử lý additionalInfo\r\n-    const parsedAdditionalInfo =\r\n-      typeof additionalInfo === \"string\"\r\n-        ? JSON.parse(additionalInfo)\r\n-        : {};\r\n-\r\n-    const updatedData = {\r\n-      ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      image: parsedImage,\r\n-      additionalInfo: parsedAdditionalInfo, // Gán vào DB dưới dạng object\r\n-    };\r\n-\r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      updatedData,\r\n-      { new: true }\r\n-    )\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-// DELETE: Xóa sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n-router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"No file uploaded\" });\r\n-    }\r\n-\r\n-    res.json({\r\n-      message: \"Upload successful\",\r\n-      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Upload failed\" });\r\n-  }\r\n-});\r\n-\r\n-router.get(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id)\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(product);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-\r\n-module.exports = router;\r\n-const express = require(\"express\");\r\n-const router = express.Router();\r\n-const Product = require(\"../models/Product.js\");\r\n-const upload = require(\"../middleware/upload\");\r\n-const mongoose = require('mongoose');\r\n-\r\n-router.post(\"/\", upload.array(\"image\", 5), async (req, res) => {\r\n-  try {\r\n-    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n-    console.log(\"Files upload:\", req.files); // Kiểm tra file ảnh\r\n-\r\n-    if (!req.body.name || !req.body.price || !req.body.code) {\r\n-      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n-    }\r\n-\r\n-    // Xử lý ảnh từ Cloudinary\r\n-    const imagePaths = req.files ? req.files.map((file) => file.path) : [];\r\n-    console.log(\"Image paths từ Cloudinary:\", imagePaths);\r\n-\r\n-    // Parse JSON từ form\r\n-    const categories = JSON.parse(req.body.categories || \"[]\");\r\n-    const additionalInfo = JSON.parse(req.body.additionalInfo || \"{}\");\r\n-\r\n-    // Tạo sản phẩm mới\r\n-    const newProduct = new Product({\r\n-      name: req.body.name,\r\n-      price: Number(req.body.price),\r\n-      quantity: Number(req.body.quantity),\r\n-      code: req.body.code,\r\n-      brand: req.body.brand,\r\n-      categories: categories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      description: req.body.description,\r\n-      image: imagePaths, // Lưu URL ảnh Cloudinary vào DB\r\n-      additionalInfo: {\r\n-        weight: Number(additionalInfo.weight || 0),\r\n-        length: Number(additionalInfo.length || 0),\r\n-        width: Number(additionalInfo.width || 0),\r\n-        height: Number(additionalInfo.height || 0),\r\n-      },\r\n-    });\r\n-\r\n-    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n-\r\n-    const product = await newProduct.save();\r\n-    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Lỗi API:\", error);\r\n-    res.status(500).json({ message: \"Lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-\r\n-// READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n-router.get(\"/\", async (req, res) => {\r\n-  try {\r\n-    const products = await Product.find()\r\n-      .populate(\"brand\", \"name\") // Lấy tên thương hiệu\r\n-      .populate(\"categories\", \"name\"); // Lấy tên danh mục\r\n-\r\n-    res.status(200).json(products);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n-  try {\r\n-    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n-    console.log(req.body);\r\n-\r\n-    // Xử lý categories\r\n-    const parsedCategories =\r\n-      typeof categories === \"string\"\r\n-        ? JSON.parse(categories)\r\n-        : Array.isArray(categories)\r\n-        ? categories\r\n-        : [];\r\n-\r\n-    // Xử lý hình ảnh\r\n-    const defaultImage = \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\";\r\n-    const parsedImage = req.files && req.files.length > 0\r\n-    ? req.files.map((file) => file.path) // Lấy đường dẫn Cloudinary\r\n-    : req.body.image && req.body.image !== \"null\"\r\n-    ? JSON.parse(req.body.image)\r\n-    : [defaultImage];\r\n-\r\n-    // Xử lý additionalInfo\r\n-    const parsedAdditionalInfo =\r\n-      typeof additionalInfo === \"string\"\r\n-        ? JSON.parse(additionalInfo)\r\n-        : {};\r\n-\r\n-    const updatedData = {\r\n-      ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n-      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      image: parsedImage,\r\n-      additionalInfo: parsedAdditionalInfo, // Gán vào DB dưới dạng object\r\n-    };\r\n-\r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      updatedData,\r\n-      { new: true }\r\n-    )\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(updatedProduct);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-// DELETE: Xóa sản phẩm\r\n-router.delete(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const deletedProduct = await Product.findByIdAndDelete(req.params.id);\r\n-    res.status(200).json({ message: \"Product deleted successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: err.message });\r\n-  }\r\n-});\r\n-// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n-router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"No file uploaded\" });\r\n-    }\r\n-\r\n-    res.json({\r\n-      message: \"Upload successful\",\r\n-      imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Upload failed\" });\r\n-  }\r\n-});\r\n-\r\n-router.get(\"/:id\", async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id)\r\n-      .populate(\"brand\")\r\n-      .populate(\"categories\");\r\n-\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n-    }\r\n-\r\n-    res.status(200).json(product);\r\n-  } catch (err) {\r\n-    res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1741595635273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,28 +63,32 @@\n   }\r\n });\r\n router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n   try {\r\n-    console.log(req.body);\r\n-    console.log(req.files);\r\n+    console.log(\"📥 Dữ liệu gửi lên từ Client:\", req.body);\r\n+    console.log(\"📸 Ảnh mới upload:\", req.files);\r\n \r\n-    const { brand, categories, additionalInfo, ...otherData } = req.body;\r\n+    const { brand, categories, additionalInfo, existingImages, ...otherData } = req.body;\r\n \r\n-    // Xử lý ảnh mới hoặc giữ ảnh cũ\r\n-    const imagePaths = req.files && req.files.length > 0\r\n+    // Nếu có ảnh mới, cập nhật ảnh mới; nếu không, giữ ảnh cũ\r\n+    const newImages = req.files?.length > 0\r\n       ? req.files.map((file) => file.path)\r\n-      : Array.isArray(req.body.image)\r\n-        ? req.body.image\r\n-        : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n+      : [];\r\n \r\n+    const oldImages = existingImages\r\n+      ? (Array.isArray(existingImages) ? existingImages : [existingImages])\r\n+      : [];\r\n+\r\n+    const finalImages = [...oldImages, ...newImages].filter(Boolean); // Loại bỏ giá trị rỗng\r\n+\r\n     const parsedCategories = categories ? JSON.parse(categories) : [];\r\n     const parsedAdditionalInfo = additionalInfo ? JSON.parse(additionalInfo) : {};\r\n \r\n     const updatedData = {\r\n       ...otherData,\r\n       brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n       categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      image: imagePaths,\r\n+      image: finalImages, // Sử dụng ảnh đã giữ\r\n       additionalInfo: parsedAdditionalInfo,\r\n     };\r\n \r\n     const updatedProduct = await Product.findByIdAndUpdate(\r\n@@ -98,14 +102,17 @@\n     if (!updatedProduct) {\r\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n \r\n+    console.log(\"✅ Dữ liệu sau cập nhật:\", updatedProduct);\r\n     res.status(200).json(updatedProduct);\r\n   } catch (err) {\r\n-    console.error(\"Lỗi cập nhật sản phẩm:\", err);\r\n+    console.error(\"❌ Lỗi cập nhật sản phẩm:\", err);\r\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n+\r\n+\r\n // DELETE: Xóa sản phẩm và ảnh trên Cloudinary\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const product = await Product.findById(req.params.id);\r\n"
                },
                {
                    "date": 1743726575420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n   try {\r\n     console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n     console.log(\"Files upload:\", req.files);\r\n \r\n+    // Kiểm tra dữ liệu bắt buộc\r\n     if (!req.body.name || !req.body.price || !req.body.code) {\r\n       return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n     }\r\n \r\n@@ -18,34 +19,50 @@\n     const imagePaths = req.files && req.files.length > 0\r\n       ? req.files.map((file) => file.path)\r\n       : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n \r\n-    // Parse JSON\r\n-    const categories = req.body.categories ? JSON.parse(req.body.categories) : [];\r\n-    const additionalInfo = req.body.additionalInfo ? JSON.parse(req.body.additionalInfo) : {};\r\n+    // Parse JSON cho các trường object\r\n+    let parsedCategories = [];\r\n+    try {\r\n+      parsedCategories = req.body.categories ? JSON.parse(req.body.categories) : [];\r\n+    } catch (e) {\r\n+      return res.status(400).json({ message: \"Dữ liệu categories không hợp lệ!\" });\r\n+    }\r\n \r\n+    let parsedAdditionalInfo = {};\r\n+    try {\r\n+      parsedAdditionalInfo = req.body.additionalInfo ? JSON.parse(req.body.additionalInfo) : {};\r\n+    } catch (e) {\r\n+      return res.status(400).json({ message: \"Dữ liệu additionalInfo không hợp lệ!\" });\r\n+    }\r\n+\r\n+    // Chuyển đổi brand thành ObjectId nếu có và hợp lệ\r\n+    let brandId = null;\r\n+    if (req.body.brand && mongoose.Types.ObjectId.isValid(req.body.brand)) {\r\n+      brandId = new mongoose.Types.ObjectId(req.body.brand);\r\n+    }\r\n+\r\n     const newProduct = new Product({\r\n       name: req.body.name,\r\n       price: Number(req.body.price),\r\n       quantity: Number(req.body.quantity),\r\n       code: req.body.code,\r\n-      brand: req.body.brand,\r\n-      categories: categories.map((id) => new mongoose.Types.ObjectId(id)),\r\n+      brand: brandId, // Sử dụng ObjectId đã kiểm tra\r\n+      categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n       description: req.body.description,\r\n       image: imagePaths,\r\n       additionalInfo: {\r\n-        weight: Number(additionalInfo.weight || 0),\r\n-        length: Number(additionalInfo.length || 0),\r\n-        width: Number(additionalInfo.width || 0),\r\n-        height: Number(additionalInfo.height || 0),\r\n+        weight: Number(parsedAdditionalInfo.weight || 0),\r\n+        length: Number(parsedAdditionalInfo.length || 0),\r\n+        width: Number(parsedAdditionalInfo.width || 0),\r\n+        height: Number(parsedAdditionalInfo.height || 0),\r\n       },\r\n     });\r\n \r\n     console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n \r\n     const product = await newProduct.save();\r\n     res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n-\r\n   } catch (error) {\r\n     console.error(\"Lỗi API:\", error);\r\n     res.status(500).json({ message: \"Lỗi server!\" });\r\n   }\r\n@@ -68,27 +85,45 @@\n     console.log(\"📸 Ảnh mới upload:\", req.files);\r\n \r\n     const { brand, categories, additionalInfo, existingImages, ...otherData } = req.body;\r\n \r\n-    // Nếu có ảnh mới, cập nhật ảnh mới; nếu không, giữ ảnh cũ\r\n+    // Xử lý ảnh mới và giữ ảnh cũ\r\n     const newImages = req.files?.length > 0\r\n       ? req.files.map((file) => file.path)\r\n       : [];\r\n \r\n     const oldImages = existingImages\r\n       ? (Array.isArray(existingImages) ? existingImages : [existingImages])\r\n       : [];\r\n \r\n-    const finalImages = [...oldImages, ...newImages].filter(Boolean); // Loại bỏ giá trị rỗng\r\n+    const finalImages = [...oldImages, ...newImages].filter(Boolean);\r\n \r\n-    const parsedCategories = categories ? JSON.parse(categories) : [];\r\n-    const parsedAdditionalInfo = additionalInfo ? JSON.parse(additionalInfo) : {};\r\n+    // Parse JSON cho categories và additionalInfo\r\n+    let parsedCategories = [];\r\n+    try {\r\n+      parsedCategories = categories ? JSON.parse(categories) : [];\r\n+    } catch (e) {\r\n+      return res.status(400).json({ message: \"Dữ liệu categories không hợp lệ!\" });\r\n+    }\r\n \r\n+    let parsedAdditionalInfo = {};\r\n+    try {\r\n+      parsedAdditionalInfo = additionalInfo ? JSON.parse(additionalInfo) : {};\r\n+    } catch (e) {\r\n+      return res.status(400).json({ message: \"Dữ liệu additionalInfo không hợp lệ!\" });\r\n+    }\r\n+\r\n+    // Chuyển đổi brand nếu hợp lệ\r\n+    let brandId = null;\r\n+    if (brand && mongoose.Types.ObjectId.isValid(brand)) {\r\n+      brandId = new mongoose.Types.ObjectId(brand);\r\n+    }\r\n+\r\n     const updatedData = {\r\n       ...otherData,\r\n-      brand: brand ? new mongoose.Types.ObjectId(brand) : null,\r\n+      brand: brandId,\r\n       categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n-      image: finalImages, // Sử dụng ảnh đã giữ\r\n+      image: finalImages,\r\n       additionalInfo: parsedAdditionalInfo,\r\n     };\r\n \r\n     const updatedProduct = await Product.findByIdAndUpdate(\r\n@@ -111,8 +146,9 @@\n   }\r\n });\r\n \r\n \r\n+\r\n // DELETE: Xóa sản phẩm và ảnh trên Cloudinary\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const product = await Product.findById(req.params.id);\r\n"
                },
                {
                    "date": 1743845023481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n const express = require(\"express\");\r\n const router = express.Router();\r\n const Product = require(\"../models/Product.js\");\r\n const upload = require(\"../middleware/upload\");\r\n-const mongoose = require('mongoose');\r\n+const mongoose = require(\"mongoose\");\r\n const cloudinary = require(\"cloudinary\").v2;\r\n \r\n+// POST: Tạo sản phẩm mới\r\n router.post(\"/\", upload.array(\"image\", 5), async (req, res) => {\r\n   try {\r\n     console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n     console.log(\"Files upload:\", req.files);\r\n@@ -14,12 +15,21 @@\n     if (!req.body.name || !req.body.price || !req.body.code) {\r\n       return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n     }\r\n \r\n-    // Xử lý ảnh\r\n-    const imagePaths = req.files && req.files.length > 0\r\n-      ? req.files.map((file) => file.path)\r\n-      : [\"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\"];\r\n+    // Xử lý ảnh: chuyển từ req.files thành mảng đối tượng { url, public_id }\r\n+    const imageObjs =\r\n+      req.files && req.files.length > 0\r\n+        ? req.files.map((file) => ({\r\n+            url: file.path,\r\n+            public_id: file.filename,\r\n+          }))\r\n+        : [\r\n+            {\r\n+              url: \"https://res.cloudinary.com/dmz66rbbk/image/upload/v1739377337/empty_cpvono.jpg\",\r\n+              public_id: \"empty_cpvono\",\r\n+            },\r\n+          ];\r\n \r\n     // Parse JSON cho các trường object\r\n     let parsedCategories = [];\r\n     try {\r\n@@ -48,9 +58,9 @@\n       code: req.body.code,\r\n       brand: brandId, // Sử dụng ObjectId đã kiểm tra\r\n       categories: parsedCategories.map((id) => new mongoose.Types.ObjectId(id)),\r\n       description: req.body.description,\r\n-      image: imagePaths,\r\n+      image: imageObjs,\r\n       additionalInfo: {\r\n         weight: Number(parsedAdditionalInfo.weight || 0),\r\n         length: Number(parsedAdditionalInfo.length || 0),\r\n         width: Number(parsedAdditionalInfo.width || 0),\r\n@@ -66,8 +76,9 @@\n     console.error(\"Lỗi API:\", error);\r\n     res.status(500).json({ message: \"Lỗi server!\" });\r\n   }\r\n });\r\n+\r\n // READ: Lấy tất cả sản phẩm (CÓ POPULATE)\r\n router.get(\"/\", async (req, res) => {\r\n   try {\r\n     const products = await Product.find()\r\n@@ -78,22 +89,31 @@\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n });\r\n+\r\n+// PUT: Cập nhật sản phẩm\r\n router.put(\"/:id\", upload.array(\"image\", 5), async (req, res) => {\r\n   try {\r\n     console.log(\"📥 Dữ liệu gửi lên từ Client:\", req.body);\r\n     console.log(\"📸 Ảnh mới upload:\", req.files);\r\n \r\n     const { brand, categories, additionalInfo, existingImages, ...otherData } = req.body;\r\n \r\n-    // Xử lý ảnh mới và giữ ảnh cũ\r\n-    const newImages = req.files?.length > 0\r\n-      ? req.files.map((file) => file.path)\r\n-      : [];\r\n+    // Xử lý ảnh mới: chuyển sang đối tượng {url, public_id}\r\n+    const newImages =\r\n+      req.files && req.files.length > 0\r\n+        ? req.files.map((file) => ({\r\n+            url: file.path,\r\n+            public_id: file.filename,\r\n+          }))\r\n+        : [];\r\n \r\n+    // existingImages từ FE phải được gửi theo đúng định dạng đối tượng\r\n     const oldImages = existingImages\r\n-      ? (Array.isArray(existingImages) ? existingImages : [existingImages])\r\n+      ? Array.isArray(existingImages)\r\n+        ? existingImages\r\n+        : [existingImages]\r\n       : [];\r\n \r\n     const finalImages = [...oldImages, ...newImages].filter(Boolean);\r\n \r\n@@ -145,10 +165,8 @@\n     res.status(400).json({ message: err.message });\r\n   }\r\n });\r\n \r\n-\r\n-\r\n // DELETE: Xóa sản phẩm và ảnh trên Cloudinary\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const product = await Product.findById(req.params.id);\r\n@@ -156,14 +174,13 @@\n     if (!product) {\r\n       return res.status(404).json({ message: \"Không tìm thấy sản phẩm!\" });\r\n     }\r\n \r\n-    // Kiểm tra và xoá ảnh trên Cloudinary (nếu có)\r\n+    // Xoá ảnh trên Cloudinary: sử dụng public_id đã lưu\r\n     if (product.image && Array.isArray(product.image) && product.image.length > 0) {\r\n-      for (const imageUrl of product.image) {\r\n+      for (const imageObj of product.image) {\r\n         try {\r\n-          const publicId = imageUrl.split(\"/\").pop().split(\".\")[0]; // Lấy publicId\r\n-          await cloudinary.uploader.destroy(publicId);\r\n+          await cloudinary.uploader.destroy(imageObj.public_id);\r\n         } catch (cloudinaryError) {\r\n           console.warn(\"Lỗi xoá ảnh trên Cloudinary:\", cloudinaryError.message);\r\n         }\r\n       }\r\n@@ -177,9 +194,10 @@\n     console.error(\"Lỗi xoá sản phẩm:\", err);\r\n     res.status(400).json({ message: \"Không thể xoá sản phẩm!\" });\r\n   }\r\n });\r\n-// Upload ảnh và cập nhật đường dẫn vào MongoDB\r\n+\r\n+// Upload ảnh và cập nhật đường dẫn vào MongoDB (nếu cần)\r\n router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n   try {\r\n     if (!req.file) {\r\n       return res.status(400).json({ message: \"No file uploaded\" });\r\n@@ -187,8 +205,9 @@\n \r\n     res.json({\r\n       message: \"Upload successful\",\r\n       imageUrl: req.file.path, // URL ảnh trên Cloudinary\r\n+      public_id: req.file.filename, // Public ID của ảnh\r\n     });\r\n   } catch (error) {\r\n     console.error(error);\r\n     res.status(500).json({ message: \"Upload failed\" });\r\n@@ -210,6 +229,5 @@\n     res.status(400).json({ message: \"ID không hợp lệ hoặc lỗi server!\" });\r\n   }\r\n });\r\n \r\n-\r\n module.exports = router;\r\n"
                }
            ],
            "date": 1738056020650,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\r\nconst router = express.Router();\r\nconst Product = require(\"../models/Product\");\r\n\r\n// Lấy tất cả sản phẩm\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const products = await Product.find();\r\n    res.json(products);\r\n  } catch (err) {\r\n    res.status(500).json({ message: err.message });\r\n  }\r\n});\r\n\r\n// Thêm sản phẩm\r\nrouter.post(\"/\", async (req, res) => {\r\n  const product = new Product(req.body);\r\n  try {\r\n    const savedProduct = await product.save();\r\n    res.status(201).json(savedProduct);\r\n  } catch (err) {\r\n    res.status(400).json({ message: err.message });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}