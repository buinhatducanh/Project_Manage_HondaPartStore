{
    "sourceFile": "middleware/upload.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1738927187738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738999109773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,16 @@\n const multer = require(\"multer\");\r\n-const path = require(\"path\");\r\n+const { CloudinaryStorage } = require(\"multer-storage-cloudinary\");\r\n+const cloudinary = require(\"../config/cloudinary\");\r\n \r\n-// Cấu hình lưu ảnh vào thư mục \"uploads\"\r\n-const storage = multer.diskStorage({\r\n-  destination: function (req, file, cb) {\r\n-    cb(null, \"uploads/\");\r\n+const storage = new CloudinaryStorage({\r\n+  cloudinary: cloudinary,\r\n+  params: {\r\n+    folder: \"products\", // Lưu ảnh vào folder \"products\"\r\n+    format: async (req, file) => \"png\", // Chỉ lưu PNG\r\n+    public_id: (req, file) => Date.now() + \"-\" + file.originalname,\r\n   },\r\n-  filename: function (req, file, cb) {\r\n-    cb(null, Date.now() + path.extname(file.originalname)); // Đổi tên file\r\n-  },\r\n });\r\n \r\n-// Bộ lọc chỉ cho phép file ảnh\r\n-const fileFilter = (req, file, cb) => {\r\n-  if (file.mimetype.startsWith(\"image/\")) {\r\n-    cb(null, true);\r\n-  } else {\r\n-    cb(new Error(\"Chỉ cho phép tải ảnh!\"), false);\r\n-  }\r\n-};\r\n+const upload = multer({ storage });\r\n \r\n-// Middleware upload ảnh\r\n-const upload = multer({ storage, fileFilter });\r\n-\r\n module.exports = upload;\r\n"
                },
                {
                    "date": 1739000202932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n const multer = require(\"multer\");\r\n const { CloudinaryStorage } = require(\"multer-storage-cloudinary\");\r\n const cloudinary = require(\"../config/cloudinary\");\r\n \r\n+// Cấu hình storage cho Cloudinary\r\n const storage = new CloudinaryStorage({\r\n   cloudinary: cloudinary,\r\n   params: {\r\n     folder: \"products\", // Lưu ảnh vào folder \"products\"\r\n     format: async (req, file) => \"png\", // Chỉ lưu PNG\r\n-    public_id: (req, file) => Date.now() + \"-\" + file.originalname,\r\n+    public_id: (req, file) => Date.now() + \"-\" + file.originalname, // Đặt tên file\r\n   },\r\n });\r\n \r\n const upload = multer({ storage });\r\n"
                },
                {
                    "date": 1739364404880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,69 @@\n+const express = require(\"express\");\r\n const multer = require(\"multer\");\r\n const { CloudinaryStorage } = require(\"multer-storage-cloudinary\");\r\n const cloudinary = require(\"../config/cloudinary\");\r\n+const Image = require(\"../models/Image\");\r\n+const Product = require(\"../models/Product\");\r\n \r\n-// Cấu hình storage cho Cloudinary\r\n+const router = express.Router();\r\n+\r\n+// Cấu hình Multer cho Cloudinary (upload nhiều ảnh)\r\n const storage = new CloudinaryStorage({\r\n   cloudinary: cloudinary,\r\n   params: {\r\n-    folder: \"products\", // Lưu ảnh vào folder \"products\"\r\n-    format: async (req, file) => \"png\", // Chỉ lưu PNG\r\n-    public_id: (req, file) => Date.now() + \"-\" + file.originalname, // Đặt tên file\r\n+    folder: \"products\",\r\n+    format: async (req, file) => \"png\",\r\n+    public_id: (req, file) => Date.now() + \"-\" + file.originalname,\r\n   },\r\n });\r\n-\r\n const upload = multer({ storage });\r\n \r\n-module.exports = upload;\r\n+// API Upload nhiều ảnh\r\n+router.post(\"/upload-multiple\", upload.array(\"images\", 5), async (req, res) => {\r\n+  try {\r\n+    if (!req.files || req.files.length === 0) {\r\n+      return res.status(400).json({ message: \"No files uploaded\" });\r\n+    }\r\n+\r\n+    // Lưu URL và publicId vào MongoDB\r\n+    const images = await Promise.all(\r\n+      req.files.map(async (file) => {\r\n+        const newImage = new Image({\r\n+          url: file.path, // URL ảnh trên Cloudinary\r\n+          publicId: file.filename, // ID ảnh trên Cloudinary\r\n+        });\r\n+        await newImage.save();\r\n+        return newImage._id; // Trả về ID của ảnh vừa lưu\r\n+      })\r\n+    );\r\n+\r\n+    res.json({ imageIds: images }); // Trả về mảng ID ảnh\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Upload failed\" });\r\n+  }\r\n+});\r\n+\r\n+// API Thêm ảnh vào sản phẩm\r\n+router.post(\"/product/:productId/add-images\", async (req, res) => {\r\n+  try {\r\n+    const { productId } = req.params;\r\n+    const { imageIds } = req.body; // Nhận danh sách ID ảnh từ frontend\r\n+\r\n+    const product = await Product.findById(productId);\r\n+    if (!product) {\r\n+      return res.status(404).json({ message: \"Product not found\" });\r\n+    }\r\n+\r\n+    // Thêm ảnh vào danh sách images của sản phẩm\r\n+    product.images.push(...imageIds);\r\n+    await product.save();\r\n+\r\n+    res.json({ message: \"Images added to product successfully\", product });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Failed to add images\" });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1739364524719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,17 @@\n-const express = require(\"express\");\r\n const multer = require(\"multer\");\r\n const { CloudinaryStorage } = require(\"multer-storage-cloudinary\");\r\n const cloudinary = require(\"../config/cloudinary\");\r\n-const Image = require(\"../models/Image\");\r\n-const Product = require(\"../models/Product\");\r\n \r\n-const router = express.Router();\r\n-\r\n-// Cấu hình Multer cho Cloudinary (upload nhiều ảnh)\r\n+// Cấu hình storage cho Cloudinary\r\n const storage = new CloudinaryStorage({\r\n   cloudinary: cloudinary,\r\n   params: {\r\n     folder: \"products\",\r\n-    format: async (req, file) => \"png\",\r\n-    public_id: (req, file) => Date.now() + \"-\" + file.originalname,\r\n+    format: async (req, file) => \"png\", // Lưu ảnh dưới dạng PNG\r\n+    public_id: (req, file) => Date.now() + \"-\" + file.originalname, // Đặt tên file\r\n   },\r\n });\r\n+\r\n const upload = multer({ storage });\r\n \r\n-// API Upload nhiều ảnh\r\n-router.post(\"/upload-multiple\", upload.array(\"images\", 5), async (req, res) => {\r\n-  try {\r\n-    if (!req.files || req.files.length === 0) {\r\n-      return res.status(400).json({ message: \"No files uploaded\" });\r\n-    }\r\n-\r\n-    // Lưu URL và publicId vào MongoDB\r\n-    const images = await Promise.all(\r\n-      req.files.map(async (file) => {\r\n-        const newImage = new Image({\r\n-          url: file.path, // URL ảnh trên Cloudinary\r\n-          publicId: file.filename, // ID ảnh trên Cloudinary\r\n-        });\r\n-        await newImage.save();\r\n-        return newImage._id; // Trả về ID của ảnh vừa lưu\r\n-      })\r\n-    );\r\n-\r\n-    res.json({ imageIds: images }); // Trả về mảng ID ảnh\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Upload failed\" });\r\n-  }\r\n-});\r\n-\r\n-// API Thêm ảnh vào sản phẩm\r\n-router.post(\"/product/:productId/add-images\", async (req, res) => {\r\n-  try {\r\n-    const { productId } = req.params;\r\n-    const { imageIds } = req.body; // Nhận danh sách ID ảnh từ frontend\r\n-\r\n-    const product = await Product.findById(productId);\r\n-    if (!product) {\r\n-      return res.status(404).json({ message: \"Product not found\" });\r\n-    }\r\n-\r\n-    // Thêm ảnh vào danh sách images của sản phẩm\r\n-    product.images.push(...imageIds);\r\n-    await product.save();\r\n-\r\n-    res.json({ message: \"Images added to product successfully\", product });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Failed to add images\" });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n+module.exports = upload;\r\n"
                },
                {
                    "date": 1739809005606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,34 @@\n-const multer = require(\"multer\");\r\n-const { CloudinaryStorage } = require(\"multer-storage-cloudinary\");\r\n-const cloudinary = require(\"../config/cloudinary\");\r\n+const express = require(\"express\");\r\n+const upload = require(\"../middleware/upload\");\r\n+const Image = require(\"../models/Image\");\r\n+const Product = require(\"../models/Product\");\r\n+const router = express.Router();\r\n \r\n-// Cấu hình storage cho Cloudinary\r\n-const storage = new CloudinaryStorage({\r\n-  cloudinary: cloudinary,\r\n-  params: {\r\n-    folder: \"products\",\r\n-    format: async (req, file) => \"png\", // Lưu ảnh dưới dạng PNG\r\n-    public_id: (req, file) => Date.now() + \"-\" + file.originalname, // Đặt tên file\r\n-  },\r\n+router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    const { productId } = req.body; // Lấy productId từ body request\r\n+\r\n+    // Kiểm tra nếu không có productId\r\n+    if (!productId) return res.status(400).json({ message: \"Cần có ID sản phẩm\" });\r\n+\r\n+    // Tìm sản phẩm trong cơ sở dữ liệu\r\n+    const product = await Product.findById(productId);\r\n+    if (!product) return res.status(404).json({ message: \"Không tìm thấy sản phẩm\" });\r\n+\r\n+    // Lưu thông tin ảnh vào MongoDB\r\n+    const image = new Image({\r\n+      product: productId,\r\n+      url: req.file.path, // Đường dẫn ảnh từ Cloudinary\r\n+    });\r\n+\r\n+    // Lưu ảnh vào cơ sở dữ liệu\r\n+    await image.save();\r\n+\r\n+    // Trả về phản hồi thành công\r\n+    res.status(201).json({ message: \"Ảnh tải lên thành công\", image });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: err.message });\r\n+  }\r\n });\r\n \r\n-const upload = multer({ storage });\r\n-\r\n-module.exports = upload;\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1739809042241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,17 @@\n-const express = require(\"express\");\r\n-const upload = require(\"../middleware/upload\");\r\n-const Image = require(\"../models/Image\");\r\n-const Product = require(\"../models/Product\");\r\n-const router = express.Router();\r\n+const multer = require(\"multer\");\r\n+const { CloudinaryStorage } = require(\"multer-storage-cloudinary\");\r\n+const cloudinary = require(\"../config/cloudinary\");\r\n \r\n-router.post(\"/upload\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    const { productId } = req.body; // Lấy productId từ body request\r\n+// Cấu hình storage cho Cloudinary\r\n+const storage = new CloudinaryStorage({\r\n+  cloudinary: cloudinary,\r\n+  params: {\r\n+    folder: \"products\",\r\n+    format: async (req, file) => \"png\", // Lưu ảnh dưới dạng PNG\r\n+    public_id: (req, file) => Date.now() + \"-\" + file.originalname, // Đặt tên file\r\n+  },\r\n+});\r\n \r\n-    // Kiểm tra nếu không có productId\r\n-    if (!productId) return res.status(400).json({ message: \"Cần có ID sản phẩm\" });\r\n+const upload = multer({ storage });\r\n \r\n-    // Tìm sản phẩm trong cơ sở dữ liệu\r\n-    const product = await Product.findById(productId);\r\n-    if (!product) return res.status(404).json({ message: \"Không tìm thấy sản phẩm\" });\r\n-\r\n-    // Lưu thông tin ảnh vào MongoDB\r\n-    const image = new Image({\r\n-      product: productId,\r\n-      url: req.file.path, // Đường dẫn ảnh từ Cloudinary\r\n-    });\r\n-\r\n-    // Lưu ảnh vào cơ sở dữ liệu\r\n-    await image.save();\r\n-\r\n-    // Trả về phản hồi thành công\r\n-    res.status(201).json({ message: \"Ảnh tải lên thành công\", image });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: err.message });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n+module.exports = upload;\r\n"
                },
                {
                    "date": 1739949429192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,31 @@\n-const multer = require(\"multer\");\r\n-const { CloudinaryStorage } = require(\"multer-storage-cloudinary\");\r\n-const cloudinary = require(\"../config/cloudinary\");\r\n+const upload = require(\"../middleware/upload\");\r\n \r\n-// Cấu hình storage cho Cloudinary\r\n-const storage = new CloudinaryStorage({\r\n-  cloudinary: cloudinary,\r\n-  params: {\r\n-    folder: \"products\",\r\n-    format: async (req, file) => \"png\", // Lưu ảnh dưới dạng PNG\r\n-    public_id: (req, file) => Date.now() + \"-\" + file.originalname, // Đặt tên file\r\n-  },\r\n-});\r\n+router.post(\"/api/products\", upload.single(\"image\"), async (req, res) => {\r\n+  try {\r\n+    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n+    console.log(\"File upload:\", req.file); // Kiểm tra ảnh có upload không\r\n \r\n-const upload = multer({ storage });\r\n+    if (!req.body.name || !req.body.price || !req.body.code) {\r\n+      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n+    }\r\n \r\n-module.exports = upload;\r\n+    const newProduct = {\r\n+      name: req.body.name,\r\n+      price: Number(req.body.price), // Chuyển về số\r\n+      quantity: Number(req.body.quantity),\r\n+      code: req.body.code,\r\n+      brand: req.body.brand,\r\n+      categories: JSON.parse(req.body.categories), // Chuyển JSON string thành mảng\r\n+      image: req.file ? req.file.path : \"\", // Nếu có ảnh thì lấy từ Cloudinary\r\n+    };\r\n+\r\n+    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n+    // Lưu vào database (giả sử dùng MongoDB)\r\n+    const product = await Product.create(newProduct);\r\n+\r\n+    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n+  } catch (error) {\r\n+    console.error(\"Lỗi API:\", error);\r\n+    res.status(500).json({ message: \"Lỗi server!\" });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1739949443228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,8 @@\n+const multer = require(\"multer\");\r\n+const { CloudinaryStorage } = require(\"multer-storage-cloudinary\");\r\n+const cloudinary = require(\"../config/cloudinary\");\r\n+\r\n const upload = require(\"../middleware/upload\");\r\n \r\n router.post(\"/api/products\", upload.single(\"image\"), async (req, res) => {\r\n   try {\r\n@@ -28,4 +32,5 @@\n     console.error(\"Lỗi API:\", error);\r\n     res.status(500).json({ message: \"Lỗi server!\" });\r\n   }\r\n });\r\n+\r\n"
                },
                {
                    "date": 1739949453631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,17 @@\n const multer = require(\"multer\");\r\n const { CloudinaryStorage } = require(\"multer-storage-cloudinary\");\r\n const cloudinary = require(\"../config/cloudinary\");\r\n \r\n-const upload = require(\"../middleware/upload\");\r\n+// Cấu hình storage cho Cloudinary\r\n+const storage = new CloudinaryStorage({\r\n+  cloudinary: cloudinary,\r\n+  params: {\r\n+    folder: \"products\",\r\n+    format: async (req, file) => \"png\", // Lưu ảnh dưới dạng PNG\r\n+    public_id: (req, file) => Date.now() + \"-\" + file.originalname, // Đặt tên file\r\n+  },\r\n+});\r\n \r\n-router.post(\"/api/products\", upload.single(\"image\"), async (req, res) => {\r\n-  try {\r\n-    console.log(\"Dữ liệu nhận từ Client:\", req.body);\r\n-    console.log(\"File upload:\", req.file); // Kiểm tra ảnh có upload không\r\n+const upload = multer({ storage });\r\n \r\n-    if (!req.body.name || !req.body.price || !req.body.code) {\r\n-      return res.status(400).json({ message: \"Thiếu dữ liệu cần thiết!\" });\r\n-    }\r\n-\r\n-    const newProduct = {\r\n-      name: req.body.name,\r\n-      price: Number(req.body.price), // Chuyển về số\r\n-      quantity: Number(req.body.quantity),\r\n-      code: req.body.code,\r\n-      brand: req.body.brand,\r\n-      categories: JSON.parse(req.body.categories), // Chuyển JSON string thành mảng\r\n-      image: req.file ? req.file.path : \"\", // Nếu có ảnh thì lấy từ Cloudinary\r\n-    };\r\n-\r\n-    console.log(\"Dữ liệu sẽ lưu:\", newProduct);\r\n-    // Lưu vào database (giả sử dùng MongoDB)\r\n-    const product = await Product.create(newProduct);\r\n-\r\n-    res.status(201).json({ message: \"Sản phẩm đã được tạo!\", product });\r\n-  } catch (error) {\r\n-    console.error(\"Lỗi API:\", error);\r\n-    res.status(500).json({ message: \"Lỗi server!\" });\r\n-  }\r\n-});\r\n-\r\n+module.exports = upload;\r\n"
                },
                {
                    "date": 1740590793943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,5 +13,7 @@\n });\r\n \r\n const upload = multer({ storage });\r\n \r\n+console.log(\"Cloudinary connected:\", cloudinary.config().cloud_name); // Kiểm tra kết nối\r\n+\r\n module.exports = upload;\r\n"
                }
            ],
            "date": 1738927187738,
            "name": "Commit-0",
            "content": "const multer = require(\"multer\");\r\nconst path = require(\"path\");\r\n\r\n// Cấu hình lưu ảnh vào thư mục \"uploads\"\r\nconst storage = multer.diskStorage({\r\n  destination: function (req, file, cb) {\r\n    cb(null, \"uploads/\");\r\n  },\r\n  filename: function (req, file, cb) {\r\n    cb(null, Date.now() + path.extname(file.originalname)); // Đổi tên file\r\n  },\r\n});\r\n\r\n// Bộ lọc chỉ cho phép file ảnh\r\nconst fileFilter = (req, file, cb) => {\r\n  if (file.mimetype.startsWith(\"image/\")) {\r\n    cb(null, true);\r\n  } else {\r\n    cb(new Error(\"Chỉ cho phép tải ảnh!\"), false);\r\n  }\r\n};\r\n\r\n// Middleware upload ảnh\r\nconst upload = multer({ storage, fileFilter });\r\n\r\nmodule.exports = upload;\r\n"
        }
    ]
}